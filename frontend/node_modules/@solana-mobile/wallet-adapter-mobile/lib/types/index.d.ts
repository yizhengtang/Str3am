import { BaseSignInMessageSignerWalletAdapter, WalletName, WalletReadyState } from "@solana/wallet-adapter-base";
import { Connection, PublicKey, SendOptions, TransactionSignature, TransactionVersion, VersionedTransaction } from "@solana/web3.js";
import { Transaction as LegacyTransaction } from "@solana/web3.js";
import { AppIdentity, AuthorizationResult, Base64EncodedAddress, Chain, Cluster, SignInPayload } from "@solana-mobile/mobile-wallet-adapter-protocol";
import { SolanaSignInInput, SolanaSignInOutput } from "@solana/wallet-standard-features";
import { Authorization, LocalSolanaMobileWalletAdapterWallet, RemoteSolanaMobileWalletAdapterWallet } from "@solana-mobile/wallet-standard-mobile";
interface AuthorizationResultCache {
    clear(): Promise<void>;
    get(): Promise<AuthorizationResult | Authorization | undefined>;
    set(authorizationResult: AuthorizationResult | Authorization): Promise<void>;
}
interface AddressSelector {
    select(addresses: Base64EncodedAddress[]): Promise<Base64EncodedAddress>;
}
declare const SolanaMobileWalletAdapterWalletName: WalletName<string>;
declare abstract class BaseSolanaMobileWalletAdapter extends BaseSignInMessageSignerWalletAdapter {
    #private;
    readonly supportedTransactionVersions: Set<TransactionVersion>;
    name: WalletName<string>;
    icon: `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    url: string;
    protected constructor(wallet: LocalSolanaMobileWalletAdapterWallet | RemoteSolanaMobileWalletAdapterWallet, config: {
        addressSelector: AddressSelector;
        chain: Chain;
    });
    get publicKey(): PublicKey | null;
    get connected(): boolean;
    get connecting(): boolean;
    get readyState(): WalletReadyState;
    /** @deprecated Use `autoConnect()` instead. */
    autoConnect_DO_NOT_USE_OR_YOU_WILL_BE_FIRED(): Promise<void>;
    autoConnect(): Promise<void>;
    connect(): Promise<void>;
    /** @deprecated Use `connect()` or `autoConnect()` instead. */
    performAuthorization(signInPayload?: SignInPayload): Promise<AuthorizationResult>;
    disconnect(): Promise<void>;
    signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    sendTransaction<T extends LegacyTransaction | VersionedTransaction>(transaction: T, connection: Connection, options?: SendOptions): Promise<TransactionSignature>;
    signTransaction<T extends LegacyTransaction | VersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions<T extends LegacyTransaction | VersionedTransaction>(transactions: T[]): Promise<T[]>;
}
declare class LocalSolanaMobileWalletAdapter extends BaseSolanaMobileWalletAdapter {
    /**
     * @deprecated @param cluster config paramter is deprecated, use @param chain instead
     */
    constructor(config: {
        addressSelector: AddressSelector;
        appIdentity: AppIdentity;
        authorizationResultCache: AuthorizationResultCache;
        cluster: Cluster;
        onWalletNotFound: (mobileWalletAdapter: LocalSolanaMobileWalletAdapter) => Promise<void>;
    });
    constructor(config: {
        addressSelector: AddressSelector;
        appIdentity: AppIdentity;
        authorizationResultCache: AuthorizationResultCache;
        chain: Chain;
        onWalletNotFound: (mobileWalletAdapter: LocalSolanaMobileWalletAdapter) => Promise<void>;
    });
}
declare class RemoteSolanaMobileWalletAdapter extends BaseSolanaMobileWalletAdapter {
    constructor(config: {
        addressSelector: AddressSelector;
        appIdentity: AppIdentity;
        authorizationResultCache: AuthorizationResultCache;
        chain: Chain;
        remoteHostAuthority: string;
        onWalletNotFound: (mobileWalletAdapter: RemoteSolanaMobileWalletAdapter) => Promise<void>;
    });
}
declare class SolanaMobileWalletAdapter extends LocalSolanaMobileWalletAdapter {
}
declare function createDefaultAddressSelector(): AddressSelector;
declare function createDefaultAuthorizationResultCache(): AuthorizationResultCache;
declare function createDefaultWalletNotFoundHandler(): (mobileWalletAdapter: SolanaMobileWalletAdapter) => Promise<void>;
export { AuthorizationResultCache, AddressSelector, SolanaMobileWalletAdapterWalletName, LocalSolanaMobileWalletAdapter, RemoteSolanaMobileWalletAdapter, SolanaMobileWalletAdapter, createDefaultAddressSelector, createDefaultAuthorizationResultCache, createDefaultWalletNotFoundHandler };
//# sourceMappingURL=index.d.ts.map