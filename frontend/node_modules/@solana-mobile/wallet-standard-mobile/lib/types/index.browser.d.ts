import { SolanaSignAndSendTransactionFeature, SolanaSignInFeature, SolanaSignMessageFeature, SolanaSignTransactionFeature } from "@solana/wallet-standard-features";
import { AppIdentity, AuthorizationResult } from "@solana-mobile/mobile-wallet-adapter-protocol";
import { IdentifierArray, IdentifierString, Wallet, WalletAccount } from "@wallet-standard/base";
import { StandardConnectFeature, StandardDisconnectFeature, StandardEventsFeature } from "@wallet-standard/features";
type Authorization = AuthorizationResult & Readonly<{
    chain: IdentifierString;
}>;
interface AuthorizationCache {
    clear(): Promise<void>;
    get(): Promise<Authorization | undefined>;
    set(authorizationResult: Authorization): Promise<void>;
}
interface ChainSelector {
    select(chains: IdentifierArray): Promise<IdentifierString>;
}
declare const SolanaMobileWalletAdapterWalletName = "Mobile Wallet Adapter";
interface SolanaMobileWalletAdapterWallet extends Wallet {
    url: string;
}
interface SolanaMobileWalletAdapterAuthorization {
    get isAuthorized(): boolean;
    get currentAuthorization(): Authorization | undefined;
    get cachedAuthorizationResult(): Promise<Authorization | undefined>;
}
declare class LocalSolanaMobileWalletAdapterWallet implements SolanaMobileWalletAdapterWallet, SolanaMobileWalletAdapterAuthorization {
    #private;
    get version(): "1.0.0";
    get name(): string;
    get url(): string;
    get icon(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get chains(): IdentifierArray;
    get features(): StandardConnectFeature & StandardDisconnectFeature & StandardEventsFeature & SolanaSignMessageFeature & SolanaSignInFeature & (SolanaSignAndSendTransactionFeature | SolanaSignTransactionFeature);
    get accounts(): WalletAccount[];
    constructor(config: {
        appIdentity: AppIdentity;
        authorizationCache: AuthorizationCache;
        chains: IdentifierArray;
        chainSelector: ChainSelector;
        onWalletNotFound: (mobileWalletAdapter: SolanaMobileWalletAdapterWallet) => Promise<void>;
    });
    get connected(): boolean;
    get isAuthorized(): boolean;
    get currentAuthorization(): Authorization | undefined;
    get cachedAuthorizationResult(): Promise<Authorization | undefined>;
}
declare class RemoteSolanaMobileWalletAdapterWallet implements SolanaMobileWalletAdapterWallet, SolanaMobileWalletAdapterAuthorization {
    #private;
    get version(): "1.0.0";
    get name(): string;
    get url(): string;
    get icon(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get chains(): IdentifierArray;
    get features(): StandardConnectFeature & StandardDisconnectFeature & StandardEventsFeature & SolanaSignMessageFeature & SolanaSignInFeature & (SolanaSignAndSendTransactionFeature | SolanaSignTransactionFeature);
    get accounts(): WalletAccount[];
    constructor(config: {
        appIdentity: AppIdentity;
        authorizationCache: AuthorizationCache;
        chains: IdentifierArray;
        chainSelector: ChainSelector;
        remoteHostAuthority: string;
        onWalletNotFound: (mobileWalletAdapter: SolanaMobileWalletAdapterWallet) => Promise<void>;
    });
    get connected(): boolean;
    get isAuthorized(): boolean;
    get currentAuthorization(): Authorization | undefined;
    get cachedAuthorizationResult(): Promise<Authorization | undefined>;
}
declare function registerMwa(config: {
    appIdentity: AppIdentity;
    authorizationCache: AuthorizationCache;
    chains: IdentifierArray;
    chainSelector: ChainSelector;
    remoteHostAuthority?: string;
    onWalletNotFound: (mobileWalletAdapter: SolanaMobileWalletAdapterWallet) => Promise<void>;
}): void;
declare function defaultErrorModalWalletNotFoundHandler(): Promise<void>;
declare function createDefaultWalletNotFoundHandler(): (mobileWalletAdapter: SolanaMobileWalletAdapterWallet) => Promise<void>;
declare function createDefaultAuthorizationCache(): AuthorizationCache;
declare function createDefaultChainSelector(): ChainSelector;
export { Authorization, AuthorizationCache, ChainSelector, SolanaMobileWalletAdapterWalletName, SolanaMobileWalletAdapterWallet, LocalSolanaMobileWalletAdapterWallet, RemoteSolanaMobileWalletAdapterWallet, registerMwa, defaultErrorModalWalletNotFoundHandler, createDefaultWalletNotFoundHandler as default, createDefaultWalletNotFoundHandler, createDefaultAuthorizationCache, createDefaultChainSelector };
//# sourceMappingURL=index.browser.d.ts.map