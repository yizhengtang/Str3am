"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isChanged = void 0;
const isChanged = (prev, current, filter) => {
    if (prev === current)
        return false;
    if (!prev || !current)
        return true;
    const prevType = Object.prototype.toString.call(prev);
    const currentType = Object.prototype.toString.call(current);
    if (prevType !== currentType)
        return true;
    if (currentType === '[object Array]') {
        if (prev.length !== current.length)
            return true;
        for (let i = 0; i < current.length; i++) {
            if ((0, exports.isChanged)(prev[i], current[i], filter))
                return true;
        }
    }
    else if (currentType === '[object Object]') {
        const prevKeys = Object.keys(prev);
        const currentKeys = Object.keys(current);
        if (prevKeys.length !== currentKeys.length)
            return true;
        const prevDifference = prevKeys.find(k => currentKeys.indexOf(k) < 0);
        if (prevDifference)
            return true;
        for (let i = 0; i < currentKeys.length; i++) {
            const key = currentKeys[i];
            if (filter &&
                Object.prototype.hasOwnProperty.call(filter, key) &&
                prev[key] &&
                current[key]) {
                const prevFiltered = {};
                const currentFiltered = {};
                for (let i2 = 0; i2 < filter[key].length; i2++) {
                    const field = filter[key][i2];
                    prevFiltered[field] = prev[key][field];
                    currentFiltered[field] = current[key][field];
                }
                if ((0, exports.isChanged)(prevFiltered, currentFiltered))
                    return true;
            }
            else if ((0, exports.isChanged)(prev[key], current[key])) {
                return true;
            }
        }
    }
    else if (prev !== current) {
        return true;
    }
    return false;
};
exports.isChanged = isChanged;
//# sourceMappingURL=comparison.js.map