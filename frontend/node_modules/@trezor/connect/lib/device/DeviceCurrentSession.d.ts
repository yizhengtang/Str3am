import { MessagesSchema as Messages } from '@trezor/protobuf';
import { TransportProtocol } from '@trezor/protocol';
import { Session, Transport } from '@trezor/transport';
import { Device } from './Device';
export interface TypedCallProvider {
    typedCall: Messages.TypedCall;
    cancelCall: DeviceCurrentSession['cancelCall'];
    isDisposed: () => boolean;
}
export declare class DeviceCurrentSession implements TypedCallProvider {
    private readonly device;
    private readonly transport;
    private readonly protocol;
    private readonly session;
    private disposed;
    private callPromise?;
    private abortController?;
    constructor(device: Device, transport: Transport, protocol: TransportProtocol, session: Session);
    isDisposed(): boolean;
    typedCall(type: Messages.MessageKey, resType: Messages.MessageKey | Messages.MessageKey[], msg?: Messages.MessagePayload): Promise<{
        type: "BinanceTransferMsg";
        message: {
            chunkify?: boolean | undefined;
            inputs: {
                address: string;
                coins: {
                    amount: string | number;
                    denom: string;
                }[];
            }[];
            outputs: {
                address: string;
                coins: {
                    amount: string | number;
                    denom: string;
                }[];
            }[];
        };
    } | {
        type: "BinanceOrderMsg";
        message: {
            symbol?: string | undefined;
            id?: string | undefined;
            sender?: string | undefined;
            ordertype: Messages.BinanceOrderType;
            price: number;
            quantity: number;
            side: Messages.BinanceOrderSide;
            timeinforce: Messages.BinanceTimeInForce;
        };
    } | {
        type: "BinanceCancelMsg";
        message: {
            symbol?: string | undefined;
            sender?: string | undefined;
            refid?: string | undefined;
        };
    } | {
        type: "PassphraseAck";
        message: {
            passphrase?: string | undefined;
            _state?: string | undefined;
            on_device?: boolean | undefined;
        };
    } | {
        type: "CipheredKeyValue";
        message: {
            value: string;
        };
    } | {
        type: "GetPublicKey";
        message: {
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            ecdsa_curve_name?: string | undefined;
            show_display?: boolean | undefined;
            coin_name?: string | undefined;
            ignore_xpub_magic?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "PublicKey";
        message: {
            descriptor?: string | undefined;
            root_fingerprint?: number | undefined;
            node: {
                private_key?: string | undefined;
                public_key: string;
                depth: number;
                fingerprint: number;
                child_num: number;
                chain_code: string;
            };
            xpub: string;
        };
    } | {
        type: "Features";
        message: {
            _passphrase_cached?: boolean | undefined;
            busy?: boolean | undefined;
            homescreen_format?: "Toif" | "Jpeg" | "ToiG" | undefined;
            hide_passphrase_from_host?: boolean | undefined;
            unit_color?: number | undefined;
            unit_btconly?: boolean | undefined;
            homescreen_width?: number | undefined;
            homescreen_height?: number | undefined;
            bootloader_locked?: boolean | undefined;
            language_version_matches?: boolean | undefined;
            unit_packaging?: number | undefined;
            haptic_feedback?: boolean | undefined;
            recovery_type?: "NormalRecovery" | "DryRun" | "UnlockRepeatedBackup" | undefined;
            optiga_sec?: number | undefined;
            vendor: string;
            major_version: number;
            minor_version: number;
            patch_version: number;
            bootloader_mode: boolean | null;
            device_id: string | null;
            pin_protection: boolean | null;
            passphrase_protection: boolean | null;
            language: string | null;
            label: string | null;
            initialized: boolean | null;
            revision: string | null;
            bootloader_hash: string | null;
            imported: boolean | null;
            unlocked: boolean | null;
            firmware_present: boolean | null;
            backup_availability: "NotAvailable" | "Required" | "Available" | null;
            flags: number | null;
            model: string;
            fw_major: number | null;
            fw_minor: number | null;
            fw_patch: number | null;
            fw_vendor: string | null;
            unfinished_backup: boolean | null;
            no_backup: boolean | null;
            recovery_status: "Nothing" | "Recovery" | "Backup" | null;
            capabilities: ("Capability_Bitcoin" | "Capability_Bitcoin_like" | "Capability_Binance" | "Capability_Cardano" | "Capability_Crypto" | "Capability_EOS" | "Capability_Ethereum" | "Capability_Lisk" | "Capability_Monero" | "Capability_NEM" | "Capability_Ripple" | "Capability_Stellar" | "Capability_Tezos" | "Capability_U2F" | "Capability_Shamir" | "Capability_ShamirGroups" | "Capability_PassphraseEntry" | "Capability_Solana" | "Capability_Translations" | "Capability_Brightness" | "Capability_Haptic")[];
            backup_type: "Bip39" | "Slip39_Basic" | "Slip39_Advanced" | "Slip39_Single_Extendable" | "Slip39_Basic_Extendable" | "Slip39_Advanced_Extendable" | null;
            sd_card_present: boolean | null;
            sd_protection: boolean | null;
            wipe_code_protection: boolean | null;
            session_id: string | null;
            passphrase_always_on_device: boolean | null;
            safety_checks: "Strict" | "PromptAlways" | "PromptTemporarily" | null;
            auto_lock_delay_ms: number | null;
            display_rotation: "North" | "East" | "South" | "West" | null;
            experimental_features: boolean | null;
            internal_model: Messages.DeviceModelInternal;
        };
    } | {
        type: "BinanceGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "BinanceAddress";
        message: {
            address: string;
        };
    } | {
        type: "BinanceGetPublicKey";
        message: {
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "BinancePublicKey";
        message: {
            public_key: string;
        };
    } | {
        type: "BinanceSignTx";
        message: {
            chunkify?: boolean | undefined;
            chain_id?: string | undefined;
            memo?: string | undefined;
            address_n: number[];
            account_number: number;
            sequence: number;
            source: number;
            msg_count: number;
        };
    } | {
        type: "BinanceTxRequest";
        message: {};
    } | {
        type: "BinanceCoin";
        message: {
            amount: string | number;
            denom: string;
        };
    } | {
        type: "BinanceInputOutput";
        message: {
            address: string;
            coins: {
                amount: string | number;
                denom: string;
            }[];
        };
    } | {
        type: "BinanceSignedTx";
        message: {
            signature: string;
            public_key: string;
        };
    } | {
        type: "HDNodeType";
        message: {
            private_key?: string | undefined;
            public_key: string;
            depth: number;
            fingerprint: number;
            child_num: number;
            chain_code: string;
        };
    } | {
        type: "HDNodePathType";
        message: {
            address_n: number[];
            node: string | {
                private_key?: string | undefined;
                public_key: string;
                depth: number;
                fingerprint: number;
                child_num: number;
                chain_code: string;
            };
        };
    } | {
        type: "MultisigRedeemScriptType";
        message: {
            address_n?: number[] | undefined;
            nodes?: {
                private_key?: string | undefined;
                public_key: string;
                depth: number;
                fingerprint: number;
                child_num: number;
                chain_code: string;
            }[] | undefined;
            pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
            pubkeys: {
                address_n: number[];
                node: string | {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                };
            }[];
            signatures: string[];
            m: number;
        };
    } | {
        type: "GetAddress";
        message: {
            chunkify?: boolean | undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            show_display?: boolean | undefined;
            coin_name?: string | undefined;
            ignore_xpub_magic?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "Address";
        message: {
            mac?: string | undefined;
            address: string;
        };
    } | {
        type: "GetOwnershipId";
        message: {
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            coin_name?: string | undefined;
            address_n: number[];
        };
    } | {
        type: "OwnershipId";
        message: {
            ownership_id: string;
        };
    } | {
        type: "SignMessage";
        message: {
            chunkify?: boolean | undefined;
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            no_script_type?: boolean | undefined;
            coin_name?: string | undefined;
            address_n: number[];
            message: string;
        };
    } | {
        type: "MessageSignature";
        message: {
            address: string;
            signature: string;
        };
    } | {
        type: "VerifyMessage";
        message: {
            chunkify?: boolean | undefined;
            coin_name?: string | undefined;
            address: string;
            message: string;
            signature: string;
        };
    } | {
        type: "CoinJoinRequest";
        message: {
            signature?: string | undefined;
            mask_public_key?: string | undefined;
            fee_rate: number;
            no_fee_threshold: number;
            min_registrable_amount: number;
        };
    } | {
        type: "SignTx";
        message: {
            chunkify?: boolean | undefined;
            version?: number | undefined;
            timestamp?: number | undefined;
            expiry?: number | undefined;
            overwintered?: boolean | undefined;
            serialize?: boolean | undefined;
            coin_name?: string | undefined;
            lock_time?: number | undefined;
            version_group_id?: number | undefined;
            branch_id?: number | undefined;
            amount_unit?: Messages.AmountUnit | undefined;
            decred_staking_ticket?: boolean | undefined;
            coinjoin_request?: {
                signature?: string | undefined;
                mask_public_key?: string | undefined;
                fee_rate: number;
                no_fee_threshold: number;
                min_registrable_amount: number;
            } | undefined;
            outputs_count: number;
            inputs_count: number;
        };
    } | {
        type: "TxRequestDetailsType";
        message: {
            tx_hash?: string | undefined;
            extra_data_len?: number | undefined;
            extra_data_offset?: number | undefined;
            request_index: number;
        };
    } | {
        type: "TxRequestSerializedType";
        message: {
            signature?: string | undefined;
            signature_index?: number | undefined;
            serialized_tx?: string | undefined;
        };
    } | {
        type: "TxRequest";
        message: {
            serialized?: {
                signature?: string | undefined;
                signature_index?: number | undefined;
                serialized_tx?: string | undefined;
            } | undefined;
            details: {
                tx_hash?: string | undefined;
                extra_data_len?: number | undefined;
                extra_data_offset?: number | undefined;
                request_index: number;
            };
            request_type: "TXINPUT" | "TXOUTPUT" | "TXMETA" | "TXFINISHED" | "TXEXTRADATA" | "TXORIGINPUT" | "TXORIGOUTPUT" | "TXPAYMENTREQ";
        };
    } | {
        type: "TxInputType";
        message: ({
            sequence?: number | undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            decred_tree?: number | undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
            script_pubkey?: string | undefined;
            coinjoin_flags?: number | undefined;
            script_sig?: string | undefined;
            witness?: string | undefined;
            ownership_proof?: string | undefined;
            commitment_data?: string | undefined;
            amount: string | number;
            prev_hash: string;
            prev_index: number;
        } & {
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | undefined;
            address_n: number[];
        }) | ({
            sequence?: number | undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            decred_tree?: number | undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
            script_pubkey?: string | undefined;
            coinjoin_flags?: number | undefined;
            script_sig?: string | undefined;
            witness?: string | undefined;
            ownership_proof?: string | undefined;
            commitment_data?: string | undefined;
            amount: string | number;
            prev_hash: string;
            prev_index: number;
        } & {
            address_n?: undefined;
            script_pubkey: string;
            script_type: "EXTERNAL";
        });
    } | {
        type: "TxOutputBinType";
        message: {
            decred_script_version?: number | undefined;
            amount: string | number;
            script_pubkey: string;
        };
    } | {
        type: "TxOutputType";
        message: {
            address_n?: undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            payment_req_index?: number | undefined;
            address: string;
            amount: string | number;
            script_type: "PAYTOADDRESS";
        } | {
            address?: undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
            payment_req_index?: number | undefined;
            address_n: number[];
            amount: string | number;
        } | {
            address_n?: undefined;
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
            payment_req_index?: number | undefined;
            address: string;
            amount: string | number;
        } | {
            address_n?: undefined;
            address?: undefined;
            orig_hash?: string | undefined;
            orig_index?: number | undefined;
            payment_req_index?: number | undefined;
            amount: 0 | "0";
            script_type: "PAYTOOPRETURN";
            op_return_data: string;
        };
    } | {
        type: "PrevTx";
        message: {
            timestamp?: number | undefined;
            expiry?: number | undefined;
            version_group_id?: number | undefined;
            branch_id?: number | undefined;
            extra_data_len?: number | undefined;
            version: number;
            outputs_count: number;
            inputs_count: number;
            lock_time: number;
        };
    } | {
        type: "PrevInput";
        message: {
            decred_tree?: number | undefined;
            sequence: number;
            prev_hash: string;
            prev_index: number;
            script_sig: string;
        };
    } | {
        type: "PrevOutput";
        message: {
            decred_script_version?: number | undefined;
            amount: string | number;
            script_pubkey: string;
        };
    } | {
        type: "TextMemo";
        message: {
            text: string;
        };
    } | {
        type: "RefundMemo";
        message: {
            address: string;
            mac: string;
        };
    } | {
        type: "CoinPurchaseMemo";
        message: {
            address: string;
            amount: string | number;
            mac: string;
            coin_type: number;
        };
    } | {
        type: "PaymentRequestMemo";
        message: {
            text_memo?: {
                text: string;
            } | undefined;
            refund_memo?: {
                address: string;
                mac: string;
            } | undefined;
            coin_purchase_memo?: {
                address: string;
                amount: string | number;
                mac: string;
                coin_type: number;
            } | undefined;
        };
    } | {
        type: "TxAckPaymentRequest";
        message: {
            amount?: string | number | undefined;
            nonce?: string | undefined;
            memos?: {
                text_memo?: {
                    text: string;
                } | undefined;
                refund_memo?: {
                    address: string;
                    mac: string;
                } | undefined;
                coin_purchase_memo?: {
                    address: string;
                    amount: string | number;
                    mac: string;
                    coin_type: number;
                } | undefined;
            }[] | undefined;
            signature: string;
            recipient_name: string;
        };
    } | {
        type: "TxAck";
        message: {
            tx: {
                inputs: (({
                    sequence?: number | undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    decred_tree?: number | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                    script_pubkey?: string | undefined;
                    coinjoin_flags?: number | undefined;
                    script_sig?: string | undefined;
                    witness?: string | undefined;
                    ownership_proof?: string | undefined;
                    commitment_data?: string | undefined;
                    amount: string | number;
                    prev_hash: string;
                    prev_index: number;
                } & {
                    script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | undefined;
                    address_n: number[];
                }) | ({
                    sequence?: number | undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    decred_tree?: number | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                    script_pubkey?: string | undefined;
                    coinjoin_flags?: number | undefined;
                    script_sig?: string | undefined;
                    witness?: string | undefined;
                    ownership_proof?: string | undefined;
                    commitment_data?: string | undefined;
                    amount: string | number;
                    prev_hash: string;
                    prev_index: number;
                } & {
                    address_n?: undefined;
                    script_pubkey: string;
                    script_type: "EXTERNAL";
                }) | {
                    decred_tree?: number | undefined;
                    sequence: number;
                    prev_hash: string;
                    prev_index: number;
                    script_sig: string;
                })[];
            } | {
                bin_outputs: {
                    decred_script_version?: number | undefined;
                    amount: string | number;
                    script_pubkey: string;
                }[];
            } | {
                outputs: ({
                    address_n?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    payment_req_index?: number | undefined;
                    address: string;
                    amount: string | number;
                    script_type: "PAYTOADDRESS";
                } | {
                    address?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                    payment_req_index?: number | undefined;
                    address_n: number[];
                    amount: string | number;
                } | {
                    address_n?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                    payment_req_index?: number | undefined;
                    address: string;
                    amount: string | number;
                } | {
                    address_n?: undefined;
                    address?: undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    payment_req_index?: number | undefined;
                    amount: 0 | "0";
                    script_type: "PAYTOOPRETURN";
                    op_return_data: string;
                })[];
            } | {
                extra_data: string;
            } | {
                version?: number | undefined;
                timestamp?: number | undefined;
                expiry?: number | undefined;
                lock_time?: number | undefined;
                version_group_id?: number | undefined;
                branch_id?: number | undefined;
                extra_data_len?: number | undefined;
                extra_data?: string | undefined;
                inputs_cnt: number;
                outputs_cnt: number;
            };
        };
    } | {
        type: "TxAckInputWrapper";
        message: {
            input: ({
                sequence?: number | undefined;
                multisig?: {
                    address_n?: number[] | undefined;
                    nodes?: {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    }[] | undefined;
                    pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                    pubkeys: {
                        address_n: number[];
                        node: string | {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        };
                    }[];
                    signatures: string[];
                    m: number;
                } | undefined;
                decred_tree?: number | undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                script_pubkey?: string | undefined;
                coinjoin_flags?: number | undefined;
                script_sig?: string | undefined;
                witness?: string | undefined;
                ownership_proof?: string | undefined;
                commitment_data?: string | undefined;
                amount: string | number;
                prev_hash: string;
                prev_index: number;
            } & {
                script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | undefined;
                address_n: number[];
            }) | ({
                sequence?: number | undefined;
                multisig?: {
                    address_n?: number[] | undefined;
                    nodes?: {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    }[] | undefined;
                    pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                    pubkeys: {
                        address_n: number[];
                        node: string | {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        };
                    }[];
                    signatures: string[];
                    m: number;
                } | undefined;
                decred_tree?: number | undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                script_pubkey?: string | undefined;
                coinjoin_flags?: number | undefined;
                script_sig?: string | undefined;
                witness?: string | undefined;
                ownership_proof?: string | undefined;
                commitment_data?: string | undefined;
                amount: string | number;
                prev_hash: string;
                prev_index: number;
            } & {
                address_n?: undefined;
                script_pubkey: string;
                script_type: "EXTERNAL";
            });
        };
    } | {
        type: "TxAckInput";
        message: {
            tx: {
                input: ({
                    sequence?: number | undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    decred_tree?: number | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                    script_pubkey?: string | undefined;
                    coinjoin_flags?: number | undefined;
                    script_sig?: string | undefined;
                    witness?: string | undefined;
                    ownership_proof?: string | undefined;
                    commitment_data?: string | undefined;
                    amount: string | number;
                    prev_hash: string;
                    prev_index: number;
                } & {
                    script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | undefined;
                    address_n: number[];
                }) | ({
                    sequence?: number | undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    decred_tree?: number | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    decred_staking_spend?: Messages.DecredStakingSpendType | undefined;
                    script_pubkey?: string | undefined;
                    coinjoin_flags?: number | undefined;
                    script_sig?: string | undefined;
                    witness?: string | undefined;
                    ownership_proof?: string | undefined;
                    commitment_data?: string | undefined;
                    amount: string | number;
                    prev_hash: string;
                    prev_index: number;
                } & {
                    address_n?: undefined;
                    script_pubkey: string;
                    script_type: "EXTERNAL";
                });
            };
        };
    } | {
        type: "TxAckOutputWrapper";
        message: {
            output: {
                address_n?: undefined;
                multisig?: {
                    address_n?: number[] | undefined;
                    nodes?: {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    }[] | undefined;
                    pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                    pubkeys: {
                        address_n: number[];
                        node: string | {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        };
                    }[];
                    signatures: string[];
                    m: number;
                } | undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                payment_req_index?: number | undefined;
                address: string;
                amount: string | number;
                script_type: "PAYTOADDRESS";
            } | {
                address?: undefined;
                multisig?: {
                    address_n?: number[] | undefined;
                    nodes?: {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    }[] | undefined;
                    pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                    pubkeys: {
                        address_n: number[];
                        node: string | {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        };
                    }[];
                    signatures: string[];
                    m: number;
                } | undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                payment_req_index?: number | undefined;
                address_n: number[];
                amount: string | number;
            } | {
                address_n?: undefined;
                multisig?: {
                    address_n?: number[] | undefined;
                    nodes?: {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    }[] | undefined;
                    pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                    pubkeys: {
                        address_n: number[];
                        node: string | {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        };
                    }[];
                    signatures: string[];
                    m: number;
                } | undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                payment_req_index?: number | undefined;
                address: string;
                amount: string | number;
            } | {
                address_n?: undefined;
                address?: undefined;
                orig_hash?: string | undefined;
                orig_index?: number | undefined;
                payment_req_index?: number | undefined;
                amount: 0 | "0";
                script_type: "PAYTOOPRETURN";
                op_return_data: string;
            };
        };
    } | {
        type: "TxAckOutput";
        message: {
            tx: {
                output: {
                    address_n?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    payment_req_index?: number | undefined;
                    address: string;
                    amount: string | number;
                    script_type: "PAYTOADDRESS";
                } | {
                    address?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                    payment_req_index?: number | undefined;
                    address_n: number[];
                    amount: string | number;
                } | {
                    address_n?: undefined;
                    multisig?: {
                        address_n?: number[] | undefined;
                        nodes?: {
                            private_key?: string | undefined;
                            public_key: string;
                            depth: number;
                            fingerprint: number;
                            child_num: number;
                            chain_code: string;
                        }[] | undefined;
                        pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                        pubkeys: {
                            address_n: number[];
                            node: string | {
                                private_key?: string | undefined;
                                public_key: string;
                                depth: number;
                                fingerprint: number;
                                child_num: number;
                                chain_code: string;
                            };
                        }[];
                        signatures: string[];
                        m: number;
                    } | undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    script_type?: "PAYTOADDRESS" | "PAYTOSCRIPTHASH" | "PAYTOMULTISIG" | "PAYTOWITNESS" | "PAYTOP2SHWITNESS" | "PAYTOTAPROOT" | undefined;
                    payment_req_index?: number | undefined;
                    address: string;
                    amount: string | number;
                } | {
                    address_n?: undefined;
                    address?: undefined;
                    orig_hash?: string | undefined;
                    orig_index?: number | undefined;
                    payment_req_index?: number | undefined;
                    amount: 0 | "0";
                    script_type: "PAYTOOPRETURN";
                    op_return_data: string;
                };
            };
        };
    } | {
        type: "TxAckPrevMeta";
        message: {
            tx: {
                timestamp?: number | undefined;
                expiry?: number | undefined;
                version_group_id?: number | undefined;
                branch_id?: number | undefined;
                extra_data_len?: number | undefined;
                version: number;
                outputs_count: number;
                inputs_count: number;
                lock_time: number;
            };
        };
    } | {
        type: "TxAckPrevInputWrapper";
        message: {
            input: {
                decred_tree?: number | undefined;
                sequence: number;
                prev_hash: string;
                prev_index: number;
                script_sig: string;
            };
        };
    } | {
        type: "TxAckPrevInput";
        message: {
            tx: {
                input: {
                    decred_tree?: number | undefined;
                    sequence: number;
                    prev_hash: string;
                    prev_index: number;
                    script_sig: string;
                };
            };
        };
    } | {
        type: "TxAckPrevOutputWrapper";
        message: {
            output: {
                decred_script_version?: number | undefined;
                amount: string | number;
                script_pubkey: string;
            };
        };
    } | {
        type: "TxAckPrevOutput";
        message: {
            tx: {
                output: {
                    decred_script_version?: number | undefined;
                    amount: string | number;
                    script_pubkey: string;
                };
            };
        };
    } | {
        type: "TxAckPrevExtraDataWrapper";
        message: {
            extra_data_chunk: string;
        };
    } | {
        type: "TxAckPrevExtraData";
        message: {
            tx: {
                extra_data_chunk: string;
            };
        };
    } | {
        type: "GetOwnershipProof";
        message: {
            multisig?: {
                address_n?: number[] | undefined;
                nodes?: {
                    private_key?: string | undefined;
                    public_key: string;
                    depth: number;
                    fingerprint: number;
                    child_num: number;
                    chain_code: string;
                }[] | undefined;
                pubkeys_order?: Messages.MultisigPubkeysOrder | undefined;
                pubkeys: {
                    address_n: number[];
                    node: string | {
                        private_key?: string | undefined;
                        public_key: string;
                        depth: number;
                        fingerprint: number;
                        child_num: number;
                        chain_code: string;
                    };
                }[];
                signatures: string[];
                m: number;
            } | undefined;
            commitment_data?: string | undefined;
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            coin_name?: string | undefined;
            user_confirmation?: boolean | undefined;
            ownership_ids?: string[] | undefined;
            address_n: number[];
        };
    } | {
        type: "OwnershipProof";
        message: {
            signature: string;
            ownership_proof: string;
        };
    } | {
        type: "AuthorizeCoinJoin";
        message: {
            script_type?: "SPENDADDRESS" | "SPENDMULTISIG" | "SPENDWITNESS" | "SPENDP2SHWITNESS" | "SPENDTAPROOT" | "EXTERNAL" | undefined;
            coin_name?: string | undefined;
            amount_unit?: Messages.AmountUnit | undefined;
            address_n: number[];
            coordinator: string;
            max_rounds: number;
            max_coordinator_fee_rate: number;
            max_fee_per_kvbyte: number;
        };
    } | {
        type: "FirmwareErase";
        message: {
            length?: number | undefined;
        };
    } | {
        type: "FirmwareRequest";
        message: {
            length: number;
            offset: number;
        };
    } | {
        type: "FirmwareUpload";
        message: {
            hash?: string | undefined;
            payload: ArrayBuffer | Buffer<ArrayBufferLike>;
        };
    } | {
        type: "ProdTestT1";
        message: {
            payload?: string | undefined;
        };
    } | {
        type: "CardanoBlockchainPointerType";
        message: {
            block_index: number;
            tx_index: number;
            certificate_index: number;
        };
    } | {
        type: "CardanoNativeScript";
        message: {
            scripts?: any[] | undefined;
            key_hash?: string | undefined;
            key_path?: number[] | undefined;
            required_signatures_count?: number | undefined;
            invalid_before?: string | number | undefined;
            invalid_hereafter?: string | number | undefined;
            type: Messages.CardanoNativeScriptType;
        };
    } | {
        type: "CardanoGetNativeScriptHash";
        message: {
            script: {
                scripts?: any[] | undefined;
                key_hash?: string | undefined;
                key_path?: number[] | undefined;
                required_signatures_count?: number | undefined;
                invalid_before?: string | number | undefined;
                invalid_hereafter?: string | number | undefined;
                type: Messages.CardanoNativeScriptType;
            };
            display_format: Messages.CardanoNativeScriptHashDisplayFormat;
            derivation_type: Messages.CardanoDerivationType;
        };
    } | {
        type: "CardanoNativeScriptHash";
        message: {
            script_hash: string;
        };
    } | {
        type: "CardanoAddressParametersType";
        message: {
            staking_key_hash?: string | undefined;
            certificate_pointer?: {
                block_index: number;
                tx_index: number;
                certificate_index: number;
            } | undefined;
            script_payment_hash?: string | undefined;
            script_staking_hash?: string | undefined;
            address_n: number[];
            address_type: Messages.CardanoAddressType;
            address_n_staking: number[];
        };
    } | {
        type: "CardanoGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            derivation_type: Messages.CardanoDerivationType;
            protocol_magic: number;
            network_id: number;
            address_parameters: {
                staking_key_hash?: string | undefined;
                certificate_pointer?: {
                    block_index: number;
                    tx_index: number;
                    certificate_index: number;
                } | undefined;
                script_payment_hash?: string | undefined;
                script_staking_hash?: string | undefined;
                address_n: number[];
                address_type: Messages.CardanoAddressType;
                address_n_staking: number[];
            };
        };
    } | {
        type: "CardanoAddress";
        message: {
            address: string;
        };
    } | {
        type: "CardanoGetPublicKey";
        message: {
            show_display?: boolean | undefined;
            address_n: number[];
            derivation_type: Messages.CardanoDerivationType;
        };
    } | {
        type: "CardanoPublicKey";
        message: {
            node: {
                private_key?: string | undefined;
                public_key: string;
                depth: number;
                fingerprint: number;
                child_num: number;
                chain_code: string;
            };
            xpub: string;
        };
    } | {
        type: "CardanoSignTxInit";
        message: {
            chunkify?: boolean | undefined;
            ttl?: string | number | undefined;
            validity_interval_start?: string | number | undefined;
            include_network_id?: boolean | undefined;
            script_data_hash?: string | undefined;
            has_collateral_return?: boolean | undefined;
            total_collateral?: string | number | undefined;
            reference_inputs_count?: number | undefined;
            tag_cbor_sets?: boolean | undefined;
            fee: string | number;
            outputs_count: number;
            inputs_count: number;
            derivation_type: Messages.CardanoDerivationType;
            protocol_magic: number;
            network_id: number;
            signing_mode: Messages.CardanoTxSigningMode;
            certificates_count: number;
            withdrawals_count: number;
            has_auxiliary_data: boolean;
            witness_requests_count: number;
            minting_asset_groups_count: number;
            collateral_inputs_count: number;
            required_signers_count: number;
        };
    } | {
        type: "CardanoTxInput";
        message: {
            prev_hash: string;
            prev_index: number;
        };
    } | {
        type: "CardanoTxOutput";
        message: {
            address?: string | undefined;
            format?: Messages.CardanoTxOutputSerializationFormat | undefined;
            address_parameters?: {
                staking_key_hash?: string | undefined;
                certificate_pointer?: {
                    block_index: number;
                    tx_index: number;
                    certificate_index: number;
                } | undefined;
                script_payment_hash?: string | undefined;
                script_staking_hash?: string | undefined;
                address_n: number[];
                address_type: Messages.CardanoAddressType;
                address_n_staking: number[];
            } | undefined;
            datum_hash?: string | undefined;
            inline_datum_size?: number | undefined;
            reference_script_size?: number | undefined;
            amount: string | number;
            asset_groups_count: number;
        };
    } | {
        type: "CardanoAssetGroup";
        message: {
            policy_id: string;
            tokens_count: number;
        };
    } | {
        type: "CardanoToken";
        message: {
            amount?: string | number | undefined;
            mint_amount?: string | number | undefined;
            asset_name_bytes: string;
        };
    } | {
        type: "CardanoTxInlineDatumChunk";
        message: {
            data: string;
        };
    } | {
        type: "CardanoTxReferenceScriptChunk";
        message: {
            data: string;
        };
    } | {
        type: "CardanoPoolOwner";
        message: {
            staking_key_hash?: string | undefined;
            staking_key_path?: number[] | undefined;
        };
    } | {
        type: "CardanoPoolRelayParameters";
        message: {
            port?: number | undefined;
            ipv4_address?: string | undefined;
            ipv6_address?: string | undefined;
            host_name?: string | undefined;
            type: Messages.CardanoPoolRelayType;
        };
    } | {
        type: "CardanoPoolMetadataType";
        message: {
            url: string;
            hash: string;
        };
    } | {
        type: "CardanoPoolParametersType";
        message: {
            metadata?: {
                url: string;
                hash: string;
            } | undefined;
            pledge: string | number;
            cost: string | number;
            pool_id: string;
            vrf_key_hash: string;
            margin_numerator: string | number;
            margin_denominator: string | number;
            reward_account: string;
            owners_count: number;
            relays_count: number;
        };
    } | {
        type: "CardanoDRep";
        message: {
            key_hash?: string | undefined;
            script_hash?: string | undefined;
            type: Messages.CardanoDRepType;
        };
    } | {
        type: "CardanoTxCertificate";
        message: {
            path?: number[] | undefined;
            pool?: string | undefined;
            deposit?: string | number | undefined;
            key_hash?: string | undefined;
            script_hash?: string | undefined;
            pool_parameters?: {
                metadata?: {
                    url: string;
                    hash: string;
                } | undefined;
                pledge: string | number;
                cost: string | number;
                pool_id: string;
                vrf_key_hash: string;
                margin_numerator: string | number;
                margin_denominator: string | number;
                reward_account: string;
                owners_count: number;
                relays_count: number;
            } | undefined;
            drep?: {
                key_hash?: string | undefined;
                script_hash?: string | undefined;
                type: Messages.CardanoDRepType;
            } | undefined;
            type: Messages.CardanoCertificateType;
        };
    } | {
        type: "CardanoTxWithdrawal";
        message: {
            path?: number[] | undefined;
            key_hash?: string | undefined;
            script_hash?: string | undefined;
            amount: string | number;
        };
    } | {
        type: "CardanoCVoteRegistrationDelegation";
        message: {
            weight: string | number;
            vote_public_key: string;
        };
    } | {
        type: "CardanoCVoteRegistrationParametersType";
        message: {
            format?: Messages.CardanoCVoteRegistrationFormat | undefined;
            delegations?: {
                weight: string | number;
                vote_public_key: string;
            }[] | undefined;
            vote_public_key?: string | undefined;
            payment_address_parameters?: {
                staking_key_hash?: string | undefined;
                certificate_pointer?: {
                    block_index: number;
                    tx_index: number;
                    certificate_index: number;
                } | undefined;
                script_payment_hash?: string | undefined;
                script_staking_hash?: string | undefined;
                address_n: number[];
                address_type: Messages.CardanoAddressType;
                address_n_staking: number[];
            } | undefined;
            voting_purpose?: string | number | undefined;
            payment_address?: string | undefined;
            nonce: string | number;
            staking_path: number[];
        };
    } | {
        type: "CardanoTxAuxiliaryData";
        message: {
            hash?: string | undefined;
            cvote_registration_parameters?: {
                format?: Messages.CardanoCVoteRegistrationFormat | undefined;
                delegations?: {
                    weight: string | number;
                    vote_public_key: string;
                }[] | undefined;
                vote_public_key?: string | undefined;
                payment_address_parameters?: {
                    staking_key_hash?: string | undefined;
                    certificate_pointer?: {
                        block_index: number;
                        tx_index: number;
                        certificate_index: number;
                    } | undefined;
                    script_payment_hash?: string | undefined;
                    script_staking_hash?: string | undefined;
                    address_n: number[];
                    address_type: Messages.CardanoAddressType;
                    address_n_staking: number[];
                } | undefined;
                voting_purpose?: string | number | undefined;
                payment_address?: string | undefined;
                nonce: string | number;
                staking_path: number[];
            } | undefined;
        };
    } | {
        type: "CardanoTxMint";
        message: {
            asset_groups_count: number;
        };
    } | {
        type: "CardanoTxCollateralInput";
        message: {
            prev_hash: string;
            prev_index: number;
        };
    } | {
        type: "CardanoTxRequiredSigner";
        message: {
            key_hash?: string | undefined;
            key_path?: number[] | undefined;
        };
    } | {
        type: "CardanoTxReferenceInput";
        message: {
            prev_hash: string;
            prev_index: number;
        };
    } | {
        type: "CardanoTxItemAck";
        message: {};
    } | {
        type: "CardanoTxAuxiliaryDataSupplement";
        message: {
            auxiliary_data_hash?: string | undefined;
            cvote_registration_signature?: string | undefined;
            type: Messages.CardanoTxAuxiliaryDataSupplementType;
        };
    } | {
        type: "CardanoTxWitnessRequest";
        message: {
            path: number[];
        };
    } | {
        type: "CardanoTxWitnessResponse";
        message: {
            chain_code?: string | undefined;
            type: Messages.CardanoTxWitnessType;
            signature: string;
            pub_key: string;
        };
    } | {
        type: "CardanoTxHostAck";
        message: {};
    } | {
        type: "CardanoTxBodyHash";
        message: {
            tx_hash: string;
        };
    } | {
        type: "CardanoSignTxFinished";
        message: {};
    } | {
        type: "Success";
        message: {
            message: string;
        };
    } | {
        type: "Failure";
        message: {
            code?: Messages.FailureType | undefined;
            message?: string | undefined;
        };
    } | {
        type: "ButtonRequest";
        message: {
            code?: "ButtonRequest_Other" | "ButtonRequest_FeeOverThreshold" | "ButtonRequest_ConfirmOutput" | "ButtonRequest_ResetDevice" | "ButtonRequest_ConfirmWord" | "ButtonRequest_WipeDevice" | "ButtonRequest_ProtectCall" | "ButtonRequest_SignTx" | "ButtonRequest_FirmwareCheck" | "ButtonRequest_Address" | "ButtonRequest_PublicKey" | "ButtonRequest_MnemonicWordCount" | "ButtonRequest_MnemonicInput" | "_Deprecated_ButtonRequest_PassphraseType" | "ButtonRequest_UnknownDerivationPath" | "ButtonRequest_RecoveryHomepage" | "ButtonRequest_Success" | "ButtonRequest_Warning" | "ButtonRequest_PassphraseEntry" | "ButtonRequest_PinEntry" | undefined;
            name?: string | undefined;
            pages?: number | undefined;
        };
    } | {
        type: "ButtonAck";
        message: {};
    } | {
        type: "PinMatrixRequest";
        message: {
            type?: "PinMatrixRequestType_Current" | "PinMatrixRequestType_NewFirst" | "PinMatrixRequestType_NewSecond" | "PinMatrixRequestType_WipeCodeFirst" | "PinMatrixRequestType_WipeCodeSecond" | undefined;
        };
    } | {
        type: "PinMatrixAck";
        message: {
            pin: string;
        };
    } | {
        type: "PassphraseRequest";
        message: {
            _on_device?: boolean | undefined;
        };
    } | {
        type: "Deprecated_PassphraseStateRequest";
        message: {
            state?: string | undefined;
        };
    } | {
        type: "Deprecated_PassphraseStateAck";
        message: {};
    } | {
        type: "CipherKeyValue";
        message: {
            encrypt?: boolean | undefined;
            iv?: string | undefined;
            ask_on_encrypt?: boolean | undefined;
            ask_on_decrypt?: boolean | undefined;
            address_n: number[];
            key: string;
            value: string;
        };
    } | {
        type: "IdentityType";
        message: {
            path?: string | undefined;
            port?: string | undefined;
            proto?: string | undefined;
            user?: string | undefined;
            host?: string | undefined;
            index?: number | undefined;
        };
    } | {
        type: "SignIdentity";
        message: {
            ecdsa_curve_name?: string | undefined;
            challenge_hidden?: string | undefined;
            challenge_visual?: string | undefined;
            identity: {
                path?: string | undefined;
                port?: string | undefined;
                proto?: string | undefined;
                user?: string | undefined;
                host?: string | undefined;
                index?: number | undefined;
            };
        };
    } | {
        type: "SignedIdentity";
        message: {
            address: string;
            signature: string;
            public_key: string;
        };
    } | {
        type: "GetECDHSessionKey";
        message: {
            ecdsa_curve_name?: string | undefined;
            identity: {
                path?: string | undefined;
                port?: string | undefined;
                proto?: string | undefined;
                user?: string | undefined;
                host?: string | undefined;
                index?: number | undefined;
            };
            peer_public_key: string;
        };
    } | {
        type: "ECDHSessionKey";
        message: {
            public_key?: string | undefined;
            session_key: string;
        };
    } | {
        type: "DebugLinkResetDebugEvents";
        message: {};
    } | {
        type: "DebugLinkOptigaSetSecMax";
        message: {};
    } | {
        type: "EosGetPublicKey";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "EosPublicKey";
        message: {
            wif_public_key: string;
            raw_public_key: string;
        };
    } | {
        type: "EosTxHeader";
        message: {
            expiration: number;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
        };
    } | {
        type: "EosSignTx";
        message: {
            chunkify?: boolean | undefined;
            address_n: number[];
            chain_id: string;
            header: {
                expiration: number;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
            };
            num_actions: number;
        };
    } | {
        type: "EosTxActionRequest";
        message: {
            data_size?: number | undefined;
        };
    } | {
        type: "EosAsset";
        message: {
            symbol: string;
            amount: string | number;
        };
    } | {
        type: "EosPermissionLevel";
        message: {
            permission: string;
            actor: string;
        };
    } | {
        type: "EosAuthorizationKey";
        message: {
            type?: number | undefined;
            address_n?: number[] | undefined;
            weight: number;
            key: string;
        };
    } | {
        type: "EosAuthorizationAccount";
        message: {
            weight: number;
            account: {
                permission: string;
                actor: string;
            };
        };
    } | {
        type: "EosAuthorizationWait";
        message: {
            weight: number;
            wait_sec: number;
        };
    } | {
        type: "EosAuthorization";
        message: {
            keys: {
                type?: number | undefined;
                address_n?: number[] | undefined;
                weight: number;
                key: string;
            }[];
            threshold: number;
            accounts: {
                weight: number;
                account: {
                    permission: string;
                    actor: string;
                };
            }[];
            waits: {
                weight: number;
                wait_sec: number;
            }[];
        };
    } | {
        type: "EosActionCommon";
        message: {
            name: string;
            account: string;
            authorization: {
                permission: string;
                actor: string;
            }[];
        };
    } | {
        type: "EosActionTransfer";
        message: {
            memo: string;
            quantity: {
                symbol: string;
                amount: string | number;
            };
            sender: string;
            receiver: string;
        };
    } | {
        type: "EosActionDelegate";
        message: {
            transfer: boolean;
            sender: string;
            receiver: string;
            net_quantity: {
                symbol: string;
                amount: string | number;
            };
            cpu_quantity: {
                symbol: string;
                amount: string | number;
            };
        };
    } | {
        type: "EosActionUndelegate";
        message: {
            sender: string;
            receiver: string;
            net_quantity: {
                symbol: string;
                amount: string | number;
            };
            cpu_quantity: {
                symbol: string;
                amount: string | number;
            };
        };
    } | {
        type: "EosActionRefund";
        message: {
            owner: string;
        };
    } | {
        type: "EosActionBuyRam";
        message: {
            quantity: {
                symbol: string;
                amount: string | number;
            };
            receiver: string;
            payer: string;
        };
    } | {
        type: "EosActionBuyRamBytes";
        message: {
            bytes: number;
            receiver: string;
            payer: string;
        };
    } | {
        type: "EosActionSellRam";
        message: {
            bytes: number;
            account: string;
        };
    } | {
        type: "EosActionVoteProducer";
        message: {
            voter: string;
            proxy: string;
            producers: string[];
        };
    } | {
        type: "EosActionUpdateAuth";
        message: {
            account: string;
            permission: string;
            parent: string;
            auth: {
                keys: {
                    type?: number | undefined;
                    address_n?: number[] | undefined;
                    weight: number;
                    key: string;
                }[];
                threshold: number;
                accounts: {
                    weight: number;
                    account: {
                        permission: string;
                        actor: string;
                    };
                }[];
                waits: {
                    weight: number;
                    wait_sec: number;
                }[];
            };
        };
    } | {
        type: "EosActionDeleteAuth";
        message: {
            account: string;
            permission: string;
        };
    } | {
        type: "EosActionLinkAuth";
        message: {
            code: string;
            type: string;
            account: string;
            requirement: string;
        };
    } | {
        type: "EosActionUnlinkAuth";
        message: {
            code: string;
            type: string;
            account: string;
        };
    } | {
        type: "EosActionNewAccount";
        message: {
            name: string;
            owner: {
                keys: {
                    type?: number | undefined;
                    address_n?: number[] | undefined;
                    weight: number;
                    key: string;
                }[];
                threshold: number;
                accounts: {
                    weight: number;
                    account: {
                        permission: string;
                        actor: string;
                    };
                }[];
                waits: {
                    weight: number;
                    wait_sec: number;
                }[];
            };
            creator: string;
            active: {
                keys: {
                    type?: number | undefined;
                    address_n?: number[] | undefined;
                    weight: number;
                    key: string;
                }[];
                threshold: number;
                accounts: {
                    weight: number;
                    account: {
                        permission: string;
                        actor: string;
                    };
                }[];
                waits: {
                    weight: number;
                    wait_sec: number;
                }[];
            };
        };
    } | {
        type: "EosActionUnknown";
        message: {
            data_size: number;
            data_chunk: string;
        };
    } | {
        type: "EosTxActionAck";
        message: {
            unknown?: {
                data_size: number;
                data_chunk: string;
            } | undefined;
            transfer?: {
                memo: string;
                quantity: {
                    symbol: string;
                    amount: string | number;
                };
                sender: string;
                receiver: string;
            } | undefined;
            refund?: {
                owner: string;
            } | undefined;
            delegate?: {
                transfer: boolean;
                sender: string;
                receiver: string;
                net_quantity: {
                    symbol: string;
                    amount: string | number;
                };
                cpu_quantity: {
                    symbol: string;
                    amount: string | number;
                };
            } | undefined;
            undelegate?: {
                sender: string;
                receiver: string;
                net_quantity: {
                    symbol: string;
                    amount: string | number;
                };
                cpu_quantity: {
                    symbol: string;
                    amount: string | number;
                };
            } | undefined;
            buy_ram?: {
                quantity: {
                    symbol: string;
                    amount: string | number;
                };
                receiver: string;
                payer: string;
            } | undefined;
            buy_ram_bytes?: {
                bytes: number;
                receiver: string;
                payer: string;
            } | undefined;
            sell_ram?: {
                bytes: number;
                account: string;
            } | undefined;
            vote_producer?: {
                voter: string;
                proxy: string;
                producers: string[];
            } | undefined;
            update_auth?: {
                account: string;
                permission: string;
                parent: string;
                auth: {
                    keys: {
                        type?: number | undefined;
                        address_n?: number[] | undefined;
                        weight: number;
                        key: string;
                    }[];
                    threshold: number;
                    accounts: {
                        weight: number;
                        account: {
                            permission: string;
                            actor: string;
                        };
                    }[];
                    waits: {
                        weight: number;
                        wait_sec: number;
                    }[];
                };
            } | undefined;
            delete_auth?: {
                account: string;
                permission: string;
            } | undefined;
            link_auth?: {
                code: string;
                type: string;
                account: string;
                requirement: string;
            } | undefined;
            unlink_auth?: {
                code: string;
                type: string;
                account: string;
            } | undefined;
            new_account?: {
                name: string;
                owner: {
                    keys: {
                        type?: number | undefined;
                        address_n?: number[] | undefined;
                        weight: number;
                        key: string;
                    }[];
                    threshold: number;
                    accounts: {
                        weight: number;
                        account: {
                            permission: string;
                            actor: string;
                        };
                    }[];
                    waits: {
                        weight: number;
                        wait_sec: number;
                    }[];
                };
                creator: string;
                active: {
                    keys: {
                        type?: number | undefined;
                        address_n?: number[] | undefined;
                        weight: number;
                        key: string;
                    }[];
                    threshold: number;
                    accounts: {
                        weight: number;
                        account: {
                            permission: string;
                            actor: string;
                        };
                    }[];
                    waits: {
                        weight: number;
                        wait_sec: number;
                    }[];
                };
            } | undefined;
            common: {
                name: string;
                account: string;
                authorization: {
                    permission: string;
                    actor: string;
                }[];
            };
        };
    } | {
        type: "EosSignedTx";
        message: {
            signature: string;
        };
    } | {
        type: "EthereumNetworkInfo";
        message: {
            symbol: string;
            chain_id: number;
            name: string;
            slip44: number;
        };
    } | {
        type: "EthereumTokenInfo";
        message: {
            symbol: string;
            address: string;
            chain_id: number;
            name: string;
            decimals: number;
        };
    } | {
        type: "EthereumDefinitions";
        message: {
            encoded_network?: ArrayBuffer | undefined;
            encoded_token?: ArrayBuffer | undefined;
        };
    } | {
        type: "EthereumSignTypedData";
        message: {
            metamask_v4_compat?: boolean | undefined;
            definitions?: {
                encoded_network?: ArrayBuffer | undefined;
                encoded_token?: ArrayBuffer | undefined;
            } | undefined;
            address_n: number[];
            primary_type: string;
        };
    } | {
        type: "EthereumTypedDataStructRequest";
        message: {
            name: string;
        };
    } | {
        type: "EthereumFieldType";
        message: {
            size?: number | undefined;
            entry_type?: any | undefined;
            struct_name?: string | undefined;
            data_type: Messages.EthereumDataType;
        };
    } | {
        type: "EthereumStructMember";
        message: {
            type: {
                size?: number | undefined;
                entry_type?: any | undefined;
                struct_name?: string | undefined;
                data_type: Messages.EthereumDataType;
            };
            name: string;
        };
    } | {
        type: "EthereumTypedDataStructAck";
        message: {
            members: {
                type: {
                    size?: number | undefined;
                    entry_type?: any | undefined;
                    struct_name?: string | undefined;
                    data_type: Messages.EthereumDataType;
                };
                name: string;
            }[];
        };
    } | {
        type: "EthereumTypedDataValueRequest";
        message: {
            member_path: number[];
        };
    } | {
        type: "EthereumTypedDataValueAck";
        message: {
            value: string;
        };
    } | {
        type: "EthereumGetPublicKey";
        message: {
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "EthereumPublicKey";
        message: {
            node: {
                private_key?: string | undefined;
                public_key: string;
                depth: number;
                fingerprint: number;
                child_num: number;
                chain_code: string;
            };
            xpub: string;
        };
    } | {
        type: "EthereumGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            encoded_network?: ArrayBuffer | undefined;
            address_n: number[];
        };
    } | {
        type: "EthereumAddress";
        message: {
            _old_address?: string | undefined;
            address: string;
        };
    } | {
        type: "EthereumSignTx";
        message: {
            chunkify?: boolean | undefined;
            nonce?: string | undefined;
            value?: string | undefined;
            to?: string | undefined;
            definitions?: {
                encoded_network?: ArrayBuffer | undefined;
                encoded_token?: ArrayBuffer | undefined;
            } | undefined;
            data_initial_chunk?: string | undefined;
            data_length?: number | undefined;
            tx_type?: number | undefined;
            address_n: number[];
            chain_id: number;
            gas_limit: string;
            gas_price: string;
        };
    } | {
        type: "EthereumAccessList";
        message: {
            address: string;
            storage_keys: string[];
        };
    } | {
        type: "EthereumSignTxEIP1559";
        message: {
            chunkify?: boolean | undefined;
            to?: string | undefined;
            definitions?: {
                encoded_network?: ArrayBuffer | undefined;
                encoded_token?: ArrayBuffer | undefined;
            } | undefined;
            data_initial_chunk?: string | undefined;
            address_n: number[];
            chain_id: number;
            nonce: string;
            value: string;
            gas_limit: string;
            data_length: number;
            max_gas_fee: string;
            max_priority_fee: string;
            access_list: {
                address: string;
                storage_keys: string[];
            }[];
        };
    } | {
        type: "EthereumTxRequest";
        message: {
            data_length?: number | undefined;
            signature_v?: number | undefined;
            signature_r?: string | undefined;
            signature_s?: string | undefined;
        };
    } | {
        type: "EthereumTxAck";
        message: {
            data_chunk: string;
        };
    } | {
        type: "EthereumSignMessage";
        message: {
            chunkify?: boolean | undefined;
            encoded_network?: ArrayBuffer | undefined;
            address_n: number[];
            message: string;
        };
    } | {
        type: "EthereumMessageSignature";
        message: {
            address: string;
            signature: string;
        };
    } | {
        type: "EthereumVerifyMessage";
        message: {
            chunkify?: boolean | undefined;
            address: string;
            message: string;
            signature: string;
        };
    } | {
        type: "EthereumSignTypedHash";
        message: {
            message_hash?: string | undefined;
            encoded_network?: ArrayBuffer | undefined;
            address_n: number[];
            domain_separator_hash: string;
        };
    } | {
        type: "EthereumTypedDataSignature";
        message: {
            address: string;
            signature: string;
        };
    } | {
        type: "Initialize";
        message: {
            session_id?: string | undefined;
            _skip_passphrase?: boolean | undefined;
            derive_cardano?: boolean | undefined;
        };
    } | {
        type: "GetFeatures";
        message: {};
    } | {
        type: "RecoveryDevice";
        message: {
            pin_protection?: boolean | undefined;
            passphrase_protection?: boolean | undefined;
            language?: string | undefined;
            label?: string | undefined;
            type?: "NormalRecovery" | "DryRun" | "UnlockRepeatedBackup" | undefined;
            u2f_counter?: number | undefined;
            word_count?: number | undefined;
            enforce_wordlist?: boolean | undefined;
            input_method?: Messages.RecoveryDeviceInputMethod | undefined;
        };
    } | {
        type: "LockDevice";
        message: {};
    } | {
        type: "SetBusy";
        message: {
            expiry_ms?: number | undefined;
        };
    } | {
        type: "EndSession";
        message: {};
    } | {
        type: "ApplySettings";
        message: {
            language?: string | undefined;
            label?: string | undefined;
            passphrase_always_on_device?: boolean | undefined;
            safety_checks?: "Strict" | "PromptAlways" | "PromptTemporarily" | undefined;
            auto_lock_delay_ms?: number | undefined;
            display_rotation?: Messages.Enum_DisplayRotation | "North" | "East" | "South" | "West" | undefined;
            experimental_features?: boolean | undefined;
            hide_passphrase_from_host?: boolean | undefined;
            haptic_feedback?: boolean | undefined;
            use_passphrase?: boolean | undefined;
            homescreen?: string | undefined;
            _passphrase_source?: number | undefined;
        };
    } | {
        type: "ChangeLanguage";
        message: {
            show_display?: boolean | undefined;
            data_length: number;
        };
    } | {
        type: "TranslationDataRequest";
        message: {
            data_length: number;
            data_offset: number;
        };
    } | {
        type: "TranslationDataAck";
        message: {
            data_chunk: string;
        };
    } | {
        type: "ApplyFlags";
        message: {
            flags: number;
        };
    } | {
        type: "ChangePin";
        message: {
            remove?: boolean | undefined;
        };
    } | {
        type: "ChangeWipeCode";
        message: {
            remove?: boolean | undefined;
        };
    } | {
        type: "SdProtect";
        message: {
            operation: Messages.SdProtectOperationType;
        };
    } | {
        type: "Ping";
        message: {
            message?: string | undefined;
            button_protection?: boolean | undefined;
        };
    } | {
        type: "Cancel";
        message: {};
    } | {
        type: "GetEntropy";
        message: {
            size: number;
        };
    } | {
        type: "Entropy";
        message: {
            entropy: string;
        };
    } | {
        type: "GetFirmwareHash";
        message: {
            challenge?: string | undefined;
        };
    } | {
        type: "FirmwareHash";
        message: {
            hash: string;
        };
    } | {
        type: "AuthenticateDevice";
        message: {
            challenge: string;
        };
    } | {
        type: "AuthenticityProof";
        message: {
            signature: string;
            certificates: string[];
        };
    } | {
        type: "WipeDevice";
        message: {};
    } | {
        type: "LoadDevice";
        message: {
            passphrase_protection?: boolean | undefined;
            language?: string | undefined;
            label?: string | undefined;
            no_backup?: boolean | undefined;
            pin?: string | undefined;
            skip_checksum?: boolean | undefined;
            u2f_counter?: number | undefined;
            needs_backup?: boolean | undefined;
            mnemonics: string[];
        };
    } | {
        type: "ResetDevice";
        message: {
            pin_protection?: boolean | undefined;
            passphrase_protection?: boolean | undefined;
            language?: string | undefined;
            label?: string | undefined;
            no_backup?: boolean | undefined;
            backup_type?: Messages.Enum_BackupType | undefined;
            u2f_counter?: number | undefined;
            strength?: number | undefined;
            skip_backup?: boolean | undefined;
            entropy_check?: boolean | undefined;
        };
    } | {
        type: "Slip39Group";
        message: {
            member_threshold: number;
            member_count: number;
        };
    } | {
        type: "BackupDevice";
        message: {
            group_threshold?: number | undefined;
            groups?: {
                member_threshold: number;
                member_count: number;
            }[] | undefined;
        };
    } | {
        type: "EntropyRequest";
        message: {
            entropy_commitment?: string | undefined;
            prev_entropy?: string | undefined;
        };
    } | {
        type: "EntropyAck";
        message: {
            entropy: string;
        };
    } | {
        type: "EntropyCheckReady";
        message: {};
    } | {
        type: "EntropyCheckContinue";
        message: {
            finish?: boolean | undefined;
        };
    } | {
        type: "WordRequest";
        message: {
            type: "WordRequestType_Plain" | "WordRequestType_Matrix9" | "WordRequestType_Matrix6";
        };
    } | {
        type: "WordAck";
        message: {
            word: string;
        };
    } | {
        type: "SetU2FCounter";
        message: {
            u2f_counter: number;
        };
    } | {
        type: "GetNextU2FCounter";
        message: {};
    } | {
        type: "NextU2FCounter";
        message: {
            u2f_counter: number;
        };
    } | {
        type: "DoPreauthorized";
        message: {};
    } | {
        type: "PreauthorizedRequest";
        message: {};
    } | {
        type: "CancelAuthorization";
        message: {};
    } | {
        type: "RebootToBootloader";
        message: {
            boot_command?: Messages.BootCommand | undefined;
            firmware_header?: string | undefined;
            language_data_length?: number | undefined;
        };
    } | {
        type: "GetNonce";
        message: {};
    } | {
        type: "Nonce";
        message: {
            nonce: string;
        };
    } | {
        type: "UnlockPath";
        message: {
            mac?: string | undefined;
            address_n: number[];
        };
    } | {
        type: "UnlockedPathRequest";
        message: {
            mac: string;
        };
    } | {
        type: "ShowDeviceTutorial";
        message: {};
    } | {
        type: "UnlockBootloader";
        message: {};
    } | {
        type: "SetBrightness";
        message: {
            value?: number | undefined;
        };
    } | {
        type: "NEMGetAddress";
        message: {
            chunkify?: boolean | undefined;
            network?: number | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "NEMAddress";
        message: {
            address: string;
        };
    } | {
        type: "NEMTransactionCommon";
        message: {
            address_n?: number[] | undefined;
            network?: number | undefined;
            signer?: string | undefined;
            timestamp: number;
            fee: string | number;
            deadline: number;
        };
    } | {
        type: "NEMMosaic";
        message: {
            quantity: number;
            namespace: string;
            mosaic: string;
        };
    } | {
        type: "NEMTransfer";
        message: {
            public_key?: string | undefined;
            payload?: string | undefined;
            mosaics?: {
                quantity: number;
                namespace: string;
                mosaic: string;
            }[] | undefined;
            amount: string | number;
            recipient: string;
        };
    } | {
        type: "NEMProvisionNamespace";
        message: {
            parent?: string | undefined;
            fee: string | number;
            namespace: string;
            sink: string;
        };
    } | {
        type: "NEMMosaicDefinition";
        message: {
            name?: string | undefined;
            fee?: string | number | undefined;
            levy?: Messages.NEMMosaicLevy | undefined;
            divisibility?: number | undefined;
            transferable?: boolean | undefined;
            ticker?: string | undefined;
            levy_address?: string | undefined;
            levy_namespace?: string | undefined;
            levy_mosaic?: string | undefined;
            supply?: number | undefined;
            mutable_supply?: boolean | undefined;
            networks?: number[] | undefined;
            description: string;
            namespace: string;
            mosaic: string;
        };
    } | {
        type: "NEMMosaicCreation";
        message: {
            fee: string | number;
            sink: string;
            definition: {
                name?: string | undefined;
                fee?: string | number | undefined;
                levy?: Messages.NEMMosaicLevy | undefined;
                divisibility?: number | undefined;
                transferable?: boolean | undefined;
                ticker?: string | undefined;
                levy_address?: string | undefined;
                levy_namespace?: string | undefined;
                levy_mosaic?: string | undefined;
                supply?: number | undefined;
                mutable_supply?: boolean | undefined;
                networks?: number[] | undefined;
                description: string;
                namespace: string;
                mosaic: string;
            };
        };
    } | {
        type: "NEMMosaicSupplyChange";
        message: {
            type: Messages.NEMSupplyChangeType;
            delta: number;
            namespace: string;
            mosaic: string;
        };
    } | {
        type: "NEMCosignatoryModification";
        message: {
            type: Messages.NEMModificationType;
            public_key: string;
        };
    } | {
        type: "NEMAggregateModification";
        message: {
            modifications?: {
                type: Messages.NEMModificationType;
                public_key: string;
            }[] | undefined;
            relative_change?: number | undefined;
        };
    } | {
        type: "NEMImportanceTransfer";
        message: {
            public_key: string;
            mode: Messages.NEMImportanceTransferMode;
        };
    } | {
        type: "NEMSignTx";
        message: {
            chunkify?: boolean | undefined;
            transfer?: {
                public_key?: string | undefined;
                payload?: string | undefined;
                mosaics?: {
                    quantity: number;
                    namespace: string;
                    mosaic: string;
                }[] | undefined;
                amount: string | number;
                recipient: string;
            } | undefined;
            multisig?: {
                address_n?: number[] | undefined;
                network?: number | undefined;
                signer?: string | undefined;
                timestamp: number;
                fee: string | number;
                deadline: number;
            } | undefined;
            cosigning?: boolean | undefined;
            provision_namespace?: {
                parent?: string | undefined;
                fee: string | number;
                namespace: string;
                sink: string;
            } | undefined;
            mosaic_creation?: {
                fee: string | number;
                sink: string;
                definition: {
                    name?: string | undefined;
                    fee?: string | number | undefined;
                    levy?: Messages.NEMMosaicLevy | undefined;
                    divisibility?: number | undefined;
                    transferable?: boolean | undefined;
                    ticker?: string | undefined;
                    levy_address?: string | undefined;
                    levy_namespace?: string | undefined;
                    levy_mosaic?: string | undefined;
                    supply?: number | undefined;
                    mutable_supply?: boolean | undefined;
                    networks?: number[] | undefined;
                    description: string;
                    namespace: string;
                    mosaic: string;
                };
            } | undefined;
            supply_change?: {
                type: Messages.NEMSupplyChangeType;
                delta: number;
                namespace: string;
                mosaic: string;
            } | undefined;
            aggregate_modification?: {
                modifications?: {
                    type: Messages.NEMModificationType;
                    public_key: string;
                }[] | undefined;
                relative_change?: number | undefined;
            } | undefined;
            importance_transfer?: {
                public_key: string;
                mode: Messages.NEMImportanceTransferMode;
            } | undefined;
            transaction: {
                address_n?: number[] | undefined;
                network?: number | undefined;
                signer?: string | undefined;
                timestamp: number;
                fee: string | number;
                deadline: number;
            };
        };
    } | {
        type: "NEMSignedTx";
        message: {
            signature: string;
            data: string;
        };
    } | {
        type: "NEMDecryptMessage";
        message: {
            public_key?: string | undefined;
            payload?: string | undefined;
            network?: number | undefined;
            address_n: number[];
        };
    } | {
        type: "NEMDecryptedMessage";
        message: {
            payload: string;
        };
    } | {
        type: "RippleGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "RippleAddress";
        message: {
            address: string;
        };
    } | {
        type: "RipplePayment";
        message: {
            destination_tag?: number | undefined;
            amount: string | number;
            destination: string;
        };
    } | {
        type: "RippleSignTx";
        message: {
            flags?: number | undefined;
            chunkify?: boolean | undefined;
            last_ledger_sequence?: number | undefined;
            address_n: number[];
            sequence: number;
            fee: string | number;
            payment: {
                destination_tag?: number | undefined;
                amount: string | number;
                destination: string;
            };
        };
    } | {
        type: "RippleSignedTx";
        message: {
            signature: string;
            serialized_tx: string;
        };
    } | {
        type: "SolanaGetPublicKey";
        message: {
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "SolanaPublicKey";
        message: {
            public_key: string;
        };
    } | {
        type: "SolanaGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "SolanaAddress";
        message: {
            address: string;
        };
    } | {
        type: "SolanaTxTokenAccountInfo";
        message: {
            base_address: string;
            token_program: string;
            token_mint: string;
            token_account: string;
        };
    } | {
        type: "SolanaTxAdditionalInfo";
        message: {
            token_accounts_infos: {
                base_address: string;
                token_program: string;
                token_mint: string;
                token_account: string;
            }[];
        };
    } | {
        type: "SolanaSignTx";
        message: {
            additional_info?: {
                token_accounts_infos: {
                    base_address: string;
                    token_program: string;
                    token_mint: string;
                    token_account: string;
                }[];
            } | undefined;
            address_n: number[];
            serialized_tx: string;
        };
    } | {
        type: "SolanaTxSignature";
        message: {
            signature: string;
        };
    } | {
        type: "StellarAsset";
        message: {
            code?: string | undefined;
            issuer?: string | undefined;
            type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
        };
    } | {
        type: "StellarGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "StellarAddress";
        message: {
            address: string;
        };
    } | {
        type: "StellarSignTx";
        message: {
            memo_text?: string | undefined;
            memo_id?: string | number | undefined;
            memo_hash?: string | Buffer<ArrayBufferLike> | undefined;
            address_n: number[];
            fee: string | number;
            network_passphrase: string;
            source_account: string;
            sequence_number: string | number;
            timebounds_start: number;
            timebounds_end: number;
            memo_type: Messages.StellarMemoType;
            num_operations: number;
        };
    } | {
        type: "StellarTxOpRequest";
        message: {};
    } | {
        type: "StellarPaymentOp";
        message: {
            source_account?: string | undefined;
            amount: string | number;
            asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            destination_account: string;
        };
    } | {
        type: "StellarCreateAccountOp";
        message: {
            source_account?: string | undefined;
            new_account: string;
            starting_balance: string | number;
        };
    } | {
        type: "StellarPathPaymentStrictReceiveOp";
        message: {
            source_account?: string | undefined;
            paths?: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            }[] | undefined;
            destination_account: string;
            send_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            send_max: string | number;
            destination_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            destination_amount: string | number;
        };
    } | {
        type: "StellarPathPaymentStrictSendOp";
        message: {
            source_account?: string | undefined;
            paths?: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            }[] | undefined;
            destination_account: string;
            send_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            destination_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            send_amount: string | number;
            destination_min: string | number;
        };
    } | {
        type: "StellarManageSellOfferOp";
        message: {
            source_account?: string | undefined;
            amount: string | number;
            selling_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            buying_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            price_n: number;
            price_d: number;
            offer_id: string | number;
        };
    } | {
        type: "StellarManageBuyOfferOp";
        message: {
            source_account?: string | undefined;
            amount: string | number;
            selling_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            buying_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            price_n: number;
            price_d: number;
            offer_id: string | number;
        };
    } | {
        type: "StellarCreatePassiveSellOfferOp";
        message: {
            source_account?: string | undefined;
            amount: string | number;
            selling_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            buying_asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            price_n: number;
            price_d: number;
        };
    } | {
        type: "StellarSetOptionsOp";
        message: {
            source_account?: string | undefined;
            inflation_destination_account?: string | undefined;
            clear_flags?: number | undefined;
            set_flags?: number | undefined;
            master_weight?: string | number | undefined;
            low_threshold?: string | number | undefined;
            medium_threshold?: string | number | undefined;
            high_threshold?: string | number | undefined;
            home_domain?: string | undefined;
            signer_type?: Messages.StellarSignerType | undefined;
            signer_key?: string | Buffer<ArrayBufferLike> | undefined;
            signer_weight?: number | undefined;
        };
    } | {
        type: "StellarChangeTrustOp";
        message: {
            source_account?: string | undefined;
            asset: {
                code?: string | undefined;
                issuer?: string | undefined;
                type: 0 | 1 | 2 | "NATIVE" | "ALPHANUM4" | "ALPHANUM12";
            };
            limit: string | number;
        };
    } | {
        type: "StellarAllowTrustOp";
        message: {
            source_account?: string | undefined;
            asset_code?: string | undefined;
            trusted_account: string;
            asset_type: Messages.StellarAssetType;
            is_authorized: boolean;
        };
    } | {
        type: "StellarAccountMergeOp";
        message: {
            source_account?: string | undefined;
            destination_account: string;
        };
    } | {
        type: "StellarManageDataOp";
        message: {
            value?: string | Buffer<ArrayBufferLike> | undefined;
            source_account?: string | undefined;
            key: string;
        };
    } | {
        type: "StellarBumpSequenceOp";
        message: {
            source_account?: string | undefined;
            bump_to: string | number;
        };
    } | {
        type: "StellarClaimClaimableBalanceOp";
        message: {
            source_account?: string | undefined;
            balance_id: string;
        };
    } | {
        type: "StellarSignedTx";
        message: {
            signature: string;
            public_key: string;
        };
    } | {
        type: "TezosGetAddress";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "TezosAddress";
        message: {
            address: string;
        };
    } | {
        type: "TezosGetPublicKey";
        message: {
            chunkify?: boolean | undefined;
            show_display?: boolean | undefined;
            address_n: number[];
        };
    } | {
        type: "TezosPublicKey";
        message: {
            public_key: string;
        };
    } | {
        type: "TezosContractID";
        message: {
            hash: Uint8Array<ArrayBufferLike>;
            tag: number;
        };
    } | {
        type: "TezosRevealOp";
        message: {
            source: Uint8Array<ArrayBufferLike>;
            public_key: Uint8Array<ArrayBufferLike>;
            fee: string | number;
            counter: number;
            gas_limit: number;
            storage_limit: number;
        };
    } | {
        type: "TezosManagerTransfer";
        message: {
            amount: string | number;
            destination: {
                hash: Uint8Array<ArrayBufferLike>;
                tag: number;
            };
        };
    } | {
        type: "TezosParametersManager";
        message: {
            transfer?: {
                amount: string | number;
                destination: {
                    hash: Uint8Array<ArrayBufferLike>;
                    tag: number;
                };
            } | undefined;
            set_delegate?: Uint8Array<ArrayBufferLike> | undefined;
            cancel_delegate?: boolean | undefined;
        };
    } | {
        type: "TezosTransactionOp";
        message: {
            parameters?: number[] | undefined;
            parameters_manager?: {
                transfer?: {
                    amount: string | number;
                    destination: {
                        hash: Uint8Array<ArrayBufferLike>;
                        tag: number;
                    };
                } | undefined;
                set_delegate?: Uint8Array<ArrayBufferLike> | undefined;
                cancel_delegate?: boolean | undefined;
            } | undefined;
            source: Uint8Array<ArrayBufferLike>;
            amount: string | number;
            fee: string | number;
            destination: {
                hash: Uint8Array<ArrayBufferLike>;
                tag: number;
            };
            counter: number;
            gas_limit: number;
            storage_limit: number;
        };
    } | {
        type: "TezosOriginationOp";
        message: {
            delegate?: Uint8Array<ArrayBufferLike> | undefined;
            manager_pubkey?: string | undefined;
            spendable?: boolean | undefined;
            delegatable?: boolean | undefined;
            source: Uint8Array<ArrayBufferLike>;
            fee: string | number;
            script: string | number[];
            balance: number;
            counter: number;
            gas_limit: number;
            storage_limit: number;
        };
    } | {
        type: "TezosDelegationOp";
        message: {
            source: Uint8Array<ArrayBufferLike>;
            fee: string | number;
            counter: number;
            gas_limit: number;
            storage_limit: number;
            delegate: Uint8Array<ArrayBufferLike>;
        };
    } | {
        type: "TezosProposalOp";
        message: {
            source: string;
            period: number;
            proposals: string[];
        };
    } | {
        type: "TezosBallotOp";
        message: {
            source: string;
            period: number;
            proposal: string;
            ballot: Messages.TezosBallotType;
        };
    } | {
        type: "TezosSignTx";
        message: {
            chunkify?: boolean | undefined;
            transaction?: {
                parameters?: number[] | undefined;
                parameters_manager?: {
                    transfer?: {
                        amount: string | number;
                        destination: {
                            hash: Uint8Array<ArrayBufferLike>;
                            tag: number;
                        };
                    } | undefined;
                    set_delegate?: Uint8Array<ArrayBufferLike> | undefined;
                    cancel_delegate?: boolean | undefined;
                } | undefined;
                source: Uint8Array<ArrayBufferLike>;
                amount: string | number;
                fee: string | number;
                destination: {
                    hash: Uint8Array<ArrayBufferLike>;
                    tag: number;
                };
                counter: number;
                gas_limit: number;
                storage_limit: number;
            } | undefined;
            reveal?: {
                source: Uint8Array<ArrayBufferLike>;
                public_key: Uint8Array<ArrayBufferLike>;
                fee: string | number;
                counter: number;
                gas_limit: number;
                storage_limit: number;
            } | undefined;
            origination?: {
                delegate?: Uint8Array<ArrayBufferLike> | undefined;
                manager_pubkey?: string | undefined;
                spendable?: boolean | undefined;
                delegatable?: boolean | undefined;
                source: Uint8Array<ArrayBufferLike>;
                fee: string | number;
                script: string | number[];
                balance: number;
                counter: number;
                gas_limit: number;
                storage_limit: number;
            } | undefined;
            delegation?: {
                source: Uint8Array<ArrayBufferLike>;
                fee: string | number;
                counter: number;
                gas_limit: number;
                storage_limit: number;
                delegate: Uint8Array<ArrayBufferLike>;
            } | undefined;
            proposal?: {
                source: string;
                period: number;
                proposals: string[];
            } | undefined;
            ballot?: {
                source: string;
                period: number;
                proposal: string;
                ballot: Messages.TezosBallotType;
            } | undefined;
            address_n: number[];
            branch: Uint8Array<ArrayBufferLike>;
        };
    } | {
        type: "TezosSignedTx";
        message: {
            signature: string;
            sig_op_contents: string;
            operation_hash: string;
        };
    }>;
    private needCancelWorkaround;
    private callLoop;
    private call;
    cancelCall(expectResponse?: boolean): Promise<{
        success: false;
        error: Error;
    } | {
        success: true;
        payload: {
            type: "BinanceTransferMsg";
            message: import("@trezor/protobuf/lib/messages").BinanceTransferMsg;
        } | {
            type: "BinanceOrderMsg";
            message: import("@trezor/protobuf/lib/messages").BinanceOrderMsg;
        } | {
            type: "BinanceCancelMsg";
            message: import("@trezor/protobuf/lib/messages").BinanceCancelMsg;
        } | {
            type: "PassphraseAck";
            message: import("@trezor/protobuf/lib/messages").PassphraseAck;
        } | {
            type: "CipheredKeyValue";
            message: import("@trezor/protobuf/lib/messages").CipheredKeyValue;
        } | {
            type: "GetPublicKey";
            message: import("@trezor/protobuf/lib/messages").GetPublicKey;
        } | {
            type: "PublicKey";
            message: import("@trezor/protobuf/lib/messages").PublicKey;
        } | {
            type: "Features";
            message: import("@trezor/protobuf/lib/messages").Features;
        } | {
            type: "BinanceGetAddress";
            message: import("@trezor/protobuf/lib/messages").BinanceGetAddress;
        } | {
            type: "BinanceAddress";
            message: import("@trezor/protobuf/lib/messages").BinanceAddress;
        } | {
            type: "BinanceGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").BinanceGetPublicKey;
        } | {
            type: "BinancePublicKey";
            message: import("@trezor/protobuf/lib/messages").BinancePublicKey;
        } | {
            type: "BinanceSignTx";
            message: import("@trezor/protobuf/lib/messages").BinanceSignTx;
        } | {
            type: "BinanceTxRequest";
            message: import("@trezor/protobuf/lib/messages").BinanceTxRequest;
        } | {
            type: "BinanceCoin";
            message: import("@trezor/protobuf/lib/messages").BinanceCoin;
        } | {
            type: "BinanceInputOutput";
            message: import("@trezor/protobuf/lib/messages").BinanceInputOutput;
        } | {
            type: "BinanceSignedTx";
            message: import("@trezor/protobuf/lib/messages").BinanceSignedTx;
        } | {
            type: "HDNodeType";
            message: import("@trezor/protobuf/lib/messages").HDNodeType;
        } | {
            type: "HDNodePathType";
            message: import("@trezor/protobuf/lib/messages").HDNodePathType;
        } | {
            type: "MultisigRedeemScriptType";
            message: import("@trezor/protobuf/lib/messages").MultisigRedeemScriptType;
        } | {
            type: "GetAddress";
            message: import("@trezor/protobuf/lib/messages").GetAddress;
        } | {
            type: "Address";
            message: import("@trezor/protobuf/lib/messages").Address;
        } | {
            type: "GetOwnershipId";
            message: import("@trezor/protobuf/lib/messages").GetOwnershipId;
        } | {
            type: "OwnershipId";
            message: import("@trezor/protobuf/lib/messages").OwnershipId;
        } | {
            type: "SignMessage";
            message: import("@trezor/protobuf/lib/messages").SignMessage;
        } | {
            type: "MessageSignature";
            message: import("@trezor/protobuf/lib/messages").MessageSignature;
        } | {
            type: "VerifyMessage";
            message: import("@trezor/protobuf/lib/messages").VerifyMessage;
        } | {
            type: "CoinJoinRequest";
            message: import("@trezor/protobuf/lib/messages").CoinJoinRequest;
        } | {
            type: "SignTx";
            message: import("@trezor/protobuf/lib/messages").SignTx;
        } | {
            type: "TxRequestDetailsType";
            message: import("@trezor/protobuf/lib/messages").TxRequestDetailsType;
        } | {
            type: "TxRequestSerializedType";
            message: import("@trezor/protobuf/lib/messages").TxRequestSerializedType;
        } | {
            type: "TxRequest";
            message: import("@trezor/protobuf/lib/messages").TxRequest;
        } | {
            type: "TxInputType";
            message: import("@trezor/protobuf/lib/messages").TxInputType;
        } | {
            type: "TxOutputBinType";
            message: import("@trezor/protobuf/lib/messages").TxOutputBinType;
        } | {
            type: "TxOutputType";
            message: import("@trezor/protobuf/lib/messages").TxOutputType;
        } | {
            type: "PrevTx";
            message: import("@trezor/protobuf/lib/messages").PrevTx;
        } | {
            type: "PrevInput";
            message: import("@trezor/protobuf/lib/messages").PrevInput;
        } | {
            type: "PrevOutput";
            message: import("@trezor/protobuf/lib/messages").PrevOutput;
        } | {
            type: "TextMemo";
            message: import("@trezor/protobuf/lib/messages").TextMemo;
        } | {
            type: "RefundMemo";
            message: import("@trezor/protobuf/lib/messages").RefundMemo;
        } | {
            type: "CoinPurchaseMemo";
            message: import("@trezor/protobuf/lib/messages").CoinPurchaseMemo;
        } | {
            type: "PaymentRequestMemo";
            message: import("@trezor/protobuf/lib/messages").PaymentRequestMemo;
        } | {
            type: "TxAckPaymentRequest";
            message: import("@trezor/protobuf/lib/messages").TxAckPaymentRequest;
        } | {
            type: "TxAck";
            message: import("@trezor/protobuf/lib/messages").TxAck;
        } | {
            type: "TxAckInputWrapper";
            message: import("@trezor/protobuf/lib/messages").TxAckInputWrapper;
        } | {
            type: "TxAckInput";
            message: import("@trezor/protobuf/lib/messages").TxAckInput;
        } | {
            type: "TxAckOutputWrapper";
            message: import("@trezor/protobuf/lib/messages").TxAckOutputWrapper;
        } | {
            type: "TxAckOutput";
            message: import("@trezor/protobuf/lib/messages").TxAckOutput;
        } | {
            type: "TxAckPrevMeta";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevMeta;
        } | {
            type: "TxAckPrevInputWrapper";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevInputWrapper;
        } | {
            type: "TxAckPrevInput";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevInput;
        } | {
            type: "TxAckPrevOutputWrapper";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevOutputWrapper;
        } | {
            type: "TxAckPrevOutput";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevOutput;
        } | {
            type: "TxAckPrevExtraDataWrapper";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevExtraDataWrapper;
        } | {
            type: "TxAckPrevExtraData";
            message: import("@trezor/protobuf/lib/messages").TxAckPrevExtraData;
        } | {
            type: "GetOwnershipProof";
            message: import("@trezor/protobuf/lib/messages").GetOwnershipProof;
        } | {
            type: "OwnershipProof";
            message: import("@trezor/protobuf/lib/messages").OwnershipProof;
        } | {
            type: "AuthorizeCoinJoin";
            message: import("@trezor/protobuf/lib/messages").AuthorizeCoinJoin;
        } | {
            type: "FirmwareErase";
            message: import("@trezor/protobuf/lib/messages").FirmwareErase;
        } | {
            type: "FirmwareRequest";
            message: import("@trezor/protobuf/lib/messages").FirmwareRequest;
        } | {
            type: "FirmwareUpload";
            message: import("@trezor/protobuf/lib/messages").FirmwareUpload;
        } | {
            type: "ProdTestT1";
            message: import("@trezor/protobuf/lib/messages").ProdTestT1;
        } | {
            type: "CardanoBlockchainPointerType";
            message: import("@trezor/protobuf/lib/messages").CardanoBlockchainPointerType;
        } | {
            type: "CardanoNativeScript";
            message: import("@trezor/protobuf/lib/messages").CardanoNativeScript;
        } | {
            type: "CardanoGetNativeScriptHash";
            message: import("@trezor/protobuf/lib/messages").CardanoGetNativeScriptHash;
        } | {
            type: "CardanoNativeScriptHash";
            message: import("@trezor/protobuf/lib/messages").CardanoNativeScriptHash;
        } | {
            type: "CardanoAddressParametersType";
            message: import("@trezor/protobuf/lib/messages").CardanoAddressParametersType;
        } | {
            type: "CardanoGetAddress";
            message: import("@trezor/protobuf/lib/messages").CardanoGetAddress;
        } | {
            type: "CardanoAddress";
            message: import("@trezor/protobuf/lib/messages").CardanoAddress;
        } | {
            type: "CardanoGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").CardanoGetPublicKey;
        } | {
            type: "CardanoPublicKey";
            message: import("@trezor/protobuf/lib/messages").CardanoPublicKey;
        } | {
            type: "CardanoSignTxInit";
            message: import("@trezor/protobuf/lib/messages").CardanoSignTxInit;
        } | {
            type: "CardanoTxInput";
            message: import("@trezor/protobuf/lib/messages").CardanoTxInput;
        } | {
            type: "CardanoTxOutput";
            message: import("@trezor/protobuf/lib/messages").CardanoTxOutput;
        } | {
            type: "CardanoAssetGroup";
            message: import("@trezor/protobuf/lib/messages").CardanoAssetGroup;
        } | {
            type: "CardanoToken";
            message: import("@trezor/protobuf/lib/messages").CardanoToken;
        } | {
            type: "CardanoTxInlineDatumChunk";
            message: import("@trezor/protobuf/lib/messages").CardanoTxInlineDatumChunk;
        } | {
            type: "CardanoTxReferenceScriptChunk";
            message: import("@trezor/protobuf/lib/messages").CardanoTxReferenceScriptChunk;
        } | {
            type: "CardanoPoolOwner";
            message: import("@trezor/protobuf/lib/messages").CardanoPoolOwner;
        } | {
            type: "CardanoPoolRelayParameters";
            message: import("@trezor/protobuf/lib/messages").CardanoPoolRelayParameters;
        } | {
            type: "CardanoPoolMetadataType";
            message: import("@trezor/protobuf/lib/messages").CardanoPoolMetadataType;
        } | {
            type: "CardanoPoolParametersType";
            message: import("@trezor/protobuf/lib/messages").CardanoPoolParametersType;
        } | {
            type: "CardanoDRep";
            message: import("@trezor/protobuf/lib/messages").CardanoDRep;
        } | {
            type: "CardanoTxCertificate";
            message: import("@trezor/protobuf/lib/messages").CardanoTxCertificate;
        } | {
            type: "CardanoTxWithdrawal";
            message: import("@trezor/protobuf/lib/messages").CardanoTxWithdrawal;
        } | {
            type: "CardanoCVoteRegistrationDelegation";
            message: import("@trezor/protobuf/lib/messages").CardanoCVoteRegistrationDelegation;
        } | {
            type: "CardanoCVoteRegistrationParametersType";
            message: import("@trezor/protobuf/lib/messages").CardanoCVoteRegistrationParametersType;
        } | {
            type: "CardanoTxAuxiliaryData";
            message: import("@trezor/protobuf/lib/messages").CardanoTxAuxiliaryData;
        } | {
            type: "CardanoTxMint";
            message: import("@trezor/protobuf/lib/messages").CardanoTxMint;
        } | {
            type: "CardanoTxCollateralInput";
            message: import("@trezor/protobuf/lib/messages").CardanoTxCollateralInput;
        } | {
            type: "CardanoTxRequiredSigner";
            message: import("@trezor/protobuf/lib/messages").CardanoTxRequiredSigner;
        } | {
            type: "CardanoTxReferenceInput";
            message: import("@trezor/protobuf/lib/messages").CardanoTxReferenceInput;
        } | {
            type: "CardanoTxItemAck";
            message: import("@trezor/protobuf/lib/messages").CardanoTxItemAck;
        } | {
            type: "CardanoTxAuxiliaryDataSupplement";
            message: import("@trezor/protobuf/lib/messages").CardanoTxAuxiliaryDataSupplement;
        } | {
            type: "CardanoTxWitnessRequest";
            message: import("@trezor/protobuf/lib/messages").CardanoTxWitnessRequest;
        } | {
            type: "CardanoTxWitnessResponse";
            message: import("@trezor/protobuf/lib/messages").CardanoTxWitnessResponse;
        } | {
            type: "CardanoTxHostAck";
            message: import("@trezor/protobuf/lib/messages").CardanoTxHostAck;
        } | {
            type: "CardanoTxBodyHash";
            message: import("@trezor/protobuf/lib/messages").CardanoTxBodyHash;
        } | {
            type: "CardanoSignTxFinished";
            message: import("@trezor/protobuf/lib/messages").CardanoSignTxFinished;
        } | {
            type: "Success";
            message: import("@trezor/protobuf/lib/messages").Success;
        } | {
            type: "Failure";
            message: import("@trezor/protobuf/lib/messages").Failure;
        } | {
            type: "ButtonRequest";
            message: import("@trezor/protobuf/lib/messages").ButtonRequest;
        } | {
            type: "ButtonAck";
            message: import("@trezor/protobuf/lib/messages").ButtonAck;
        } | {
            type: "PinMatrixRequest";
            message: import("@trezor/protobuf/lib/messages").PinMatrixRequest;
        } | {
            type: "PinMatrixAck";
            message: import("@trezor/protobuf/lib/messages").PinMatrixAck;
        } | {
            type: "PassphraseRequest";
            message: import("@trezor/protobuf/lib/messages").PassphraseRequest;
        } | {
            type: "Deprecated_PassphraseStateRequest";
            message: import("@trezor/protobuf/lib/messages").Deprecated_PassphraseStateRequest;
        } | {
            type: "Deprecated_PassphraseStateAck";
            message: import("@trezor/protobuf/lib/messages").Deprecated_PassphraseStateAck;
        } | {
            type: "CipherKeyValue";
            message: import("@trezor/protobuf/lib/messages").CipherKeyValue;
        } | {
            type: "IdentityType";
            message: import("@trezor/protobuf/lib/messages").IdentityType;
        } | {
            type: "SignIdentity";
            message: import("@trezor/protobuf/lib/messages").SignIdentity;
        } | {
            type: "SignedIdentity";
            message: import("@trezor/protobuf/lib/messages").SignedIdentity;
        } | {
            type: "GetECDHSessionKey";
            message: import("@trezor/protobuf/lib/messages").GetECDHSessionKey;
        } | {
            type: "ECDHSessionKey";
            message: import("@trezor/protobuf/lib/messages").ECDHSessionKey;
        } | {
            type: "DebugLinkResetDebugEvents";
            message: import("@trezor/protobuf/lib/messages").DebugLinkResetDebugEvents;
        } | {
            type: "DebugLinkOptigaSetSecMax";
            message: import("@trezor/protobuf/lib/messages").DebugLinkOptigaSetSecMax;
        } | {
            type: "EosGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").EosGetPublicKey;
        } | {
            type: "EosPublicKey";
            message: import("@trezor/protobuf/lib/messages").EosPublicKey;
        } | {
            type: "EosTxHeader";
            message: import("@trezor/protobuf/lib/messages").EosTxHeader;
        } | {
            type: "EosSignTx";
            message: import("@trezor/protobuf/lib/messages").EosSignTx;
        } | {
            type: "EosTxActionRequest";
            message: import("@trezor/protobuf/lib/messages").EosTxActionRequest;
        } | {
            type: "EosAsset";
            message: import("@trezor/protobuf/lib/messages").EosAsset;
        } | {
            type: "EosPermissionLevel";
            message: import("@trezor/protobuf/lib/messages").EosPermissionLevel;
        } | {
            type: "EosAuthorizationKey";
            message: import("@trezor/protobuf/lib/messages").EosAuthorizationKey;
        } | {
            type: "EosAuthorizationAccount";
            message: import("@trezor/protobuf/lib/messages").EosAuthorizationAccount;
        } | {
            type: "EosAuthorizationWait";
            message: import("@trezor/protobuf/lib/messages").EosAuthorizationWait;
        } | {
            type: "EosAuthorization";
            message: import("@trezor/protobuf/lib/messages").EosAuthorization;
        } | {
            type: "EosActionCommon";
            message: import("@trezor/protobuf/lib/messages").EosActionCommon;
        } | {
            type: "EosActionTransfer";
            message: import("@trezor/protobuf/lib/messages").EosActionTransfer;
        } | {
            type: "EosActionDelegate";
            message: import("@trezor/protobuf/lib/messages").EosActionDelegate;
        } | {
            type: "EosActionUndelegate";
            message: import("@trezor/protobuf/lib/messages").EosActionUndelegate;
        } | {
            type: "EosActionRefund";
            message: import("@trezor/protobuf/lib/messages").EosActionRefund;
        } | {
            type: "EosActionBuyRam";
            message: import("@trezor/protobuf/lib/messages").EosActionBuyRam;
        } | {
            type: "EosActionBuyRamBytes";
            message: import("@trezor/protobuf/lib/messages").EosActionBuyRamBytes;
        } | {
            type: "EosActionSellRam";
            message: import("@trezor/protobuf/lib/messages").EosActionSellRam;
        } | {
            type: "EosActionVoteProducer";
            message: import("@trezor/protobuf/lib/messages").EosActionVoteProducer;
        } | {
            type: "EosActionUpdateAuth";
            message: import("@trezor/protobuf/lib/messages").EosActionUpdateAuth;
        } | {
            type: "EosActionDeleteAuth";
            message: import("@trezor/protobuf/lib/messages").EosActionDeleteAuth;
        } | {
            type: "EosActionLinkAuth";
            message: import("@trezor/protobuf/lib/messages").EosActionLinkAuth;
        } | {
            type: "EosActionUnlinkAuth";
            message: import("@trezor/protobuf/lib/messages").EosActionUnlinkAuth;
        } | {
            type: "EosActionNewAccount";
            message: import("@trezor/protobuf/lib/messages").EosActionNewAccount;
        } | {
            type: "EosActionUnknown";
            message: import("@trezor/protobuf/lib/messages").EosActionUnknown;
        } | {
            type: "EosTxActionAck";
            message: import("@trezor/protobuf/lib/messages").EosTxActionAck;
        } | {
            type: "EosSignedTx";
            message: import("@trezor/protobuf/lib/messages").EosSignedTx;
        } | {
            type: "EthereumNetworkInfo";
            message: import("@trezor/protobuf/lib/messages").EthereumNetworkInfo;
        } | {
            type: "EthereumTokenInfo";
            message: import("@trezor/protobuf/lib/messages").EthereumTokenInfo;
        } | {
            type: "EthereumDefinitions";
            message: import("@trezor/protobuf/lib/messages").EthereumDefinitions;
        } | {
            type: "EthereumSignTypedData";
            message: import("@trezor/protobuf/lib/messages").EthereumSignTypedData;
        } | {
            type: "EthereumTypedDataStructRequest";
            message: import("@trezor/protobuf/lib/messages").EthereumTypedDataStructRequest;
        } | {
            type: "EthereumFieldType";
            message: import("@trezor/protobuf/lib/messages").EthereumFieldType;
        } | {
            type: "EthereumStructMember";
            message: import("@trezor/protobuf/lib/messages").EthereumStructMember;
        } | {
            type: "EthereumTypedDataStructAck";
            message: import("@trezor/protobuf/lib/messages").EthereumTypedDataStructAck;
        } | {
            type: "EthereumTypedDataValueRequest";
            message: import("@trezor/protobuf/lib/messages").EthereumTypedDataValueRequest;
        } | {
            type: "EthereumTypedDataValueAck";
            message: import("@trezor/protobuf/lib/messages").EthereumTypedDataValueAck;
        } | {
            type: "EthereumGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").EthereumGetPublicKey;
        } | {
            type: "EthereumPublicKey";
            message: import("@trezor/protobuf/lib/messages").EthereumPublicKey;
        } | {
            type: "EthereumGetAddress";
            message: import("@trezor/protobuf/lib/messages").EthereumGetAddress;
        } | {
            type: "EthereumAddress";
            message: import("@trezor/protobuf/lib/messages").EthereumAddress;
        } | {
            type: "EthereumSignTx";
            message: import("@trezor/protobuf/lib/messages").EthereumSignTx;
        } | {
            type: "EthereumAccessList";
            message: import("@trezor/protobuf/lib/messages").EthereumAccessList;
        } | {
            type: "EthereumSignTxEIP1559";
            message: import("@trezor/protobuf/lib/messages").EthereumSignTxEIP1559;
        } | {
            type: "EthereumTxRequest";
            message: import("@trezor/protobuf/lib/messages").EthereumTxRequest;
        } | {
            type: "EthereumTxAck";
            message: import("@trezor/protobuf/lib/messages").EthereumTxAck;
        } | {
            type: "EthereumSignMessage";
            message: import("@trezor/protobuf/lib/messages").EthereumSignMessage;
        } | {
            type: "EthereumMessageSignature";
            message: import("@trezor/protobuf/lib/messages").EthereumMessageSignature;
        } | {
            type: "EthereumVerifyMessage";
            message: import("@trezor/protobuf/lib/messages").EthereumVerifyMessage;
        } | {
            type: "EthereumSignTypedHash";
            message: import("@trezor/protobuf/lib/messages").EthereumSignTypedHash;
        } | {
            type: "EthereumTypedDataSignature";
            message: import("@trezor/protobuf/lib/messages").EthereumTypedDataSignature;
        } | {
            type: "Initialize";
            message: import("@trezor/protobuf/lib/messages").Initialize;
        } | {
            type: "GetFeatures";
            message: import("@trezor/protobuf/lib/messages").GetFeatures;
        } | {
            type: "RecoveryDevice";
            message: import("@trezor/protobuf/lib/messages").RecoveryDevice;
        } | {
            type: "LockDevice";
            message: import("@trezor/protobuf/lib/messages").LockDevice;
        } | {
            type: "SetBusy";
            message: import("@trezor/protobuf/lib/messages").SetBusy;
        } | {
            type: "EndSession";
            message: import("@trezor/protobuf/lib/messages").EndSession;
        } | {
            type: "ApplySettings";
            message: import("@trezor/protobuf/lib/messages").ApplySettings;
        } | {
            type: "ChangeLanguage";
            message: import("@trezor/protobuf/lib/messages").ChangeLanguage;
        } | {
            type: "TranslationDataRequest";
            message: import("@trezor/protobuf/lib/messages").TranslationDataRequest;
        } | {
            type: "TranslationDataAck";
            message: import("@trezor/protobuf/lib/messages").TranslationDataAck;
        } | {
            type: "ApplyFlags";
            message: import("@trezor/protobuf/lib/messages").ApplyFlags;
        } | {
            type: "ChangePin";
            message: import("@trezor/protobuf/lib/messages").ChangePin;
        } | {
            type: "ChangeWipeCode";
            message: import("@trezor/protobuf/lib/messages").ChangeWipeCode;
        } | {
            type: "SdProtect";
            message: import("@trezor/protobuf/lib/messages").SdProtect;
        } | {
            type: "Ping";
            message: import("@trezor/protobuf/lib/messages").Ping;
        } | {
            type: "Cancel";
            message: import("@trezor/protobuf/lib/messages").Cancel;
        } | {
            type: "GetEntropy";
            message: import("@trezor/protobuf/lib/messages").GetEntropy;
        } | {
            type: "Entropy";
            message: import("@trezor/protobuf/lib/messages").Entropy;
        } | {
            type: "GetFirmwareHash";
            message: import("@trezor/protobuf/lib/messages").GetFirmwareHash;
        } | {
            type: "FirmwareHash";
            message: import("@trezor/protobuf/lib/messages").FirmwareHash;
        } | {
            type: "AuthenticateDevice";
            message: import("@trezor/protobuf/lib/messages").AuthenticateDevice;
        } | {
            type: "AuthenticityProof";
            message: import("@trezor/protobuf/lib/messages").AuthenticityProof;
        } | {
            type: "WipeDevice";
            message: import("@trezor/protobuf/lib/messages").WipeDevice;
        } | {
            type: "LoadDevice";
            message: import("@trezor/protobuf/lib/messages").LoadDevice;
        } | {
            type: "ResetDevice";
            message: import("@trezor/protobuf/lib/messages").ResetDevice;
        } | {
            type: "Slip39Group";
            message: import("@trezor/protobuf/lib/messages").Slip39Group;
        } | {
            type: "BackupDevice";
            message: import("@trezor/protobuf/lib/messages").BackupDevice;
        } | {
            type: "EntropyRequest";
            message: import("@trezor/protobuf/lib/messages").EntropyRequest;
        } | {
            type: "EntropyAck";
            message: import("@trezor/protobuf/lib/messages").EntropyAck;
        } | {
            type: "EntropyCheckReady";
            message: import("@trezor/protobuf/lib/messages").EntropyCheckReady;
        } | {
            type: "EntropyCheckContinue";
            message: import("@trezor/protobuf/lib/messages").EntropyCheckContinue;
        } | {
            type: "WordRequest";
            message: import("@trezor/protobuf/lib/messages").WordRequest;
        } | {
            type: "WordAck";
            message: import("@trezor/protobuf/lib/messages").WordAck;
        } | {
            type: "SetU2FCounter";
            message: import("@trezor/protobuf/lib/messages").SetU2FCounter;
        } | {
            type: "GetNextU2FCounter";
            message: import("@trezor/protobuf/lib/messages").GetNextU2FCounter;
        } | {
            type: "NextU2FCounter";
            message: import("@trezor/protobuf/lib/messages").NextU2FCounter;
        } | {
            type: "DoPreauthorized";
            message: import("@trezor/protobuf/lib/messages").DoPreauthorized;
        } | {
            type: "PreauthorizedRequest";
            message: import("@trezor/protobuf/lib/messages").PreauthorizedRequest;
        } | {
            type: "CancelAuthorization";
            message: import("@trezor/protobuf/lib/messages").CancelAuthorization;
        } | {
            type: "RebootToBootloader";
            message: import("@trezor/protobuf/lib/messages").RebootToBootloader;
        } | {
            type: "GetNonce";
            message: import("@trezor/protobuf/lib/messages").GetNonce;
        } | {
            type: "Nonce";
            message: import("@trezor/protobuf/lib/messages").Nonce;
        } | {
            type: "UnlockPath";
            message: import("@trezor/protobuf/lib/messages").UnlockPath;
        } | {
            type: "UnlockedPathRequest";
            message: import("@trezor/protobuf/lib/messages").UnlockedPathRequest;
        } | {
            type: "ShowDeviceTutorial";
            message: import("@trezor/protobuf/lib/messages").ShowDeviceTutorial;
        } | {
            type: "UnlockBootloader";
            message: import("@trezor/protobuf/lib/messages").UnlockBootloader;
        } | {
            type: "SetBrightness";
            message: import("@trezor/protobuf/lib/messages").SetBrightness;
        } | {
            type: "NEMGetAddress";
            message: import("@trezor/protobuf/lib/messages").NEMGetAddress;
        } | {
            type: "NEMAddress";
            message: import("@trezor/protobuf/lib/messages").NEMAddress;
        } | {
            type: "NEMTransactionCommon";
            message: import("@trezor/protobuf/lib/messages").NEMTransactionCommon;
        } | {
            type: "NEMMosaic";
            message: import("@trezor/protobuf/lib/messages").NEMMosaic;
        } | {
            type: "NEMTransfer";
            message: import("@trezor/protobuf/lib/messages").NEMTransfer;
        } | {
            type: "NEMProvisionNamespace";
            message: import("@trezor/protobuf/lib/messages").NEMProvisionNamespace;
        } | {
            type: "NEMMosaicDefinition";
            message: import("@trezor/protobuf/lib/messages").NEMMosaicDefinition;
        } | {
            type: "NEMMosaicCreation";
            message: import("@trezor/protobuf/lib/messages").NEMMosaicCreation;
        } | {
            type: "NEMMosaicSupplyChange";
            message: import("@trezor/protobuf/lib/messages").NEMMosaicSupplyChange;
        } | {
            type: "NEMCosignatoryModification";
            message: import("@trezor/protobuf/lib/messages").NEMCosignatoryModification;
        } | {
            type: "NEMAggregateModification";
            message: import("@trezor/protobuf/lib/messages").NEMAggregateModification;
        } | {
            type: "NEMImportanceTransfer";
            message: import("@trezor/protobuf/lib/messages").NEMImportanceTransfer;
        } | {
            type: "NEMSignTx";
            message: import("@trezor/protobuf/lib/messages").NEMSignTx;
        } | {
            type: "NEMSignedTx";
            message: import("@trezor/protobuf/lib/messages").NEMSignedTx;
        } | {
            type: "NEMDecryptMessage";
            message: import("@trezor/protobuf/lib/messages").NEMDecryptMessage;
        } | {
            type: "NEMDecryptedMessage";
            message: import("@trezor/protobuf/lib/messages").NEMDecryptedMessage;
        } | {
            type: "RippleGetAddress";
            message: import("@trezor/protobuf/lib/messages").RippleGetAddress;
        } | {
            type: "RippleAddress";
            message: import("@trezor/protobuf/lib/messages").RippleAddress;
        } | {
            type: "RipplePayment";
            message: import("@trezor/protobuf/lib/messages").RipplePayment;
        } | {
            type: "RippleSignTx";
            message: import("@trezor/protobuf/lib/messages").RippleSignTx;
        } | {
            type: "RippleSignedTx";
            message: import("@trezor/protobuf/lib/messages").RippleSignedTx;
        } | {
            type: "SolanaGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").SolanaGetPublicKey;
        } | {
            type: "SolanaPublicKey";
            message: import("@trezor/protobuf/lib/messages").SolanaPublicKey;
        } | {
            type: "SolanaGetAddress";
            message: import("@trezor/protobuf/lib/messages").SolanaGetAddress;
        } | {
            type: "SolanaAddress";
            message: import("@trezor/protobuf/lib/messages").SolanaAddress;
        } | {
            type: "SolanaTxTokenAccountInfo";
            message: import("@trezor/protobuf/lib/messages").SolanaTxTokenAccountInfo;
        } | {
            type: "SolanaTxAdditionalInfo";
            message: import("@trezor/protobuf/lib/messages").SolanaTxAdditionalInfo;
        } | {
            type: "SolanaSignTx";
            message: import("@trezor/protobuf/lib/messages").SolanaSignTx;
        } | {
            type: "SolanaTxSignature";
            message: import("@trezor/protobuf/lib/messages").SolanaTxSignature;
        } | {
            type: "StellarAsset";
            message: import("@trezor/protobuf/lib/messages").StellarAsset;
        } | {
            type: "StellarGetAddress";
            message: import("@trezor/protobuf/lib/messages").StellarGetAddress;
        } | {
            type: "StellarAddress";
            message: import("@trezor/protobuf/lib/messages").StellarAddress;
        } | {
            type: "StellarSignTx";
            message: import("@trezor/protobuf/lib/messages").StellarSignTx;
        } | {
            type: "StellarTxOpRequest";
            message: import("@trezor/protobuf/lib/messages").StellarTxOpRequest;
        } | {
            type: "StellarPaymentOp";
            message: import("@trezor/protobuf/lib/messages").StellarPaymentOp;
        } | {
            type: "StellarCreateAccountOp";
            message: import("@trezor/protobuf/lib/messages").StellarCreateAccountOp;
        } | {
            type: "StellarPathPaymentStrictReceiveOp";
            message: import("@trezor/protobuf/lib/messages").StellarPathPaymentStrictReceiveOp;
        } | {
            type: "StellarPathPaymentStrictSendOp";
            message: import("@trezor/protobuf/lib/messages").StellarPathPaymentStrictSendOp;
        } | {
            type: "StellarManageSellOfferOp";
            message: import("@trezor/protobuf/lib/messages").StellarManageSellOfferOp;
        } | {
            type: "StellarManageBuyOfferOp";
            message: import("@trezor/protobuf/lib/messages").StellarManageBuyOfferOp;
        } | {
            type: "StellarCreatePassiveSellOfferOp";
            message: import("@trezor/protobuf/lib/messages").StellarCreatePassiveSellOfferOp;
        } | {
            type: "StellarSetOptionsOp";
            message: import("@trezor/protobuf/lib/messages").StellarSetOptionsOp;
        } | {
            type: "StellarChangeTrustOp";
            message: import("@trezor/protobuf/lib/messages").StellarChangeTrustOp;
        } | {
            type: "StellarAllowTrustOp";
            message: import("@trezor/protobuf/lib/messages").StellarAllowTrustOp;
        } | {
            type: "StellarAccountMergeOp";
            message: import("@trezor/protobuf/lib/messages").StellarAccountMergeOp;
        } | {
            type: "StellarManageDataOp";
            message: import("@trezor/protobuf/lib/messages").StellarManageDataOp;
        } | {
            type: "StellarBumpSequenceOp";
            message: import("@trezor/protobuf/lib/messages").StellarBumpSequenceOp;
        } | {
            type: "StellarClaimClaimableBalanceOp";
            message: import("@trezor/protobuf/lib/messages").StellarClaimClaimableBalanceOp;
        } | {
            type: "StellarSignedTx";
            message: import("@trezor/protobuf/lib/messages").StellarSignedTx;
        } | {
            type: "TezosGetAddress";
            message: import("@trezor/protobuf/lib/messages").TezosGetAddress;
        } | {
            type: "TezosAddress";
            message: import("@trezor/protobuf/lib/messages").TezosAddress;
        } | {
            type: "TezosGetPublicKey";
            message: import("@trezor/protobuf/lib/messages").TezosGetPublicKey;
        } | {
            type: "TezosPublicKey";
            message: import("@trezor/protobuf/lib/messages").TezosPublicKey;
        } | {
            type: "TezosContractID";
            message: import("@trezor/protobuf/lib/messages").TezosContractID;
        } | {
            type: "TezosRevealOp";
            message: import("@trezor/protobuf/lib/messages").TezosRevealOp;
        } | {
            type: "TezosManagerTransfer";
            message: import("@trezor/protobuf/lib/messages").TezosManagerTransfer;
        } | {
            type: "TezosParametersManager";
            message: import("@trezor/protobuf/lib/messages").TezosParametersManager;
        } | {
            type: "TezosTransactionOp";
            message: import("@trezor/protobuf/lib/messages").TezosTransactionOp;
        } | {
            type: "TezosOriginationOp";
            message: import("@trezor/protobuf/lib/messages").TezosOriginationOp;
        } | {
            type: "TezosDelegationOp";
            message: import("@trezor/protobuf/lib/messages").TezosDelegationOp;
        } | {
            type: "TezosProposalOp";
            message: import("@trezor/protobuf/lib/messages").TezosProposalOp;
        } | {
            type: "TezosBallotOp";
            message: import("@trezor/protobuf/lib/messages").TezosBallotOp;
        } | {
            type: "TezosSignTx";
            message: import("@trezor/protobuf/lib/messages").TezosSignTx;
        } | {
            type: "TezosSignedTx";
            message: import("@trezor/protobuf/lib/messages").TezosSignedTx;
        } | undefined;
    }>;
    abort(reason: Error): Promise<void>;
    dispose(): Promise<void>;
}
//# sourceMappingURL=DeviceCurrentSession.d.ts.map