import EventEmitter from 'events';
import { Blockchain } from '../../backend/BlockchainLink';
import { PROTO } from '../../constants';
import type { DeviceCommands } from '../../device/DeviceCommands';
import type { CoinInfo, DiscoveryAccount, DiscoveryAccountType } from '../../types';
import type { GetAccountInfo } from '../../types/api/getAccountInfo';
type DiscoveryType = {
    type: DiscoveryAccountType;
    getPath: (index: number) => number[];
};
type GetDescriptor = (path: number[]) => ReturnType<ReturnType<typeof DeviceCommands>['getAccountDescriptor']>;
type DiscoveryOptions = {
    blockchain: Blockchain;
    getDescriptor: GetDescriptor;
    limit?: number;
};
export declare class Discovery extends EventEmitter {
    types: DiscoveryType[];
    typeIndex: number;
    accounts: DiscoveryAccount[];
    coinInfo: CoinInfo;
    blockchain: Blockchain;
    getDescriptor: GetDescriptor;
    index: number;
    interrupted: boolean;
    completed: boolean;
    derivationType?: PROTO.CardanoDerivationType;
    constructor(options: DiscoveryOptions);
    start(details?: GetAccountInfo['details']): Promise<void>;
    stop(): void;
    dispose(): void;
}
export {};
//# sourceMappingURL=Discovery.d.ts.map