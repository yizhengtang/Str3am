export type FirmwareVersionString = `${number}.${number}.${number}`;
export declare enum FirmwareType {
    BitcoinOnly = "bitcoin-only",
    Regular = "regular"
}
export type VersionArray = [number, number, number];
export type FeaturesNarrowing = {
    major_version: 2;
    minor_version: number;
    patch_version: number;
    fw_major: null;
    fw_minor: null;
    fw_patch: null;
    bootloader_mode: true;
    firmware_present: false;
} | {
    major_version: 2;
    minor_version: number;
    patch_version: number;
    fw_major: null;
    fw_minor: null;
    fw_patch: null;
    bootloader_mode: null;
    firmware_present: null;
} | {
    major_version: 2;
    minor_version: number;
    patch_version: number;
    fw_major: 2;
    fw_minor: number;
    fw_patch: number;
    bootloader_mode: true;
    firmware_present: true;
} | {
    major_version: 1;
    minor_version: number;
    patch_version: number;
    fw_major: null;
    fw_minor: null;
    fw_patch: null;
    bootloader_mode: true;
    firmware_present: false;
} | {
    major_version: 1;
    minor_version: number;
    patch_version: number;
    fw_major: null;
    fw_minor: null;
    fw_patch: null;
    bootloader_mode: true;
    firmware_present: true;
};
export type PartialDevice = {
    firmwareType?: FirmwareType;
    features?: {
        major_version: number;
        minor_version: number;
        patch_version: number;
        bootloader_mode: boolean | null;
        initialized: boolean | null;
        revision: string | null;
        bootloader_hash: string | null;
        fw_major: number | null;
        fw_minor: number | null;
        fw_patch: number | null;
        no_backup: boolean | null;
        unit_btconly?: boolean;
    };
};
//# sourceMappingURL=types.d.ts.map