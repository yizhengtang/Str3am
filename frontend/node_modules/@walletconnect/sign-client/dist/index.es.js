import{RELAYER_EVENTS as Xe,TRANSPORT_TYPES as T,EXPIRER_EVENTS as qt,PAIRING_EVENTS as Je,RELAYER_DEFAULT_PROTOCOL as Tt,EVENT_CLIENT_SESSION_TRACES as M,EVENT_CLIENT_SESSION_ERRORS as H,EVENT_CLIENT_AUTHENTICATE_TRACES as z,EVENT_CLIENT_AUTHENTICATE_ERRORS as re,EVENT_CLIENT_PAIRING_ERRORS as Nt,EVENT_CLIENT_PAIRING_TRACES as Pt,VERIFY_SERVER as Ot,Store as J,Core as bt}from"@walletconnect/core";import{pino as At,getDefaultLoggerOptions as Ct,generateChildLogger as xt,getLoggerContext as Vt}from"@walletconnect/logger";import{IEngine as Dt,ISignClient as Lt}from"@walletconnect/types";import{THIRTY_DAYS as Mt,SEVEN_DAYS as Be,FIVE_MINUTES as A,ONE_DAY as K,ONE_HOUR as We,ONE_SECOND as Ze,toMiliseconds as Oe}from"@walletconnect/time";import{getInternalError as w,BASE64URL as ne,BASE64 as ue,hashMessage as B,parseExpirerTarget as kt,isValidString as U,isExpired as W,isValidId as $t,calcExpiry as C,engineEvent as f,createDelayedPromise as Z,getSdkError as O,getDeepLink as Kt,handleDeeplinkRedirect as Ut,isSessionCompatible as Gt,hashKey as be,parseChainId as Ae,createEncodedRecap as Ft,getRecapFromResources as Ce,mergeEncodedRecaps as jt,TYPE_2 as Qt,getLinkModeURL as ge,validateSignedCacao as et,getNamespacedDidChainId as tt,getDidAddress as st,getMethodsFromRecap as it,getChainsFromRecap as rt,buildNamespacesFromAuth as nt,formatMessage as Ht,MemoryStore as oe,isValidParams as k,isUndefined as ae,isValidRelays as zt,isValidObject as ot,isValidRequiredNamespaces as Yt,isValidNamespaces as xe,isConformingNamespaces as at,isValidErrorReason as Xt,isValidRelay as Jt,isValidController as Bt,isValidNamespacesChainId as ct,isValidRequest as Wt,isValidNamespacesRequest as Zt,isValidRequestExpiry as es,isValidResponse as ts,isValidEvent as ss,isValidNamespacesEvent as is,getSearchParamFromURL as lt,isTestRun as rs,isReactNative as ns,isValidArray as os,TYPE_1 as Ve,getAppMetadata as as}from"@walletconnect/utils";import cs,{EventEmitter as ls}from"events";import{isJsonRpcRequest as ps,isJsonRpcResponse as hs,payloadId as G,getBigIntRpcId as ye,isJsonRpcResult as F,isJsonRpcError as j,formatJsonRpcRequest as we,formatJsonRpcResult as ds,formatJsonRpcError as us}from"@walletconnect/jsonrpc-utils";const De="wc",Le=2,Me="client",me=`${De}@${Le}:${Me}:`,_e={name:Me,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.org"},gs={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire",session_authenticate:"session_authenticate",session_request_expire:"session_request_expire",session_connect:"session_connect"},ys={database:":memory:"},ke="WALLETCONNECT_DEEPLINK_CHOICE",ws={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},ms="history",_s="0.3",pt="proposal",Es=Mt,$e="Proposal expired",ht="session",Y=Be,dt="engine",N={wc_sessionPropose:{req:{ttl:A,prompt:!0,tag:1100},res:{ttl:A,prompt:!1,tag:1101},reject:{ttl:A,prompt:!1,tag:1120},autoReject:{ttl:A,prompt:!1,tag:1121}},wc_sessionSettle:{req:{ttl:A,prompt:!1,tag:1102},res:{ttl:A,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:K,prompt:!1,tag:1104},res:{ttl:K,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:K,prompt:!1,tag:1106},res:{ttl:K,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:A,prompt:!0,tag:1108},res:{ttl:A,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:A,prompt:!0,tag:1110},res:{ttl:A,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:K,prompt:!1,tag:1112},res:{ttl:K,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:K,prompt:!1,tag:1114},res:{ttl:K,prompt:!1,tag:1115}},wc_sessionAuthenticate:{req:{ttl:We,prompt:!0,tag:1116},res:{ttl:We,prompt:!1,tag:1117},reject:{ttl:A,prompt:!1,tag:1118},autoReject:{ttl:A,prompt:!1,tag:1119}}},Ee={min:A,max:Be},$={idle:"IDLE",active:"ACTIVE"},Ke={eth_sendTransaction:{key:""},eth_sendRawTransaction:{key:""},wallet_sendCalls:{key:""},solana_signTransaction:{key:"signature"},solana_signAllTransactions:{key:"transactions"},solana_signAndSendTransaction:{key:"signature"}},ut="request",gt=["wc_sessionPropose","wc_sessionRequest","wc_authRequest","wc_sessionAuthenticate"],yt="wc",Ss=1.5,wt="auth",mt="authKeys",_t="pairingTopics",Et="requests",ce=`${yt}@${1.5}:${wt}:`,le=`${ce}:PUB_KEY`;var Rs=Object.defineProperty,fs=Object.defineProperties,Is=Object.getOwnPropertyDescriptors,St=Object.getOwnPropertySymbols,vs=Object.prototype.hasOwnProperty,qs=Object.prototype.propertyIsEnumerable,Ue=(S,n,e)=>n in S?Rs(S,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[n]=e,v=(S,n)=>{for(var e in n||(n={}))vs.call(n,e)&&Ue(S,e,n[e]);if(St)for(var e of St(n))qs.call(n,e)&&Ue(S,e,n[e]);return S},x=(S,n)=>fs(S,Is(n)),c=(S,n,e)=>Ue(S,typeof n!="symbol"?n+"":n,e);class Ts extends Dt{constructor(n){super(n),c(this,"name",dt),c(this,"events",new cs),c(this,"initialized",!1),c(this,"requestQueue",{state:$.idle,queue:[]}),c(this,"sessionRequestQueue",{state:$.idle,queue:[]}),c(this,"requestQueueDelay",Ze),c(this,"expectedPairingMethodMap",new Map),c(this,"recentlyDeletedMap",new Map),c(this,"recentlyDeletedLimit",200),c(this,"relayMessageCache",[]),c(this,"pendingSessions",new Map),c(this,"init",async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.registerPairingEvents(),await this.registerLinkModeListeners(),this.client.core.pairing.register({methods:Object.keys(N)}),this.initialized=!0,setTimeout(()=>{this.sessionRequestQueue.queue=this.getPendingSessionRequests(),this.processSessionRequestQueue()},Oe(this.requestQueueDelay)))}),c(this,"connect",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();const t=x(v({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(t);const{pairingTopic:s,requiredNamespaces:i,optionalNamespaces:r,sessionProperties:o,relays:a}=t;let l=s,u,g=!1;try{if(l){const R=this.client.core.pairing.pairings.get(l);this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."),g=R.active}}catch(R){throw this.client.logger.error(`connect() -> pairing.get(${l}) failed`),R}if(!l||!g){const{topic:R,uri:D}=await this.client.core.pairing.create();l=R,u=D}if(!l){const{message:R}=w("NO_MATCHING_KEY",`connect() pairing topic: ${l}`);throw new Error(R)}const h=await this.client.core.crypto.generateKeyPair(),d=N.wc_sessionPropose.req.ttl||A,y=C(d),m=x(v({requiredNamespaces:i,optionalNamespaces:r,relays:a??[{protocol:Tt}],proposer:{publicKey:h,metadata:this.client.metadata},expiryTimestamp:y,pairingTopic:l},o&&{sessionProperties:o}),{id:G()}),I=f("session_connect",m.id),{reject:p,resolve:E,done:V}=Z(d,$e),q=({id:R})=>{R===m.id&&(this.client.events.off("proposal_expire",q),this.pendingSessions.delete(m.id),this.events.emit(I,{error:{message:$e,code:0}}))};return this.client.events.on("proposal_expire",q),this.events.once(I,({error:R,session:D})=>{this.client.events.off("proposal_expire",q),R?p(R):D&&E(D)}),await this.sendRequest({topic:l,method:"wc_sessionPropose",params:m,throwOnFailedPublish:!0,clientRpcId:m.id}),await this.setProposal(m.id,m),{uri:u,approval:V}}),c(this,"pair",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{return await this.client.core.pairing.pair(e)}catch(t){throw this.client.logger.error("pair() failed"),t}}),c(this,"approve",async e=>{var t,s,i;const r=this.client.core.eventClient.createEvent({properties:{topic:(t=e?.id)==null?void 0:t.toString(),trace:[M.session_approve_started]}});try{this.isInitialized(),await this.confirmOnlineStateOrThrow()}catch(P){throw r.setError(H.no_internet_connection),P}try{await this.isValidProposalId(e?.id)}catch(P){throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`),r.setError(H.proposal_not_found),P}try{await this.isValidApprove(e)}catch(P){throw this.client.logger.error("approve() -> isValidApprove() failed"),r.setError(H.session_approve_namespace_validation_failure),P}const{id:o,relayProtocol:a,namespaces:l,sessionProperties:u,sessionConfig:g}=e,h=this.client.proposal.get(o);this.client.core.eventClient.deleteEvent({eventId:r.eventId});const{pairingTopic:d,proposer:y,requiredNamespaces:m,optionalNamespaces:I}=h;let p=(s=this.client.core.eventClient)==null?void 0:s.getEvent({topic:d});p||(p=(i=this.client.core.eventClient)==null?void 0:i.createEvent({type:M.session_approve_started,properties:{topic:d,trace:[M.session_approve_started,M.session_namespaces_validation_success]}}));const E=await this.client.core.crypto.generateKeyPair(),V=y.publicKey,q=await this.client.core.crypto.generateSharedKey(E,V),R=v(v({relay:{protocol:a??"irn"},namespaces:l,controller:{publicKey:E,metadata:this.client.metadata},expiry:C(Y)},u&&{sessionProperties:u}),g&&{sessionConfig:g}),D=T.relay;p.addTrace(M.subscribing_session_topic);try{await this.client.core.relayer.subscribe(q,{transportType:D})}catch(P){throw p.setError(H.subscribe_session_topic_failure),P}p.addTrace(M.subscribe_session_topic_success);const ee=x(v({},R),{topic:q,requiredNamespaces:m,optionalNamespaces:I,pairingTopic:d,acknowledged:!1,self:R.controller,peer:{publicKey:y.publicKey,metadata:y.metadata},controller:E,transportType:T.relay});await this.client.session.set(q,ee),p.addTrace(M.store_session);try{p.addTrace(M.publishing_session_settle),await this.sendRequest({topic:q,method:"wc_sessionSettle",params:R,throwOnFailedPublish:!0}).catch(P=>{throw p?.setError(H.session_settle_publish_failure),P}),p.addTrace(M.session_settle_publish_success),p.addTrace(M.publishing_session_approve),await this.sendResult({id:o,topic:d,result:{relay:{protocol:a??"irn"},responderPublicKey:E},throwOnFailedPublish:!0}).catch(P=>{throw p?.setError(H.session_approve_publish_failure),P}),p.addTrace(M.session_approve_publish_success)}catch(P){throw this.client.logger.error(P),this.client.session.delete(q,O("USER_DISCONNECTED")),await this.client.core.relayer.unsubscribe(q),P}return this.client.core.eventClient.deleteEvent({eventId:p.eventId}),await this.client.core.pairing.updateMetadata({topic:d,metadata:y.metadata}),await this.client.proposal.delete(o,O("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:d}),await this.setExpiry(q,C(Y)),{topic:q,acknowledged:()=>Promise.resolve(this.client.session.get(q))}}),c(this,"reject",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidReject(e)}catch(r){throw this.client.logger.error("reject() -> isValidReject() failed"),r}const{id:t,reason:s}=e;let i;try{i=this.client.proposal.get(t).pairingTopic}catch(r){throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`),r}i&&(await this.sendError({id:t,topic:i,error:s,rpcOpts:N.wc_sessionPropose.reject}),await this.client.proposal.delete(t,O("USER_DISCONNECTED")))}),c(this,"update",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidUpdate(e)}catch(g){throw this.client.logger.error("update() -> isValidUpdate() failed"),g}const{topic:t,namespaces:s}=e,{done:i,resolve:r,reject:o}=Z(),a=G(),l=ye().toString(),u=this.client.session.get(t).namespaces;return this.events.once(f("session_update",a),({error:g})=>{g?o(g):r()}),await this.client.session.update(t,{namespaces:s}),await this.sendRequest({topic:t,method:"wc_sessionUpdate",params:{namespaces:s},throwOnFailedPublish:!0,clientRpcId:a,relayRpcId:l}).catch(g=>{this.client.logger.error(g),this.client.session.update(t,{namespaces:u}),o(g)}),{acknowledged:i}}),c(this,"extend",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidExtend(e)}catch(a){throw this.client.logger.error("extend() -> isValidExtend() failed"),a}const{topic:t}=e,s=G(),{done:i,resolve:r,reject:o}=Z();return this.events.once(f("session_extend",s),({error:a})=>{a?o(a):r()}),await this.setExpiry(t,C(Y)),this.sendRequest({topic:t,method:"wc_sessionExtend",params:{},clientRpcId:s,throwOnFailedPublish:!0}).catch(a=>{o(a)}),{acknowledged:i}}),c(this,"request",async e=>{this.isInitialized();try{await this.isValidRequest(e)}catch(p){throw this.client.logger.error("request() -> isValidRequest() failed"),p}const{chainId:t,request:s,topic:i,expiry:r=N.wc_sessionRequest.req.ttl}=e,o=this.client.session.get(i);o?.transportType===T.relay&&await this.confirmOnlineStateOrThrow();const a=G(),l=ye().toString(),{done:u,resolve:g,reject:h}=Z(r,"Request expired. Please try again.");this.events.once(f("session_request",a),({error:p,result:E})=>{p?h(p):g(E)});const d="wc_sessionRequest",y=this.getAppLinkIfEnabled(o.peer.metadata,o.transportType);if(y)return await this.sendRequest({clientRpcId:a,relayRpcId:l,topic:i,method:d,params:{request:x(v({},s),{expiryTimestamp:C(r)}),chainId:t},expiry:r,throwOnFailedPublish:!0,appLink:y}).catch(p=>h(p)),this.client.events.emit("session_request_sent",{topic:i,request:s,chainId:t,id:a}),await u();const m={request:x(v({},s),{expiryTimestamp:C(r)}),chainId:t},I=this.shouldSetTVF(d,m);return await Promise.all([new Promise(async p=>{await this.sendRequest(v({clientRpcId:a,relayRpcId:l,topic:i,method:d,params:m,expiry:r,throwOnFailedPublish:!0},I&&{tvf:this.getTVFParams(a,m)})).catch(E=>h(E)),this.client.events.emit("session_request_sent",{topic:i,request:s,chainId:t,id:a}),p()}),new Promise(async p=>{var E;if(!((E=o.sessionConfig)!=null&&E.disableDeepLink)){const V=await Kt(this.client.core.storage,ke);await Ut({id:a,topic:i,wcDeepLink:V})}p()}),u()]).then(p=>p[2])}),c(this,"respond",async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:t,response:s}=e,{id:i}=s,r=this.client.session.get(t);r.transportType===T.relay&&await this.confirmOnlineStateOrThrow();const o=this.getAppLinkIfEnabled(r.peer.metadata,r.transportType);F(s)?await this.sendResult({id:i,topic:t,result:s.result,throwOnFailedPublish:!0,appLink:o}):j(s)&&await this.sendError({id:i,topic:t,error:s.error,appLink:o}),this.cleanupAfterResponse(e)}),c(this,"ping",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidPing(e)}catch(s){throw this.client.logger.error("ping() -> isValidPing() failed"),s}const{topic:t}=e;if(this.client.session.keys.includes(t)){const s=G(),i=ye().toString(),{done:r,resolve:o,reject:a}=Z();this.events.once(f("session_ping",s),({error:l})=>{l?a(l):o()}),await Promise.all([this.sendRequest({topic:t,method:"wc_sessionPing",params:{},throwOnFailedPublish:!0,clientRpcId:s,relayRpcId:i}),r()])}else this.client.core.pairing.pairings.keys.includes(t)&&(this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."),await this.client.core.pairing.ping({topic:t}))}),c(this,"emit",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidEmit(e);const{topic:t,event:s,chainId:i}=e,r=ye().toString(),o=G();await this.sendRequest({topic:t,method:"wc_sessionEvent",params:{event:s,chainId:i},throwOnFailedPublish:!0,relayRpcId:r,clientRpcId:o})}),c(this,"disconnect",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidDisconnect(e);const{topic:t}=e;if(this.client.session.keys.includes(t))await this.sendRequest({topic:t,method:"wc_sessionDelete",params:O("USER_DISCONNECTED"),throwOnFailedPublish:!0}),await this.deleteSession({topic:t,emitEvent:!1});else if(this.client.core.pairing.pairings.keys.includes(t))await this.client.core.pairing.disconnect({topic:t});else{const{message:s}=w("MISMATCHED_TOPIC",`Session or pairing topic not found: ${t}`);throw new Error(s)}}),c(this,"find",e=>(this.isInitialized(),this.client.session.getAll().filter(t=>Gt(t,e)))),c(this,"getPendingSessionRequests",()=>this.client.pendingRequest.getAll()),c(this,"authenticate",async(e,t)=>{var s;this.isInitialized(),this.isValidAuthenticate(e);const i=t&&this.client.core.linkModeSupportedApps.includes(t)&&((s=this.client.metadata.redirect)==null?void 0:s.linkMode),r=i?T.link_mode:T.relay;r===T.relay&&await this.confirmOnlineStateOrThrow();const{chains:o,statement:a="",uri:l,domain:u,nonce:g,type:h,exp:d,nbf:y,methods:m=[],expiry:I}=e,p=[...e.resources||[]],{topic:E,uri:V}=await this.client.core.pairing.create({methods:["wc_sessionAuthenticate"],transportType:r});this.client.logger.info({message:"Generated new pairing",pairing:{topic:E,uri:V}});const q=await this.client.core.crypto.generateKeyPair(),R=be(q);if(await Promise.all([this.client.auth.authKeys.set(le,{responseTopic:R,publicKey:q}),this.client.auth.pairingTopics.set(R,{topic:R,pairingTopic:E})]),await this.client.core.relayer.subscribe(R,{transportType:r}),this.client.logger.info(`sending request to new pairing topic: ${E}`),m.length>0){const{namespace:b}=Ae(o[0]);let L=Ft(b,"request",m);Ce(p)&&(L=jt(L,p.pop())),p.push(L)}const D=I&&I>N.wc_sessionAuthenticate.req.ttl?I:N.wc_sessionAuthenticate.req.ttl,ee={authPayload:{type:h??"caip122",chains:o,statement:a,aud:l,domain:u,version:"1",nonce:g,iat:new Date().toISOString(),exp:d,nbf:y,resources:p},requester:{publicKey:q,metadata:this.client.metadata},expiryTimestamp:C(D)},P={eip155:{chains:o,methods:[...new Set(["personal_sign",...m])],events:["chainChanged","accountsChanged"]}},X={requiredNamespaces:{},optionalNamespaces:P,relays:[{protocol:"irn"}],pairingTopic:E,proposer:{publicKey:q,metadata:this.client.metadata},expiryTimestamp:C(N.wc_sessionPropose.req.ttl),id:G()},{done:ft,resolve:Fe,reject:Re}=Z(D,"Request expired"),te=G(),pe=f("session_connect",X.id),fe=f("session_request",te),he=async({error:b,session:L})=>{this.events.off(fe,Ie),b?Re(b):L&&Fe({session:L})},Ie=async b=>{var L,je,Qe;if(await this.deletePendingAuthRequest(te,{message:"fulfilled",code:0}),b.error){const ie=O("WC_METHOD_UNSUPPORTED","wc_sessionAuthenticate");return b.error.code===ie.code?void 0:(this.events.off(pe,he),Re(b.error.message))}await this.deleteProposal(X.id),this.events.off(pe,he);const{cacaos:He,responder:Q}=b.result,qe=[],ze=[];for(const ie of He){await et({cacao:ie,projectId:this.client.core.projectId})||(this.client.logger.error(ie,"Signature verification failed"),Re(O("SESSION_SETTLEMENT_FAILED","Signature verification failed")));const{p:Te}=ie,Ne=Ce(Te.resources),Ye=[tt(Te.iss)],It=st(Te.iss);if(Ne){const Pe=it(Ne),vt=rt(Ne);qe.push(...Pe),Ye.push(...vt)}for(const Pe of Ye)ze.push(`${Pe}:${It}`)}const se=await this.client.core.crypto.generateSharedKey(q,Q.publicKey);let de;qe.length>0&&(de={topic:se,acknowledged:!0,self:{publicKey:q,metadata:this.client.metadata},peer:Q,controller:Q.publicKey,expiry:C(Y),requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:E,namespaces:nt([...new Set(qe)],[...new Set(ze)]),transportType:r},await this.client.core.relayer.subscribe(se,{transportType:r}),await this.client.session.set(se,de),E&&await this.client.core.pairing.updateMetadata({topic:E,metadata:Q.metadata}),de=this.client.session.get(se)),(L=this.client.metadata.redirect)!=null&&L.linkMode&&(je=Q.metadata.redirect)!=null&&je.linkMode&&(Qe=Q.metadata.redirect)!=null&&Qe.universal&&t&&(this.client.core.addLinkModeSupportedApp(Q.metadata.redirect.universal),this.client.session.update(se,{transportType:T.link_mode})),Fe({auths:He,session:de})};this.events.once(pe,he),this.events.once(fe,Ie);let ve;try{if(i){const b=we("wc_sessionAuthenticate",ee,te);this.client.core.history.set(E,b);const L=await this.client.core.crypto.encode("",b,{type:Qt,encoding:ne});ve=ge(t,E,L)}else await Promise.all([this.sendRequest({topic:E,method:"wc_sessionAuthenticate",params:ee,expiry:e.expiry,throwOnFailedPublish:!0,clientRpcId:te}),this.sendRequest({topic:E,method:"wc_sessionPropose",params:X,expiry:N.wc_sessionPropose.req.ttl,throwOnFailedPublish:!0,clientRpcId:X.id})])}catch(b){throw this.events.off(pe,he),this.events.off(fe,Ie),b}return await this.setProposal(X.id,X),await this.setAuthRequest(te,{request:x(v({},ee),{verifyContext:{}}),pairingTopic:E,transportType:r}),{uri:ve??V,response:ft}}),c(this,"approveSessionAuthenticate",async e=>{const{id:t,auths:s}=e,i=this.client.core.eventClient.createEvent({properties:{topic:t.toString(),trace:[z.authenticated_session_approve_started]}});try{this.isInitialized()}catch(I){throw i.setError(re.no_internet_connection),I}const r=this.getPendingAuthRequest(t);if(!r)throw i.setError(re.authenticated_session_pending_request_not_found),new Error(`Could not find pending auth request with id ${t}`);const o=r.transportType||T.relay;o===T.relay&&await this.confirmOnlineStateOrThrow();const a=r.requester.publicKey,l=await this.client.core.crypto.generateKeyPair(),u=be(a),g={type:Ve,receiverPublicKey:a,senderPublicKey:l},h=[],d=[];for(const I of s){if(!await et({cacao:I,projectId:this.client.core.projectId})){i.setError(re.invalid_cacao);const R=O("SESSION_SETTLEMENT_FAILED","Signature verification failed");throw await this.sendError({id:t,topic:u,error:R,encodeOpts:g}),new Error(R.message)}i.addTrace(z.cacaos_verified);const{p}=I,E=Ce(p.resources),V=[tt(p.iss)],q=st(p.iss);if(E){const R=it(E),D=rt(E);h.push(...R),V.push(...D)}for(const R of V)d.push(`${R}:${q}`)}const y=await this.client.core.crypto.generateSharedKey(l,a);i.addTrace(z.create_authenticated_session_topic);let m;if(h?.length>0){m={topic:y,acknowledged:!0,self:{publicKey:l,metadata:this.client.metadata},peer:{publicKey:a,metadata:r.requester.metadata},controller:a,expiry:C(Y),authentication:s,requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:r.pairingTopic,namespaces:nt([...new Set(h)],[...new Set(d)]),transportType:o},i.addTrace(z.subscribing_authenticated_session_topic);try{await this.client.core.relayer.subscribe(y,{transportType:o})}catch(I){throw i.setError(re.subscribe_authenticated_session_topic_failure),I}i.addTrace(z.subscribe_authenticated_session_topic_success),await this.client.session.set(y,m),i.addTrace(z.store_authenticated_session),await this.client.core.pairing.updateMetadata({topic:r.pairingTopic,metadata:r.requester.metadata})}i.addTrace(z.publishing_authenticated_session_approve);try{await this.sendResult({topic:u,id:t,result:{cacaos:s,responder:{publicKey:l,metadata:this.client.metadata}},encodeOpts:g,throwOnFailedPublish:!0,appLink:this.getAppLinkIfEnabled(r.requester.metadata,o)})}catch(I){throw i.setError(re.authenticated_session_approve_publish_failure),I}return await this.client.auth.requests.delete(t,{message:"fulfilled",code:0}),await this.client.core.pairing.activate({topic:r.pairingTopic}),this.client.core.eventClient.deleteEvent({eventId:i.eventId}),{session:m}}),c(this,"rejectSessionAuthenticate",async e=>{this.isInitialized();const{id:t,reason:s}=e,i=this.getPendingAuthRequest(t);if(!i)throw new Error(`Could not find pending auth request with id ${t}`);i.transportType===T.relay&&await this.confirmOnlineStateOrThrow();const r=i.requester.publicKey,o=await this.client.core.crypto.generateKeyPair(),a=be(r),l={type:Ve,receiverPublicKey:r,senderPublicKey:o};await this.sendError({id:t,topic:a,error:s,encodeOpts:l,rpcOpts:N.wc_sessionAuthenticate.reject,appLink:this.getAppLinkIfEnabled(i.requester.metadata,i.transportType)}),await this.client.auth.requests.delete(t,{message:"rejected",code:0}),await this.client.proposal.delete(t,O("USER_DISCONNECTED"))}),c(this,"formatAuthMessage",e=>{this.isInitialized();const{request:t,iss:s}=e;return Ht(t,s)}),c(this,"processRelayMessageCache",()=>{setTimeout(async()=>{if(this.relayMessageCache.length!==0)for(;this.relayMessageCache.length>0;)try{const e=this.relayMessageCache.shift();e&&await this.onRelayMessage(e)}catch(e){this.client.logger.error(e)}},50)}),c(this,"cleanupDuplicatePairings",async e=>{if(e.pairingTopic)try{const t=this.client.core.pairing.pairings.get(e.pairingTopic),s=this.client.core.pairing.pairings.getAll().filter(i=>{var r,o;return((r=i.peerMetadata)==null?void 0:r.url)&&((o=i.peerMetadata)==null?void 0:o.url)===e.peer.metadata.url&&i.topic&&i.topic!==t.topic});if(s.length===0)return;this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`),await Promise.all(s.map(i=>this.client.core.pairing.disconnect({topic:i.topic}))),this.client.logger.info("Duplicate pairings clean up finished")}catch(t){this.client.logger.error(t)}}),c(this,"deleteSession",async e=>{var t;const{topic:s,expirerHasDeleted:i=!1,emitEvent:r=!0,id:o=0}=e,{self:a}=this.client.session.get(s);await this.client.core.relayer.unsubscribe(s),await this.client.session.delete(s,O("USER_DISCONNECTED")),this.addToRecentlyDeleted(s,"session"),this.client.core.crypto.keychain.has(a.publicKey)&&await this.client.core.crypto.deleteKeyPair(a.publicKey),this.client.core.crypto.keychain.has(s)&&await this.client.core.crypto.deleteSymKey(s),i||this.client.core.expirer.del(s),this.client.core.storage.removeItem(ke).catch(l=>this.client.logger.warn(l)),this.getPendingSessionRequests().forEach(l=>{l.topic===s&&this.deletePendingSessionRequest(l.id,O("USER_DISCONNECTED"))}),s===((t=this.sessionRequestQueue.queue[0])==null?void 0:t.topic)&&(this.sessionRequestQueue.state=$.idle),r&&this.client.events.emit("session_delete",{id:o,topic:s})}),c(this,"deleteProposal",async(e,t)=>{if(t)try{const s=this.client.proposal.get(e),i=this.client.core.eventClient.getEvent({topic:s.pairingTopic});i?.setError(H.proposal_expired)}catch{}await Promise.all([this.client.proposal.delete(e,O("USER_DISCONNECTED")),t?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"proposal")}),c(this,"deletePendingSessionRequest",async(e,t,s=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"request"),this.sessionRequestQueue.queue=this.sessionRequestQueue.queue.filter(i=>i.id!==e),s&&(this.sessionRequestQueue.state=$.idle,this.client.events.emit("session_request_expire",{id:e}))}),c(this,"deletePendingAuthRequest",async(e,t,s=!1)=>{await Promise.all([this.client.auth.requests.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)])}),c(this,"setExpiry",async(e,t)=>{this.client.session.keys.includes(e)&&(this.client.core.expirer.set(e,t),await this.client.session.update(e,{expiry:t}))}),c(this,"setProposal",async(e,t)=>{this.client.core.expirer.set(e,C(N.wc_sessionPropose.req.ttl)),await this.client.proposal.set(e,t)}),c(this,"setAuthRequest",async(e,t)=>{const{request:s,pairingTopic:i,transportType:r=T.relay}=t;this.client.core.expirer.set(e,s.expiryTimestamp),await this.client.auth.requests.set(e,{authPayload:s.authPayload,requester:s.requester,expiryTimestamp:s.expiryTimestamp,id:e,pairingTopic:i,verifyContext:s.verifyContext,transportType:r})}),c(this,"setPendingSessionRequest",async e=>{const{id:t,topic:s,params:i,verifyContext:r}=e,o=i.request.expiryTimestamp||C(N.wc_sessionRequest.req.ttl);this.client.core.expirer.set(t,o),await this.client.pendingRequest.set(t,{id:t,topic:s,params:i,verifyContext:r})}),c(this,"sendRequest",async e=>{const{topic:t,method:s,params:i,expiry:r,relayRpcId:o,clientRpcId:a,throwOnFailedPublish:l,appLink:u,tvf:g}=e,h=we(s,i,a);let d;const y=!!u;try{const p=y?ne:ue;d=await this.client.core.crypto.encode(t,h,{encoding:p})}catch(p){throw await this.cleanup(),this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`),p}let m;if(gt.includes(s)){const p=B(JSON.stringify(h)),E=B(d);m=await this.client.core.verify.register({id:E,decryptedId:p})}const I=N[s].req;if(I.attestation=m,r&&(I.ttl=r),o&&(I.id=o),this.client.core.history.set(t,h),y){const p=ge(u,t,d);await global.Linking.openURL(p,this.client.name)}else{const p=N[s].req;r&&(p.ttl=r),o&&(p.id=o),p.tvf=x(v({},g),{correlationId:h.id}),l?(p.internal=x(v({},p.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(t,d,p)):this.client.core.relayer.publish(t,d,p).catch(E=>this.client.logger.error(E))}return h.id}),c(this,"sendResult",async e=>{const{id:t,topic:s,result:i,throwOnFailedPublish:r,encodeOpts:o,appLink:a}=e,l=ds(t,i);let u;const g=a&&typeof(global==null?void 0:global.Linking)<"u";try{const y=g?ne:ue;u=await this.client.core.crypto.encode(s,l,x(v({},o||{}),{encoding:y}))}catch(y){throw await this.cleanup(),this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`),y}let h,d;try{h=await this.client.core.history.get(s,t);const y=h.request;try{this.shouldSetTVF(y.method,y.params)&&(d=this.getTVFParams(t,y.params,i))}catch(m){this.client.logger.warn("sendResult() -> getTVFParams() failed",m)}}catch(y){throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`),y}if(g){const y=ge(a,s,u);await global.Linking.openURL(y,this.client.name)}else{const y=h.request.method,m=N[y].res;m.tvf=x(v({},d),{correlationId:t}),r?(m.internal=x(v({},m.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(s,u,m)):this.client.core.relayer.publish(s,u,m).catch(I=>this.client.logger.error(I))}await this.client.core.history.resolve(l)}),c(this,"sendError",async e=>{const{id:t,topic:s,error:i,encodeOpts:r,rpcOpts:o,appLink:a}=e,l=us(t,i);let u;const g=a&&typeof(global==null?void 0:global.Linking)<"u";try{const d=g?ne:ue;u=await this.client.core.crypto.encode(s,l,x(v({},r||{}),{encoding:d}))}catch(d){throw await this.cleanup(),this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`),d}let h;try{h=await this.client.core.history.get(s,t)}catch(d){throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`),d}if(g){const d=ge(a,s,u);await global.Linking.openURL(d,this.client.name)}else{const d=h.request.method,y=o||N[d].res;this.client.core.relayer.publish(s,u,y)}await this.client.core.history.resolve(l)}),c(this,"cleanup",async()=>{const e=[],t=[];this.client.session.getAll().forEach(s=>{let i=!1;W(s.expiry)&&(i=!0),this.client.core.crypto.keychain.has(s.topic)||(i=!0),i&&e.push(s.topic)}),this.client.proposal.getAll().forEach(s=>{W(s.expiryTimestamp)&&t.push(s.id)}),await Promise.all([...e.map(s=>this.deleteSession({topic:s})),...t.map(s=>this.deleteProposal(s))])}),c(this,"onRelayEventRequest",async e=>{this.requestQueue.queue.push(e),await this.processRequestsQueue()}),c(this,"processRequestsQueue",async()=>{if(this.requestQueue.state===$.active){this.client.logger.info("Request queue already active, skipping...");return}for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`);this.requestQueue.queue.length>0;){this.requestQueue.state=$.active;const e=this.requestQueue.queue.shift();if(e)try{await this.processRequest(e)}catch(t){this.client.logger.warn(t)}}this.requestQueue.state=$.idle}),c(this,"processRequest",async e=>{const{topic:t,payload:s,attestation:i,transportType:r,encryptedId:o}=e,a=s.method;if(!this.shouldIgnorePairingRequest({topic:t,requestMethod:a}))switch(a){case"wc_sessionPropose":return await this.onSessionProposeRequest({topic:t,payload:s,attestation:i,encryptedId:o});case"wc_sessionSettle":return await this.onSessionSettleRequest(t,s);case"wc_sessionUpdate":return await this.onSessionUpdateRequest(t,s);case"wc_sessionExtend":return await this.onSessionExtendRequest(t,s);case"wc_sessionPing":return await this.onSessionPingRequest(t,s);case"wc_sessionDelete":return await this.onSessionDeleteRequest(t,s);case"wc_sessionRequest":return await this.onSessionRequest({topic:t,payload:s,attestation:i,encryptedId:o,transportType:r});case"wc_sessionEvent":return await this.onSessionEventRequest(t,s);case"wc_sessionAuthenticate":return await this.onSessionAuthenticateRequest({topic:t,payload:s,attestation:i,encryptedId:o,transportType:r});default:return this.client.logger.info(`Unsupported request method ${a}`)}}),c(this,"onRelayEventResponse",async e=>{const{topic:t,payload:s,transportType:i}=e,r=(await this.client.core.history.get(t,s.id)).request.method;switch(r){case"wc_sessionPropose":return this.onSessionProposeResponse(t,s,i);case"wc_sessionSettle":return this.onSessionSettleResponse(t,s);case"wc_sessionUpdate":return this.onSessionUpdateResponse(t,s);case"wc_sessionExtend":return this.onSessionExtendResponse(t,s);case"wc_sessionPing":return this.onSessionPingResponse(t,s);case"wc_sessionRequest":return this.onSessionRequestResponse(t,s);case"wc_sessionAuthenticate":return this.onSessionAuthenticateResponse(t,s);default:return this.client.logger.info(`Unsupported response method ${r}`)}}),c(this,"onRelayEventUnknownPayload",e=>{const{topic:t}=e,{message:s}=w("MISSING_OR_INVALID",`Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);throw new Error(s)}),c(this,"shouldIgnorePairingRequest",e=>{const{topic:t,requestMethod:s}=e,i=this.expectedPairingMethodMap.get(t);return!i||i.includes(s)?!1:!!(i.includes("wc_sessionAuthenticate")&&this.client.events.listenerCount("session_authenticate")>0)}),c(this,"onSessionProposeRequest",async e=>{const{topic:t,payload:s,attestation:i,encryptedId:r}=e,{params:o,id:a}=s;try{const l=this.client.core.eventClient.getEvent({topic:t});this.client.events.listenerCount("session_proposal")===0&&(console.warn("No listener for session_proposal event"),l?.setError(Nt.proposal_listener_not_found)),this.isValidConnect(v({},s.params));const u=o.expiryTimestamp||C(N.wc_sessionPropose.req.ttl),g=v({id:a,pairingTopic:t,expiryTimestamp:u},o);await this.setProposal(a,g);const h=await this.getVerifyContext({attestationId:i,hash:B(JSON.stringify(s)),encryptedId:r,metadata:g.proposer.metadata});l?.addTrace(Pt.emit_session_proposal),this.client.events.emit("session_proposal",{id:a,params:g,verifyContext:h})}catch(l){await this.sendError({id:a,topic:t,error:l,rpcOpts:N.wc_sessionPropose.autoReject}),this.client.logger.error(l)}}),c(this,"onSessionProposeResponse",async(e,t,s)=>{const{id:i}=t;if(F(t)){const{result:r}=t;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:r});const o=this.client.proposal.get(i);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:o});const a=o.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:a});const l=r.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:l});const u=await this.client.core.crypto.generateSharedKey(a,l);this.pendingSessions.set(i,{sessionTopic:u,pairingTopic:e,proposalId:i,publicKey:a});const g=await this.client.core.relayer.subscribe(u,{transportType:s});this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:g}),await this.client.core.pairing.activate({topic:e})}else if(j(t)){await this.client.proposal.delete(i,O("USER_DISCONNECTED"));const r=f("session_connect",i);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners, 954`);this.events.emit(r,{error:t.error})}}),c(this,"onSessionSettleRequest",async(e,t)=>{const{id:s,params:i}=t;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:o,expiry:a,namespaces:l,sessionProperties:u,sessionConfig:g}=t.params,h=[...this.pendingSessions.values()].find(m=>m.sessionTopic===e);if(!h)return this.client.logger.error(`Pending session not found for topic ${e}`);const d=this.client.proposal.get(h.proposalId),y=x(v(v({topic:e,relay:r,expiry:a,namespaces:l,acknowledged:!0,pairingTopic:h.pairingTopic,requiredNamespaces:d.requiredNamespaces,optionalNamespaces:d.optionalNamespaces,controller:o.publicKey,self:{publicKey:h.publicKey,metadata:this.client.metadata},peer:{publicKey:o.publicKey,metadata:o.metadata}},u&&{sessionProperties:u}),g&&{sessionConfig:g}),{transportType:T.relay});await this.client.session.set(y.topic,y),await this.setExpiry(y.topic,y.expiry),await this.client.core.pairing.updateMetadata({topic:h.pairingTopic,metadata:y.peer.metadata}),this.client.events.emit("session_connect",{session:y}),this.events.emit(f("session_connect",h.proposalId),{session:y}),this.pendingSessions.delete(h.proposalId),this.deleteProposal(h.proposalId,!1),this.cleanupDuplicatePairings(y),await this.sendResult({id:t.id,topic:e,result:!0,throwOnFailedPublish:!0})}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"onSessionSettleResponse",async(e,t)=>{const{id:s}=t;F(t)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(f("session_approve",s),{})):j(t)&&(await this.client.session.delete(e,O("USER_DISCONNECTED")),this.events.emit(f("session_approve",s),{error:t.error}))}),c(this,"onSessionUpdateRequest",async(e,t)=>{const{params:s,id:i}=t;try{const r=`${e}_session_update`,o=oe.get(r);if(o&&this.isRequestOutOfSync(o,i)){this.client.logger.warn(`Discarding out of sync request - ${i}`),this.sendError({id:i,topic:e,error:O("INVALID_UPDATE_REQUEST")});return}this.isValidUpdate(v({topic:e},s));try{oe.set(r,i),await this.client.session.update(e,{namespaces:s.namespaces}),await this.sendResult({id:i,topic:e,result:!0,throwOnFailedPublish:!0})}catch(a){throw oe.delete(r),a}this.client.events.emit("session_update",{id:i,topic:e,params:s})}catch(r){await this.sendError({id:i,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"isRequestOutOfSync",(e,t)=>t.toString().slice(0,-3)<e.toString().slice(0,-3)),c(this,"onSessionUpdateResponse",(e,t)=>{const{id:s}=t,i=f("session_update",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);F(t)?this.events.emit(f("session_update",s),{}):j(t)&&this.events.emit(f("session_update",s),{error:t.error})}),c(this,"onSessionExtendRequest",async(e,t)=>{const{id:s}=t;try{this.isValidExtend({topic:e}),await this.setExpiry(e,C(Y)),await this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_extend",{id:s,topic:e})}catch(i){await this.sendError({id:s,topic:e,error:i}),this.client.logger.error(i)}}),c(this,"onSessionExtendResponse",(e,t)=>{const{id:s}=t,i=f("session_extend",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);F(t)?this.events.emit(f("session_extend",s),{}):j(t)&&this.events.emit(f("session_extend",s),{error:t.error})}),c(this,"onSessionPingRequest",async(e,t)=>{const{id:s}=t;try{this.isValidPing({topic:e}),await this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_ping",{id:s,topic:e})}catch(i){await this.sendError({id:s,topic:e,error:i}),this.client.logger.error(i)}}),c(this,"onSessionPingResponse",(e,t)=>{const{id:s}=t,i=f("session_ping",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);setTimeout(()=>{F(t)?this.events.emit(f("session_ping",s),{}):j(t)&&this.events.emit(f("session_ping",s),{error:t.error})},500)}),c(this,"onSessionDeleteRequest",async(e,t)=>{const{id:s}=t;try{this.isValidDisconnect({topic:e,reason:t.params}),Promise.all([new Promise(i=>{this.client.core.relayer.once(Xe.publish,async()=>{i(await this.deleteSession({topic:e,id:s}))})}),this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.cleanupPendingSentRequestsForTopic({topic:e,error:O("USER_DISCONNECTED")})]).catch(i=>this.client.logger.error(i))}catch(i){this.client.logger.error(i)}}),c(this,"onSessionRequest",async e=>{var t,s,i;const{topic:r,payload:o,attestation:a,encryptedId:l,transportType:u}=e,{id:g,params:h}=o;try{await this.isValidRequest(v({topic:r},h));const d=this.client.session.get(r),y=await this.getVerifyContext({attestationId:a,hash:B(JSON.stringify(we("wc_sessionRequest",h,g))),encryptedId:l,metadata:d.peer.metadata,transportType:u}),m={id:g,topic:r,params:h,verifyContext:y};await this.setPendingSessionRequest(m),u===T.link_mode&&(t=d.peer.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp((s=d.peer.metadata.redirect)==null?void 0:s.universal),(i=this.client.signConfig)!=null&&i.disableRequestQueue?this.emitSessionRequest(m):(this.addSessionRequestToSessionRequestQueue(m),this.processSessionRequestQueue())}catch(d){await this.sendError({id:g,topic:r,error:d}),this.client.logger.error(d)}}),c(this,"onSessionRequestResponse",(e,t)=>{const{id:s}=t,i=f("session_request",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);F(t)?this.events.emit(f("session_request",s),{result:t.result}):j(t)&&this.events.emit(f("session_request",s),{error:t.error})}),c(this,"onSessionEventRequest",async(e,t)=>{const{id:s,params:i}=t;try{const r=`${e}_session_event_${i.event.name}`,o=oe.get(r);if(o&&this.isRequestOutOfSync(o,s)){this.client.logger.info(`Discarding out of sync request - ${s}`);return}this.isValidEmit(v({topic:e},i)),this.client.events.emit("session_event",{id:s,topic:e,params:i}),oe.set(r,s)}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),c(this,"onSessionAuthenticateResponse",(e,t)=>{const{id:s}=t;this.client.logger.trace({type:"method",method:"onSessionAuthenticateResponse",topic:e,payload:t}),F(t)?this.events.emit(f("session_request",s),{result:t.result}):j(t)&&this.events.emit(f("session_request",s),{error:t.error})}),c(this,"onSessionAuthenticateRequest",async e=>{var t;const{topic:s,payload:i,attestation:r,encryptedId:o,transportType:a}=e;try{const{requester:l,authPayload:u,expiryTimestamp:g}=i.params,h=await this.getVerifyContext({attestationId:r,hash:B(JSON.stringify(i)),encryptedId:o,metadata:l.metadata,transportType:a}),d={requester:l,pairingTopic:s,id:i.id,authPayload:u,verifyContext:h,expiryTimestamp:g};await this.setAuthRequest(i.id,{request:d,pairingTopic:s,transportType:a}),a===T.link_mode&&(t=l.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp(l.metadata.redirect.universal),this.client.events.emit("session_authenticate",{topic:s,params:i.params,id:i.id,verifyContext:h})}catch(l){this.client.logger.error(l);const u=i.params.requester.publicKey,g=await this.client.core.crypto.generateKeyPair(),h=this.getAppLinkIfEnabled(i.params.requester.metadata,a),d={type:Ve,receiverPublicKey:u,senderPublicKey:g};await this.sendError({id:i.id,topic:s,error:l,encodeOpts:d,rpcOpts:N.wc_sessionAuthenticate.autoReject,appLink:h})}}),c(this,"addSessionRequestToSessionRequestQueue",e=>{this.sessionRequestQueue.queue.push(e)}),c(this,"cleanupAfterResponse",e=>{this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0}),setTimeout(()=>{this.sessionRequestQueue.state=$.idle,this.processSessionRequestQueue()},Oe(this.requestQueueDelay))}),c(this,"cleanupPendingSentRequestsForTopic",({topic:e,error:t})=>{const s=this.client.core.history.pending;s.length>0&&s.filter(i=>i.topic===e&&i.request.method==="wc_sessionRequest").forEach(i=>{const r=i.request.id,o=f("session_request",r);if(this.events.listenerCount(o)===0)throw new Error(`emitting ${o} without any listeners`);this.events.emit(f("session_request",i.request.id),{error:t})})}),c(this,"processSessionRequestQueue",()=>{if(this.sessionRequestQueue.state===$.active){this.client.logger.info("session request queue is already active.");return}const e=this.sessionRequestQueue.queue[0];if(!e){this.client.logger.info("session request queue is empty.");return}try{this.sessionRequestQueue.state=$.active,this.emitSessionRequest(e)}catch(t){this.client.logger.error(t)}}),c(this,"emitSessionRequest",e=>{this.client.events.emit("session_request",e)}),c(this,"onPairingCreated",e=>{if(e.methods&&this.expectedPairingMethodMap.set(e.topic,e.methods),e.active)return;const t=this.client.proposal.getAll().find(s=>s.pairingTopic===e.topic);t&&this.onSessionProposeRequest({topic:e.topic,payload:we("wc_sessionPropose",{requiredNamespaces:t.requiredNamespaces,optionalNamespaces:t.optionalNamespaces,relays:t.relays,proposer:t.proposer,sessionProperties:t.sessionProperties},t.id)})}),c(this,"isValidConnect",async e=>{if(!k(e)){const{message:a}=w("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(a)}const{pairingTopic:t,requiredNamespaces:s,optionalNamespaces:i,sessionProperties:r,relays:o}=e;if(ae(t)||await this.isValidPairingTopic(t),!zt(o,!0)){const{message:a}=w("MISSING_OR_INVALID",`connect() relays: ${o}`);throw new Error(a)}!ae(s)&&ot(s)!==0&&this.validateNamespaces(s,"requiredNamespaces"),!ae(i)&&ot(i)!==0&&this.validateNamespaces(i,"optionalNamespaces"),ae(r)||this.validateSessionProps(r,"sessionProperties")}),c(this,"validateNamespaces",(e,t)=>{const s=Yt(e,"connect()",t);if(s)throw new Error(s.message)}),c(this,"isValidApprove",async e=>{if(!k(e))throw new Error(w("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:t,namespaces:s,relayProtocol:i,sessionProperties:r}=e;this.checkRecentlyDeleted(t),await this.isValidProposalId(t);const o=this.client.proposal.get(t),a=xe(s,"approve()");if(a)throw new Error(a.message);const l=at(o.requiredNamespaces,s,"approve()");if(l)throw new Error(l.message);if(!U(i,!0)){const{message:u}=w("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(u)}ae(r)||this.validateSessionProps(r,"sessionProperties")}),c(this,"isValidReject",async e=>{if(!k(e)){const{message:i}=w("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(i)}const{id:t,reason:s}=e;if(this.checkRecentlyDeleted(t),await this.isValidProposalId(t),!Xt(s)){const{message:i}=w("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(s)}`);throw new Error(i)}}),c(this,"isValidSessionSettleRequest",e=>{if(!k(e)){const{message:l}=w("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(l)}const{relay:t,controller:s,namespaces:i,expiry:r}=e;if(!Jt(t)){const{message:l}=w("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(l)}const o=Bt(s,"onSessionSettleRequest()");if(o)throw new Error(o.message);const a=xe(i,"onSessionSettleRequest()");if(a)throw new Error(a.message);if(W(r)){const{message:l}=w("EXPIRED","onSessionSettleRequest()");throw new Error(l)}}),c(this,"isValidUpdate",async e=>{if(!k(e)){const{message:a}=w("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(a)}const{topic:t,namespaces:s}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const i=this.client.session.get(t),r=xe(s,"update()");if(r)throw new Error(r.message);const o=at(i.requiredNamespaces,s,"update()");if(o)throw new Error(o.message)}),c(this,"isValidExtend",async e=>{if(!k(e)){const{message:s}=w("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(s)}const{topic:t}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t)}),c(this,"isValidRequest",async e=>{if(!k(e)){const{message:a}=w("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(a)}const{topic:t,request:s,chainId:i,expiry:r}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const{namespaces:o}=this.client.session.get(t);if(!ct(o,i)){const{message:a}=w("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(a)}if(!Wt(s)){const{message:a}=w("MISSING_OR_INVALID",`request() ${JSON.stringify(s)}`);throw new Error(a)}if(!Zt(o,i,s.method)){const{message:a}=w("MISSING_OR_INVALID",`request() method: ${s.method}`);throw new Error(a)}if(r&&!es(r,Ee)){const{message:a}=w("MISSING_OR_INVALID",`request() expiry: ${r}. Expiry must be a number (in seconds) between ${Ee.min} and ${Ee.max}`);throw new Error(a)}}),c(this,"isValidRespond",async e=>{var t;if(!k(e)){const{message:r}=w("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(r)}const{topic:s,response:i}=e;try{await this.isValidSessionTopic(s)}catch(r){throw(t=e?.response)!=null&&t.id&&this.cleanupAfterResponse(e),r}if(!ts(i)){const{message:r}=w("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(i)}`);throw new Error(r)}}),c(this,"isValidPing",async e=>{if(!k(e)){const{message:s}=w("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),c(this,"isValidEmit",async e=>{if(!k(e)){const{message:o}=w("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(o)}const{topic:t,event:s,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:r}=this.client.session.get(t);if(!ct(r,i)){const{message:o}=w("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(o)}if(!ss(s)){const{message:o}=w("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(o)}if(!is(r,i,s.name)){const{message:o}=w("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(o)}}),c(this,"isValidDisconnect",async e=>{if(!k(e)){const{message:s}=w("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),c(this,"isValidAuthenticate",e=>{const{chains:t,uri:s,domain:i,nonce:r}=e;if(!Array.isArray(t)||t.length===0)throw new Error("chains is required and must be a non-empty array");if(!U(s,!1))throw new Error("uri is required parameter");if(!U(i,!1))throw new Error("domain is required parameter");if(!U(r,!1))throw new Error("nonce is required parameter");if([...new Set(t.map(a=>Ae(a).namespace))].length>1)throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");const{namespace:o}=Ae(t[0]);if(o!=="eip155")throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.")}),c(this,"getVerifyContext",async e=>{const{attestationId:t,hash:s,encryptedId:i,metadata:r,transportType:o}=e,a={verified:{verifyUrl:r.verifyUrl||Ot,validation:"UNKNOWN",origin:r.url||""}};try{if(o===T.link_mode){const u=this.getAppLinkIfEnabled(r,o);return a.verified.validation=u&&new URL(u).origin===new URL(r.url).origin?"VALID":"INVALID",a}const l=await this.client.core.verify.resolve({attestationId:t,hash:s,encryptedId:i,verifyUrl:r.verifyUrl});l&&(a.verified.origin=l.origin,a.verified.isScam=l.isScam,a.verified.validation=l.origin===new URL(r.url).origin?"VALID":"INVALID")}catch(l){this.client.logger.warn(l)}return this.client.logger.debug(`Verify context: ${JSON.stringify(a)}`),a}),c(this,"validateSessionProps",(e,t)=>{Object.values(e).forEach(s=>{if(!U(s,!1)){const{message:i}=w("MISSING_OR_INVALID",`${t} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);throw new Error(i)}})}),c(this,"getPendingAuthRequest",e=>{const t=this.client.auth.requests.get(e);return typeof t=="object"?t:void 0}),c(this,"addToRecentlyDeleted",(e,t)=>{if(this.recentlyDeletedMap.set(e,t),this.recentlyDeletedMap.size>=this.recentlyDeletedLimit){let s=0;const i=this.recentlyDeletedLimit/2;for(const r of this.recentlyDeletedMap.keys()){if(s++>=i)break;this.recentlyDeletedMap.delete(r)}}}),c(this,"checkRecentlyDeleted",e=>{const t=this.recentlyDeletedMap.get(e);if(t){const{message:s}=w("MISSING_OR_INVALID",`Record was recently deleted - ${t}: ${e}`);throw new Error(s)}}),c(this,"isLinkModeEnabled",(e,t)=>{var s,i,r,o,a,l,u,g,h;return!e||t!==T.link_mode?!1:((i=(s=this.client.metadata)==null?void 0:s.redirect)==null?void 0:i.linkMode)===!0&&((o=(r=this.client.metadata)==null?void 0:r.redirect)==null?void 0:o.universal)!==void 0&&((l=(a=this.client.metadata)==null?void 0:a.redirect)==null?void 0:l.universal)!==""&&((u=e?.redirect)==null?void 0:u.universal)!==void 0&&((g=e?.redirect)==null?void 0:g.universal)!==""&&((h=e?.redirect)==null?void 0:h.linkMode)===!0&&this.client.core.linkModeSupportedApps.includes(e.redirect.universal)&&typeof(global==null?void 0:global.Linking)<"u"}),c(this,"getAppLinkIfEnabled",(e,t)=>{var s;return this.isLinkModeEnabled(e,t)?(s=e?.redirect)==null?void 0:s.universal:void 0}),c(this,"handleLinkModeMessage",({url:e})=>{if(!e||!e.includes("wc_ev")||!e.includes("topic"))return;const t=lt(e,"topic")||"",s=decodeURIComponent(lt(e,"wc_ev")||""),i=this.client.session.keys.includes(t);i&&this.client.session.update(t,{transportType:T.link_mode}),this.client.core.dispatchEnvelope({topic:t,message:s,sessionExists:i})}),c(this,"registerLinkModeListeners",async()=>{var e;if(rs()||ns()&&(e=this.client.metadata.redirect)!=null&&e.linkMode){const t=global==null?void 0:global.Linking;if(typeof t<"u"){t.addEventListener("url",this.handleLinkModeMessage,this.client.name);const s=await t.getInitialURL();s&&setTimeout(()=>{this.handleLinkModeMessage({url:s})},50)}}}),c(this,"shouldSetTVF",(e,t)=>{if(!t||e!=="wc_sessionRequest")return!1;const{request:s}=t;return Object.keys(Ke).includes(s.method)}),c(this,"getTVFParams",(e,t,s)=>{var i,r;try{const o=t.request.method,a=this.extractTxHashesFromResult(o,s);return x(v({correlationId:e,rpcMethods:[o],chainId:t.chainId},this.isValidContractData(t.request.params)&&{contractAddresses:[(r=(i=t.request.params)==null?void 0:i[0])==null?void 0:r.to]}),{txHashes:a})}catch(o){this.client.logger.warn("Error getting TVF params",o)}return{}}),c(this,"isValidContractData",e=>{var t;if(!e)return!1;try{const s=e?.data||((t=e?.[0])==null?void 0:t.data);if(!s.startsWith("0x"))return!1;const i=s.slice(2);return/^[0-9a-fA-F]*$/.test(i)?i.length%2===0:!1}catch{}return!1}),c(this,"extractTxHashesFromResult",(e,t)=>{try{const s=Ke[e];if(typeof t=="string")return[t];const i=t[s.key];if(os(i))return i;if(typeof i=="string")return[i]}catch(s){this.client.logger.warn("Error extracting tx hashes from result",s)}return[]})}isInitialized(){if(!this.initialized){const{message:n}=w("NOT_INITIALIZED",this.name);throw new Error(n)}}async confirmOnlineStateOrThrow(){await this.client.core.relayer.confirmOnlineStateOrThrow()}registerRelayerEvents(){this.client.core.relayer.on(Xe.message,n=>{!this.initialized||this.relayMessageCache.length>0?this.relayMessageCache.push(n):this.onRelayMessage(n)})}async onRelayMessage(n){const{topic:e,message:t,attestation:s,transportType:i}=n,{publicKey:r}=this.client.auth.authKeys.keys.includes(le)?this.client.auth.authKeys.get(le):{responseTopic:void 0,publicKey:void 0},o=await this.client.core.crypto.decode(e,t,{receiverPublicKey:r,encoding:i===T.link_mode?ne:ue});try{ps(o)?(this.client.core.history.set(e,o),this.onRelayEventRequest({topic:e,payload:o,attestation:s,transportType:i,encryptedId:B(t)})):hs(o)?(await this.client.core.history.resolve(o),await this.onRelayEventResponse({topic:e,payload:o,transportType:i}),this.client.core.history.delete(e,o.id)):this.onRelayEventUnknownPayload({topic:e,payload:o,transportType:i})}catch(a){this.client.logger.error(a)}}registerExpirerEvents(){this.client.core.expirer.on(qt.expired,async n=>{const{topic:e,id:t}=kt(n.target);if(t&&this.client.pendingRequest.keys.includes(t))return await this.deletePendingSessionRequest(t,w("EXPIRED"),!0);if(t&&this.client.auth.requests.keys.includes(t))return await this.deletePendingAuthRequest(t,w("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession({topic:e,expirerHasDeleted:!0}),this.client.events.emit("session_expire",{topic:e})):t&&(await this.deleteProposal(t,!0),this.client.events.emit("proposal_expire",{id:t}))})}registerPairingEvents(){this.client.core.pairing.events.on(Je.create,n=>this.onPairingCreated(n)),this.client.core.pairing.events.on(Je.delete,n=>{this.addToRecentlyDeleted(n.topic,"pairing")})}isValidPairingTopic(n){if(!U(n,!1)){const{message:e}=w("MISSING_OR_INVALID",`pairing topic should be a string: ${n}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:e}=w("NO_MATCHING_KEY",`pairing topic doesn't exist: ${n}`);throw new Error(e)}if(W(this.client.core.pairing.pairings.get(n).expiry)){const{message:e}=w("EXPIRED",`pairing topic: ${n}`);throw new Error(e)}}async isValidSessionTopic(n){if(!U(n,!1)){const{message:e}=w("MISSING_OR_INVALID",`session topic should be a string: ${n}`);throw new Error(e)}if(this.checkRecentlyDeleted(n),!this.client.session.keys.includes(n)){const{message:e}=w("NO_MATCHING_KEY",`session topic doesn't exist: ${n}`);throw new Error(e)}if(W(this.client.session.get(n).expiry)){await this.deleteSession({topic:n});const{message:e}=w("EXPIRED",`session topic: ${n}`);throw new Error(e)}if(!this.client.core.crypto.keychain.has(n)){const{message:e}=w("MISSING_OR_INVALID",`session topic does not exist in keychain: ${n}`);throw await this.deleteSession({topic:n}),new Error(e)}}async isValidSessionOrPairingTopic(n){if(this.checkRecentlyDeleted(n),this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(U(n,!1)){const{message:e}=w("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${n}`);throw new Error(e)}else{const{message:e}=w("MISSING_OR_INVALID",`session or pairing topic should be a string: ${n}`);throw new Error(e)}}async isValidProposalId(n){if(!$t(n)){const{message:e}=w("MISSING_OR_INVALID",`proposal id should be a number: ${n}`);throw new Error(e)}if(!this.client.proposal.keys.includes(n)){const{message:e}=w("NO_MATCHING_KEY",`proposal id doesn't exist: ${n}`);throw new Error(e)}if(W(this.client.proposal.get(n).expiryTimestamp)){await this.deleteProposal(n);const{message:e}=w("EXPIRED",`proposal id: ${n}`);throw new Error(e)}}}class Ns extends J{constructor(n,e){super(n,e,pt,me),this.core=n,this.logger=e}}class Rt extends J{constructor(n,e){super(n,e,ht,me),this.core=n,this.logger=e}}class Ps extends J{constructor(n,e){super(n,e,ut,me,t=>t.id),this.core=n,this.logger=e}}class Os extends J{constructor(n,e){super(n,e,mt,ce,()=>le),this.core=n,this.logger=e}}class bs extends J{constructor(n,e){super(n,e,_t,ce),this.core=n,this.logger=e}}class As extends J{constructor(n,e){super(n,e,Et,ce,t=>t.id),this.core=n,this.logger=e}}var Cs=Object.defineProperty,xs=(S,n,e)=>n in S?Cs(S,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[n]=e,Ge=(S,n,e)=>xs(S,typeof n!="symbol"?n+"":n,e);class Vs{constructor(n,e){this.core=n,this.logger=e,Ge(this,"authKeys"),Ge(this,"pairingTopics"),Ge(this,"requests"),this.authKeys=new Os(this.core,this.logger),this.pairingTopics=new bs(this.core,this.logger),this.requests=new As(this.core,this.logger)}async init(){await this.authKeys.init(),await this.pairingTopics.init(),await this.requests.init()}}var Ds=Object.defineProperty,Ls=(S,n,e)=>n in S?Ds(S,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):S[n]=e,_=(S,n,e)=>Ls(S,typeof n!="symbol"?n+"":n,e);class Se extends Lt{constructor(n){super(n),_(this,"protocol",De),_(this,"version",Le),_(this,"name",_e.name),_(this,"metadata"),_(this,"core"),_(this,"logger"),_(this,"events",new ls),_(this,"engine"),_(this,"session"),_(this,"proposal"),_(this,"pendingRequest"),_(this,"auth"),_(this,"signConfig"),_(this,"on",(t,s)=>this.events.on(t,s)),_(this,"once",(t,s)=>this.events.once(t,s)),_(this,"off",(t,s)=>this.events.off(t,s)),_(this,"removeListener",(t,s)=>this.events.removeListener(t,s)),_(this,"removeAllListeners",t=>this.events.removeAllListeners(t)),_(this,"connect",async t=>{try{return await this.engine.connect(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"pair",async t=>{try{return await this.engine.pair(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"approve",async t=>{try{return await this.engine.approve(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"reject",async t=>{try{return await this.engine.reject(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"update",async t=>{try{return await this.engine.update(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"extend",async t=>{try{return await this.engine.extend(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"request",async t=>{try{return await this.engine.request(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"respond",async t=>{try{return await this.engine.respond(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"ping",async t=>{try{return await this.engine.ping(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"emit",async t=>{try{return await this.engine.emit(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"disconnect",async t=>{try{return await this.engine.disconnect(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"find",t=>{try{return this.engine.find(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"getPendingSessionRequests",()=>{try{return this.engine.getPendingSessionRequests()}catch(t){throw this.logger.error(t.message),t}}),_(this,"authenticate",async(t,s)=>{try{return await this.engine.authenticate(t,s)}catch(i){throw this.logger.error(i.message),i}}),_(this,"formatAuthMessage",t=>{try{return this.engine.formatAuthMessage(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"approveSessionAuthenticate",async t=>{try{return await this.engine.approveSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),_(this,"rejectSessionAuthenticate",async t=>{try{return await this.engine.rejectSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),this.name=n?.name||_e.name,this.metadata=n?.metadata||as(),this.signConfig=n?.signConfig;const e=typeof n?.logger<"u"&&typeof n?.logger!="string"?n.logger:At(Ct({level:n?.logger||_e.logger}));this.core=n?.core||new bt(n),this.logger=xt(e,this.name),this.session=new Rt(this.core,this.logger),this.proposal=new Ns(this.core,this.logger),this.pendingRequest=new Ps(this.core,this.logger),this.engine=new Ts(this),this.auth=new Vs(this.core,this.logger)}static async init(n){const e=new Se(n);return await e.initialize(),e}get context(){return Vt(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.auth.init(),await this.engine.init(),this.logger.info("SignClient Initialization Success"),setTimeout(()=>{this.engine.processRelayMessageCache()},Oe(Ze))}catch(n){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(n.message),n}}}const Ms=Rt,ks=Se;export{wt as AUTH_CONTEXT,mt as AUTH_KEYS_CONTEXT,_t as AUTH_PAIRING_TOPIC_CONTEXT,yt as AUTH_PROTOCOL,le as AUTH_PUBLIC_KEY_NAME,Et as AUTH_REQUEST_CONTEXT,ce as AUTH_STORAGE_PREFIX,Ss as AUTH_VERSION,dt as ENGINE_CONTEXT,$ as ENGINE_QUEUE_STATES,N as ENGINE_RPC_OPTS,ms as HISTORY_CONTEXT,ws as HISTORY_EVENTS,_s as HISTORY_STORAGE_VERSION,gt as METHODS_TO_VERIFY,pt as PROPOSAL_CONTEXT,Es as PROPOSAL_EXPIRY,$e as PROPOSAL_EXPIRY_MESSAGE,ut as REQUEST_CONTEXT,ht as SESSION_CONTEXT,Y as SESSION_EXPIRY,Ee as SESSION_REQUEST_EXPIRY_BOUNDARIES,Me as SIGN_CLIENT_CONTEXT,_e as SIGN_CLIENT_DEFAULT,gs as SIGN_CLIENT_EVENTS,De as SIGN_CLIENT_PROTOCOL,ys as SIGN_CLIENT_STORAGE_OPTIONS,me as SIGN_CLIENT_STORAGE_PREFIX,Le as SIGN_CLIENT_VERSION,Ms as SessionStore,ks as SignClient,Ke as TVF_METHODS,ke as WALLETCONNECT_DEEPLINK_CHOICE,Se as default};
//# sourceMappingURL=index.es.js.map
