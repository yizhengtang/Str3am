{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n  session_connect: \"session_connect\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n  private pendingSessions: Map<\n    number,\n    {\n      sessionTopic: string;\n      pairingTopic: string;\n      proposalId: number;\n      publicKey: string;\n    }\n  > = new Map();\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n      id: payloadId(),\n    };\n    const sessionConnectTarget = engineEvent(\"session_connect\", proposal.id);\n\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n\n    const proposalExpireHandler = ({ id }: { id: number }) => {\n      if (id === proposal.id) {\n        this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n        this.pendingSessions.delete(proposal.id);\n        // emit the event to trigger reject, this approach automatically cleans up the .once listener below\n        this.events.emit(sessionConnectTarget, {\n          error: { message: PROPOSAL_EXPIRY_MESSAGE, code: 0 },\n        });\n      }\n    };\n\n    this.client.events.on(\"proposal_expire\", proposalExpireHandler);\n    this.events.once<\"session_connect\">(sessionConnectTarget, ({ error, session }) => {\n      this.client.events.off(\"proposal_expire\", proposalExpireHandler);\n      if (error) reject(error);\n      else if (session) {\n        resolve(session);\n      }\n    });\n\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n      clientRpcId: proposal.id,\n    });\n\n    await this.setProposal(proposal.id, proposal);\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n    const shouldSetTVF = this.shouldSetTVF(protocolMethod, protocolRequestParams);\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          ...(shouldSetTVF && {\n            tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n          }),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n      id: payloadId(),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    const authenticateId = payloadId();\n    const sessionConnectEventTarget = engineEvent(\"session_connect\", proposal.id);\n    const authenticateEventTarget = engineEvent(\"session_request\", authenticateId);\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        resolve({\n          session,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(authenticateId, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(sessionConnectEventTarget, onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(proposal.id);\n      // cleanup listener for fallback response\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(sessionConnectEventTarget, onSessionConnect);\n    this.events.once(authenticateEventTarget, onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, authenticateId);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: authenticateId,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: proposal.id,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(sessionConnectEventTarget, onSessionConnect);\n      this.events.off(authenticateEventTarget, onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(proposal.id, proposal);\n    await this.setAuthRequest(authenticateId, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        if (this.shouldSetTVF(request.method as JsonRpcTypes.WcMethod, request.params)) {\n          tvf = this.getTVFParams(id, request.params, result);\n        }\n      } catch (error) {\n        this.client.logger.warn(`sendResult() -> getTVFParams() failed`, error);\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = ENGINE_RPC_OPTS[method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const method = record.request.method as JsonRpcTypes.WcMethod;\n      const opts = rpcOpts || ENGINE_RPC_OPTS[method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n      if (!this.initialized || this.relayMessageCache.length > 0) {\n        this.relayMessageCache.push(event);\n      } else {\n        this.onRelayMessage(event);\n      }\n    });\n  }\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    const payload = await this.client.core.crypto.decode(topic, message, {\n      receiverPublicKey: publicKey,\n      encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n    });\n    try {\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.pendingSessions.set(id, {\n        sessionTopic,\n        pairingTopic: topic,\n        proposalId: id,\n        publicKey: selfPublicKey,\n      });\n\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\", id);\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(target, { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\n        payload.params;\n      const pendingSession = [...this.pendingSessions.values()].find(\n        (s) => s.sessionTopic === topic,\n      );\n\n      if (!pendingSession) {\n        return this.client.logger.error(`Pending session not found for topic ${topic}`);\n      }\n\n      const proposal = this.client.proposal.get(pendingSession.proposalId);\n\n      const session: SessionTypes.Struct = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: pendingSession.pairingTopic,\n        requiredNamespaces: proposal.requiredNamespaces,\n        optionalNamespaces: proposal.optionalNamespaces,\n        controller: controller.publicKey,\n        self: {\n          publicKey: pendingSession.publicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n\n      await this.client.session.set(session.topic, session);\n      await this.setExpiry(session.topic, session.expiry);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingSession.pairingTopic,\n        metadata: session.peer.metadata,\n      });\n\n      this.client.events.emit(\"session_connect\", { session });\n      this.events.emit(engineEvent(\"session_connect\", pendingSession.proposalId), { session });\n\n      this.pendingSessions.delete(pendingSession.proposalId);\n      this.deleteProposal(pendingSession.proposalId, false);\n      this.cleanupDuplicatePairings(session);\n\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private shouldSetTVF = (\n    protocolMethod: JsonRpcTypes.WcMethod,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n  ) => {\n    if (!params) return false;\n    if (protocolMethod !== \"wc_sessionRequest\") return false;\n    const { request } = params;\n    return Object.keys(TVF_METHODS).includes(request.method);\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    try {\n      const requestMethod = params.request.method;\n      const txHashes = this.extractTxHashesFromResult(requestMethod, result);\n      const tvf: RelayerTypes.ITVF = {\n        correlationId: id,\n        rpcMethods: [requestMethod],\n        chainId: params.chainId,\n        ...(this.isValidContractData(params.request.params) && {\n          // initially only get contractAddresses from EVM txs\n          contractAddresses: [params.request.params?.[0]?.to],\n        }),\n        txHashes,\n      };\n      return tvf;\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return {};\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (method: string, result: any): string[] => {\n    try {\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","payloadId","sessionConnectTarget","engineEvent","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","proposalExpireHandler","id","session","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","TRANSPORT_TYPES","getSdkError","reason","acknowledged","clientRpcId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","shouldSetTVF","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","authenticateId","sessionConnectEventTarget","authenticateEventTarget","onSessionConnect","onAuthenticate","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","pendingSession","s","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","TVF_METHODS","txHashes","data","hexPart","methodConfig","hashes","isValidArray","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}