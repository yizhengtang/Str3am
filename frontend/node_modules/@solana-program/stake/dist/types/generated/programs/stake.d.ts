/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type ReadonlyUint8Array } from '@solana/kit';
import { type ParsedAuthorizeCheckedInstruction, type ParsedAuthorizeCheckedWithSeedInstruction, type ParsedAuthorizeInstruction, type ParsedAuthorizeWithSeedInstruction, type ParsedDeactivateDelinquentInstruction, type ParsedDeactivateInstruction, type ParsedDelegateStakeInstruction, type ParsedGetMinimumDelegationInstruction, type ParsedInitializeCheckedInstruction, type ParsedInitializeInstruction, type ParsedMergeInstruction, type ParsedMoveLamportsInstruction, type ParsedMoveStakeInstruction, type ParsedSetLockupCheckedInstruction, type ParsedSetLockupInstruction, type ParsedSplitInstruction, type ParsedWithdrawInstruction } from '../instructions';
export declare const STAKE_PROGRAM_ADDRESS: Address<"Stake11111111111111111111111111111111111111">;
export declare enum StakeAccount {
    StakeStateAccount = 0
}
export declare enum StakeInstruction {
    Initialize = 0,
    Authorize = 1,
    DelegateStake = 2,
    Split = 3,
    Withdraw = 4,
    Deactivate = 5,
    SetLockup = 6,
    Merge = 7,
    AuthorizeWithSeed = 8,
    InitializeChecked = 9,
    AuthorizeChecked = 10,
    AuthorizeCheckedWithSeed = 11,
    SetLockupChecked = 12,
    GetMinimumDelegation = 13,
    DeactivateDelinquent = 14,
    MoveStake = 15,
    MoveLamports = 16
}
export declare function identifyStakeInstruction(instruction: {
    data: ReadonlyUint8Array;
} | ReadonlyUint8Array): StakeInstruction;
export type ParsedStakeInstruction<TProgram extends string = 'Stake11111111111111111111111111111111111111'> = ({
    instructionType: StakeInstruction.Initialize;
} & ParsedInitializeInstruction<TProgram>) | ({
    instructionType: StakeInstruction.Authorize;
} & ParsedAuthorizeInstruction<TProgram>) | ({
    instructionType: StakeInstruction.DelegateStake;
} & ParsedDelegateStakeInstruction<TProgram>) | ({
    instructionType: StakeInstruction.Split;
} & ParsedSplitInstruction<TProgram>) | ({
    instructionType: StakeInstruction.Withdraw;
} & ParsedWithdrawInstruction<TProgram>) | ({
    instructionType: StakeInstruction.Deactivate;
} & ParsedDeactivateInstruction<TProgram>) | ({
    instructionType: StakeInstruction.SetLockup;
} & ParsedSetLockupInstruction<TProgram>) | ({
    instructionType: StakeInstruction.Merge;
} & ParsedMergeInstruction<TProgram>) | ({
    instructionType: StakeInstruction.AuthorizeWithSeed;
} & ParsedAuthorizeWithSeedInstruction<TProgram>) | ({
    instructionType: StakeInstruction.InitializeChecked;
} & ParsedInitializeCheckedInstruction<TProgram>) | ({
    instructionType: StakeInstruction.AuthorizeChecked;
} & ParsedAuthorizeCheckedInstruction<TProgram>) | ({
    instructionType: StakeInstruction.AuthorizeCheckedWithSeed;
} & ParsedAuthorizeCheckedWithSeedInstruction<TProgram>) | ({
    instructionType: StakeInstruction.SetLockupChecked;
} & ParsedSetLockupCheckedInstruction<TProgram>) | ({
    instructionType: StakeInstruction.GetMinimumDelegation;
} & ParsedGetMinimumDelegationInstruction<TProgram>) | ({
    instructionType: StakeInstruction.DeactivateDelinquent;
} & ParsedDeactivateDelinquentInstruction<TProgram>) | ({
    instructionType: StakeInstruction.MoveStake;
} & ParsedMoveStakeInstruction<TProgram>) | ({
    instructionType: StakeInstruction.MoveLamports;
} & ParsedMoveLamportsInstruction<TProgram>);
//# sourceMappingURL=stake.d.ts.map