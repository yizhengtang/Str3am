/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount } from '@solana/kit';
import { type StakeStateV2, type StakeStateV2Args } from '../types';
export type StakeStateAccount = {
    state: StakeStateV2;
};
export type StakeStateAccountArgs = {
    state: StakeStateV2Args;
};
export declare function getStakeStateAccountEncoder(): Encoder<StakeStateAccountArgs>;
export declare function getStakeStateAccountDecoder(): Decoder<StakeStateAccount>;
export declare function getStakeStateAccountCodec(): Codec<StakeStateAccountArgs, StakeStateAccount>;
export declare function decodeStakeStateAccount<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<StakeStateAccount, TAddress>;
export declare function decodeStakeStateAccount<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<StakeStateAccount, TAddress>;
export declare function fetchStakeStateAccount<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<StakeStateAccount, TAddress>>;
export declare function fetchMaybeStakeStateAccount<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<StakeStateAccount, TAddress>>;
export declare function fetchAllStakeStateAccount(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<StakeStateAccount>[]>;
export declare function fetchAllMaybeStakeStateAccount(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<StakeStateAccount>[]>;
//# sourceMappingURL=stakeStateAccount.d.ts.map