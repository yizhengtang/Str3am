/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const SPLIT_DISCRIMINATOR = 3;
export declare function getSplitDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type SplitInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountStake extends string | IAccountMeta<string> = string, TAccountSplitStake extends string | IAccountMeta<string> = string, TAccountStakeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountStake extends string ? WritableAccount<TAccountStake> : TAccountStake,
    TAccountSplitStake extends string ? WritableAccount<TAccountSplitStake> : TAccountSplitStake,
    TAccountStakeAuthority extends string ? ReadonlySignerAccount<TAccountStakeAuthority> & IAccountSignerMeta<TAccountStakeAuthority> : TAccountStakeAuthority,
    ...TRemainingAccounts
]>;
export type SplitInstructionData = {
    discriminator: number;
    args: bigint;
};
export type SplitInstructionDataArgs = {
    args: number | bigint;
};
export declare function getSplitInstructionDataEncoder(): Encoder<SplitInstructionDataArgs>;
export declare function getSplitInstructionDataDecoder(): Decoder<SplitInstructionData>;
export declare function getSplitInstructionDataCodec(): Codec<SplitInstructionDataArgs, SplitInstructionData>;
export type SplitInput<TAccountStake extends string = string, TAccountSplitStake extends string = string, TAccountStakeAuthority extends string = string> = {
    /** Stake account to be split */
    stake: Address<TAccountStake>;
    /** Uninitialized stake account */
    splitStake: Address<TAccountSplitStake>;
    /** Stake authority */
    stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
    args: SplitInstructionDataArgs['args'];
};
export declare function getSplitInstruction<TAccountStake extends string, TAccountSplitStake extends string, TAccountStakeAuthority extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: SplitInput<TAccountStake, TAccountSplitStake, TAccountStakeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SplitInstruction<TProgramAddress, TAccountStake, TAccountSplitStake, TAccountStakeAuthority>;
export type ParsedSplitInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Stake account to be split */
        stake: TAccountMetas[0];
        /** Uninitialized stake account */
        splitStake: TAccountMetas[1];
        /** Stake authority */
        stakeAuthority: TAccountMetas[2];
    };
    data: SplitInstructionData;
};
export declare function parseSplitInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSplitInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=split.d.ts.map