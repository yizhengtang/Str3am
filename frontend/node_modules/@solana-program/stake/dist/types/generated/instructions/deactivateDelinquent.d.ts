/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const DEACTIVATE_DELINQUENT_DISCRIMINATOR = 14;
export declare function getDeactivateDelinquentDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type DeactivateDelinquentInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountStake extends string | IAccountMeta<string> = string, TAccountDelinquentVote extends string | IAccountMeta<string> = string, TAccountReferenceVote extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountStake extends string ? WritableAccount<TAccountStake> : TAccountStake,
    TAccountDelinquentVote extends string ? ReadonlyAccount<TAccountDelinquentVote> : TAccountDelinquentVote,
    TAccountReferenceVote extends string ? ReadonlyAccount<TAccountReferenceVote> : TAccountReferenceVote,
    ...TRemainingAccounts
]>;
export type DeactivateDelinquentInstructionData = {
    discriminator: number;
};
export type DeactivateDelinquentInstructionDataArgs = {};
export declare function getDeactivateDelinquentInstructionDataEncoder(): Encoder<DeactivateDelinquentInstructionDataArgs>;
export declare function getDeactivateDelinquentInstructionDataDecoder(): Decoder<DeactivateDelinquentInstructionData>;
export declare function getDeactivateDelinquentInstructionDataCodec(): Codec<DeactivateDelinquentInstructionDataArgs, DeactivateDelinquentInstructionData>;
export type DeactivateDelinquentInput<TAccountStake extends string = string, TAccountDelinquentVote extends string = string, TAccountReferenceVote extends string = string> = {
    /** Delegated stake account */
    stake: Address<TAccountStake>;
    /** Delinquent vote account */
    delinquentVote: Address<TAccountDelinquentVote>;
    /** Reference vote account */
    referenceVote: Address<TAccountReferenceVote>;
};
export declare function getDeactivateDelinquentInstruction<TAccountStake extends string, TAccountDelinquentVote extends string, TAccountReferenceVote extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: DeactivateDelinquentInput<TAccountStake, TAccountDelinquentVote, TAccountReferenceVote>, config?: {
    programAddress?: TProgramAddress;
}): DeactivateDelinquentInstruction<TProgramAddress, TAccountStake, TAccountDelinquentVote, TAccountReferenceVote>;
export type ParsedDeactivateDelinquentInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Delegated stake account */
        stake: TAccountMetas[0];
        /** Delinquent vote account */
        delinquentVote: TAccountMetas[1];
        /** Reference vote account */
        referenceVote: TAccountMetas[2];
    };
    data: DeactivateDelinquentInstructionData;
};
export declare function parseDeactivateDelinquentInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDeactivateDelinquentInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=deactivateDelinquent.d.ts.map