/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const DEACTIVATE_DISCRIMINATOR = 5;
export declare function getDeactivateDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type DeactivateInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountStake extends string | IAccountMeta<string> = string, TAccountClockSysvar extends string | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111', TAccountStakeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountStake extends string ? WritableAccount<TAccountStake> : TAccountStake,
    TAccountClockSysvar extends string ? ReadonlyAccount<TAccountClockSysvar> : TAccountClockSysvar,
    TAccountStakeAuthority extends string ? ReadonlySignerAccount<TAccountStakeAuthority> & IAccountSignerMeta<TAccountStakeAuthority> : TAccountStakeAuthority,
    ...TRemainingAccounts
]>;
export type DeactivateInstructionData = {
    discriminator: number;
};
export type DeactivateInstructionDataArgs = {};
export declare function getDeactivateInstructionDataEncoder(): Encoder<DeactivateInstructionDataArgs>;
export declare function getDeactivateInstructionDataDecoder(): Decoder<DeactivateInstructionData>;
export declare function getDeactivateInstructionDataCodec(): Codec<DeactivateInstructionDataArgs, DeactivateInstructionData>;
export type DeactivateInput<TAccountStake extends string = string, TAccountClockSysvar extends string = string, TAccountStakeAuthority extends string = string> = {
    /** Delegated stake account */
    stake: Address<TAccountStake>;
    /** Clock sysvar */
    clockSysvar?: Address<TAccountClockSysvar>;
    /** Stake authority */
    stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};
export declare function getDeactivateInstruction<TAccountStake extends string, TAccountClockSysvar extends string, TAccountStakeAuthority extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: DeactivateInput<TAccountStake, TAccountClockSysvar, TAccountStakeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): DeactivateInstruction<TProgramAddress, TAccountStake, TAccountClockSysvar, TAccountStakeAuthority>;
export type ParsedDeactivateInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Delegated stake account */
        stake: TAccountMetas[0];
        /** Clock sysvar */
        clockSysvar: TAccountMetas[1];
        /** Stake authority */
        stakeAuthority: TAccountMetas[2];
    };
    data: DeactivateInstructionData;
};
export declare function parseDeactivateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDeactivateInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=deactivate.d.ts.map