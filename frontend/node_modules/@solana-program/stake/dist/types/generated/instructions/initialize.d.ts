/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { type Authorized, type AuthorizedArgs, type Lockup, type LockupArgs } from '../types';
export declare const INITIALIZE_DISCRIMINATOR = 0;
export declare function getInitializeDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountStake extends string | IAccountMeta<string> = string, TAccountRentSysvar extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountStake extends string ? WritableAccount<TAccountStake> : TAccountStake,
    TAccountRentSysvar extends string ? ReadonlyAccount<TAccountRentSysvar> : TAccountRentSysvar,
    ...TRemainingAccounts
]>;
export type InitializeInstructionData = {
    discriminator: number;
    arg0: Authorized;
    arg1: Lockup;
};
export type InitializeInstructionDataArgs = {
    arg0: AuthorizedArgs;
    arg1: LockupArgs;
};
export declare function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs>;
export declare function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData>;
export declare function getInitializeInstructionDataCodec(): Codec<InitializeInstructionDataArgs, InitializeInstructionData>;
export type InitializeInput<TAccountStake extends string = string, TAccountRentSysvar extends string = string> = {
    /** Uninitialized stake account */
    stake: Address<TAccountStake>;
    /** Rent sysvar */
    rentSysvar?: Address<TAccountRentSysvar>;
    arg0: InitializeInstructionDataArgs['arg0'];
    arg1: InitializeInstructionDataArgs['arg1'];
};
export declare function getInitializeInstruction<TAccountStake extends string, TAccountRentSysvar extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: InitializeInput<TAccountStake, TAccountRentSysvar>, config?: {
    programAddress?: TProgramAddress;
}): InitializeInstruction<TProgramAddress, TAccountStake, TAccountRentSysvar>;
export type ParsedInitializeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Uninitialized stake account */
        stake: TAccountMetas[0];
        /** Rent sysvar */
        rentSysvar: TAccountMetas[1];
    };
    data: InitializeInstructionData;
};
export declare function parseInitializeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initialize.d.ts.map