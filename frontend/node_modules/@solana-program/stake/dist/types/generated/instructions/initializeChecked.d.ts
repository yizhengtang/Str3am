/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_CHECKED_DISCRIMINATOR = 9;
export declare function getInitializeCheckedDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeCheckedInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountStake extends string | IAccountMeta<string> = string, TAccountRentSysvar extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountStakeAuthority extends string | IAccountMeta<string> = string, TAccountWithdrawAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountStake extends string ? WritableAccount<TAccountStake> : TAccountStake,
    TAccountRentSysvar extends string ? ReadonlyAccount<TAccountRentSysvar> : TAccountRentSysvar,
    TAccountStakeAuthority extends string ? ReadonlyAccount<TAccountStakeAuthority> : TAccountStakeAuthority,
    TAccountWithdrawAuthority extends string ? ReadonlySignerAccount<TAccountWithdrawAuthority> & IAccountSignerMeta<TAccountWithdrawAuthority> : TAccountWithdrawAuthority,
    ...TRemainingAccounts
]>;
export type InitializeCheckedInstructionData = {
    discriminator: number;
};
export type InitializeCheckedInstructionDataArgs = {};
export declare function getInitializeCheckedInstructionDataEncoder(): Encoder<InitializeCheckedInstructionDataArgs>;
export declare function getInitializeCheckedInstructionDataDecoder(): Decoder<InitializeCheckedInstructionData>;
export declare function getInitializeCheckedInstructionDataCodec(): Codec<InitializeCheckedInstructionDataArgs, InitializeCheckedInstructionData>;
export type InitializeCheckedInput<TAccountStake extends string = string, TAccountRentSysvar extends string = string, TAccountStakeAuthority extends string = string, TAccountWithdrawAuthority extends string = string> = {
    /** Uninitialized stake account */
    stake: Address<TAccountStake>;
    /** Rent sysvar */
    rentSysvar?: Address<TAccountRentSysvar>;
    /** The stake authority */
    stakeAuthority: Address<TAccountStakeAuthority>;
    /** The withdraw authority */
    withdrawAuthority: TransactionSigner<TAccountWithdrawAuthority>;
};
export declare function getInitializeCheckedInstruction<TAccountStake extends string, TAccountRentSysvar extends string, TAccountStakeAuthority extends string, TAccountWithdrawAuthority extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: InitializeCheckedInput<TAccountStake, TAccountRentSysvar, TAccountStakeAuthority, TAccountWithdrawAuthority>, config?: {
    programAddress?: TProgramAddress;
}): InitializeCheckedInstruction<TProgramAddress, TAccountStake, TAccountRentSysvar, TAccountStakeAuthority, TAccountWithdrawAuthority>;
export type ParsedInitializeCheckedInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Uninitialized stake account */
        stake: TAccountMetas[0];
        /** Rent sysvar */
        rentSysvar: TAccountMetas[1];
        /** The stake authority */
        stakeAuthority: TAccountMetas[2];
        /** The withdraw authority */
        withdrawAuthority: TAccountMetas[3];
    };
    data: InitializeCheckedInstructionData;
};
export declare function parseInitializeCheckedInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeCheckedInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeChecked.d.ts.map