/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const MOVE_STAKE_DISCRIMINATOR = 16;
export declare function getMoveStakeDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type MoveStakeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountSourceStake extends string | IAccountMeta<string> = string, TAccountDestinationStake extends string | IAccountMeta<string> = string, TAccountStakeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSourceStake extends string ? WritableAccount<TAccountSourceStake> : TAccountSourceStake,
    TAccountDestinationStake extends string ? WritableAccount<TAccountDestinationStake> : TAccountDestinationStake,
    TAccountStakeAuthority extends string ? ReadonlySignerAccount<TAccountStakeAuthority> & IAccountSignerMeta<TAccountStakeAuthority> : TAccountStakeAuthority,
    ...TRemainingAccounts
]>;
export type MoveStakeInstructionData = {
    discriminator: number;
    args: bigint;
};
export type MoveStakeInstructionDataArgs = {
    args: number | bigint;
};
export declare function getMoveStakeInstructionDataEncoder(): Encoder<MoveStakeInstructionDataArgs>;
export declare function getMoveStakeInstructionDataDecoder(): Decoder<MoveStakeInstructionData>;
export declare function getMoveStakeInstructionDataCodec(): Codec<MoveStakeInstructionDataArgs, MoveStakeInstructionData>;
export type MoveStakeInput<TAccountSourceStake extends string = string, TAccountDestinationStake extends string = string, TAccountStakeAuthority extends string = string> = {
    /** Active source stake account */
    sourceStake: Address<TAccountSourceStake>;
    /** Active or inactive destination stake account */
    destinationStake: Address<TAccountDestinationStake>;
    /** Stake authority */
    stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
    args: MoveStakeInstructionDataArgs['args'];
};
export declare function getMoveStakeInstruction<TAccountSourceStake extends string, TAccountDestinationStake extends string, TAccountStakeAuthority extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: MoveStakeInput<TAccountSourceStake, TAccountDestinationStake, TAccountStakeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): MoveStakeInstruction<TProgramAddress, TAccountSourceStake, TAccountDestinationStake, TAccountStakeAuthority>;
export type ParsedMoveStakeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Active source stake account */
        sourceStake: TAccountMetas[0];
        /** Active or inactive destination stake account */
        destinationStake: TAccountMetas[1];
        /** Stake authority */
        stakeAuthority: TAccountMetas[2];
    };
    data: MoveStakeInstructionData;
};
export declare function parseMoveStakeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedMoveStakeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=moveStake.d.ts.map