/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
export declare const MERGE_DISCRIMINATOR = 7;
export declare function getMergeDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type MergeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountDestinationStake extends string | IAccountMeta<string> = string, TAccountSourceStake extends string | IAccountMeta<string> = string, TAccountClockSysvar extends string | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111', TAccountStakeHistory extends string | IAccountMeta<string> = string, TAccountStakeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountDestinationStake extends string ? WritableAccount<TAccountDestinationStake> : TAccountDestinationStake,
    TAccountSourceStake extends string ? WritableAccount<TAccountSourceStake> : TAccountSourceStake,
    TAccountClockSysvar extends string ? ReadonlyAccount<TAccountClockSysvar> : TAccountClockSysvar,
    TAccountStakeHistory extends string ? ReadonlyAccount<TAccountStakeHistory> : TAccountStakeHistory,
    TAccountStakeAuthority extends string ? ReadonlySignerAccount<TAccountStakeAuthority> & IAccountSignerMeta<TAccountStakeAuthority> : TAccountStakeAuthority,
    ...TRemainingAccounts
]>;
export type MergeInstructionData = {
    discriminator: number;
};
export type MergeInstructionDataArgs = {};
export declare function getMergeInstructionDataEncoder(): Encoder<MergeInstructionDataArgs>;
export declare function getMergeInstructionDataDecoder(): Decoder<MergeInstructionData>;
export declare function getMergeInstructionDataCodec(): Codec<MergeInstructionDataArgs, MergeInstructionData>;
export type MergeInput<TAccountDestinationStake extends string = string, TAccountSourceStake extends string = string, TAccountClockSysvar extends string = string, TAccountStakeHistory extends string = string, TAccountStakeAuthority extends string = string> = {
    /** Destination stake account */
    destinationStake: Address<TAccountDestinationStake>;
    /** Source stake account */
    sourceStake: Address<TAccountSourceStake>;
    /** Clock sysvar */
    clockSysvar?: Address<TAccountClockSysvar>;
    /** Stake history sysvar */
    stakeHistory: Address<TAccountStakeHistory>;
    /** Stake authority */
    stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};
export declare function getMergeInstruction<TAccountDestinationStake extends string, TAccountSourceStake extends string, TAccountClockSysvar extends string, TAccountStakeHistory extends string, TAccountStakeAuthority extends string, TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS>(input: MergeInput<TAccountDestinationStake, TAccountSourceStake, TAccountClockSysvar, TAccountStakeHistory, TAccountStakeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): MergeInstruction<TProgramAddress, TAccountDestinationStake, TAccountSourceStake, TAccountClockSysvar, TAccountStakeHistory, TAccountStakeAuthority>;
export type ParsedMergeInstruction<TProgram extends string = typeof STAKE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Destination stake account */
        destinationStake: TAccountMetas[0];
        /** Source stake account */
        sourceStake: TAccountMetas[1];
        /** Clock sysvar */
        clockSysvar: TAccountMetas[2];
        /** Stake history sysvar */
        stakeHistory: TAccountMetas[3];
        /** Stake authority */
        stakeAuthority: TAccountMetas[4];
    };
    data: MergeInstructionData;
};
export declare function parseMergeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedMergeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=merge.d.ts.map