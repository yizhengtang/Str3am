{"version":3,"sources":["../../src/generated/types/authorized.ts","../../src/generated/types/delegation.ts","../../src/generated/types/lockup.ts","../../src/generated/types/meta.ts","../../src/generated/types/stake.ts","../../src/generated/types/stakeAuthorize.ts","../../src/generated/types/stakeFlags.ts","../../src/generated/types/stakeState.ts","../../src/generated/types/stakeStateV2.ts","../../src/generated/accounts/stakeStateAccount.ts","../../src/generated/programs/stake.ts","../../src/generated/errors/stake.ts","../../src/generated/shared/index.ts","../../src/generated/instructions/authorize.ts","../../src/generated/instructions/authorizeChecked.ts","../../src/generated/instructions/authorizeCheckedWithSeed.ts","../../src/generated/instructions/authorizeWithSeed.ts","../../src/generated/instructions/deactivate.ts","../../src/generated/instructions/deactivateDelinquent.ts","../../src/generated/instructions/delegateStake.ts","../../src/generated/instructions/getMinimumDelegation.ts","../../src/generated/instructions/initialize.ts","../../src/generated/instructions/initializeChecked.ts","../../src/generated/instructions/merge.ts","../../src/generated/instructions/moveLamports.ts","../../src/generated/instructions/moveStake.ts","../../src/generated/instructions/setLockup.ts","../../src/generated/instructions/setLockupChecked.ts","../../src/generated/instructions/split.ts","../../src/generated/instructions/withdraw.ts"],"names":["getStructEncoder","getAddressEncoder","getStructDecoder","getAddressDecoder","combineCodec","getU64Encoder","getU64Decoder","StakeAuthorize","getDiscriminatedUnionEncoder","getUnitEncoder","getTupleEncoder","getU32Encoder","getDiscriminatedUnionDecoder","getUnitDecoder","getTupleDecoder","getU32Decoder","StakeAccount","StakeInstruction","kitIsTransactionSigner","transformEncoder","addEncoderSizePrefix","getUtf8Encoder","addDecoderSizePrefix","getUtf8Decoder","getI64Encoder","getI64Decoder","getOptionEncoder","getOptionDecoder"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\n\nexport type Authorized = { staker: Address; withdrawer: Address };\n\nexport type AuthorizedArgs = Authorized;\n\nexport function getAuthorizedEncoder(): Encoder<AuthorizedArgs> {\n  return getStructEncoder([\n    ['staker', getAddressEncoder()],\n    ['withdrawer', getAddressEncoder()],\n  ]);\n}\n\nexport function getAuthorizedDecoder(): Decoder<Authorized> {\n  return getStructDecoder([\n    ['staker', getAddressDecoder()],\n    ['withdrawer', getAddressDecoder()],\n  ]);\n}\n\nexport function getAuthorizedCodec(): Codec<AuthorizedArgs, Authorized> {\n  return combineCodec(getAuthorizedEncoder(), getAuthorizedDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getF64Decoder,\n  getF64Encoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU64Decoder,\n  getU64Encoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\n\nexport type Delegation = {\n  voterPubkey: Address;\n  stake: bigint;\n  activationEpoch: bigint;\n  deactivationEpoch: bigint;\n  warmupCooldownRate: number;\n};\n\nexport type DelegationArgs = {\n  voterPubkey: Address;\n  stake: number | bigint;\n  activationEpoch: number | bigint;\n  deactivationEpoch: number | bigint;\n  warmupCooldownRate: number;\n};\n\nexport function getDelegationEncoder(): Encoder<DelegationArgs> {\n  return getStructEncoder([\n    ['voterPubkey', getAddressEncoder()],\n    ['stake', getU64Encoder()],\n    ['activationEpoch', getU64Encoder()],\n    ['deactivationEpoch', getU64Encoder()],\n    ['warmupCooldownRate', getF64Encoder()],\n  ]);\n}\n\nexport function getDelegationDecoder(): Decoder<Delegation> {\n  return getStructDecoder([\n    ['voterPubkey', getAddressDecoder()],\n    ['stake', getU64Decoder()],\n    ['activationEpoch', getU64Decoder()],\n    ['deactivationEpoch', getU64Decoder()],\n    ['warmupCooldownRate', getF64Decoder()],\n  ]);\n}\n\nexport function getDelegationCodec(): Codec<DelegationArgs, Delegation> {\n  return combineCodec(getDelegationEncoder(), getDelegationDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getI64Decoder,\n  getI64Encoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU64Decoder,\n  getU64Encoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\n\nexport type Lockup = {\n  unixTimestamp: bigint;\n  epoch: bigint;\n  custodian: Address;\n};\n\nexport type LockupArgs = {\n  unixTimestamp: number | bigint;\n  epoch: number | bigint;\n  custodian: Address;\n};\n\nexport function getLockupEncoder(): Encoder<LockupArgs> {\n  return getStructEncoder([\n    ['unixTimestamp', getI64Encoder()],\n    ['epoch', getU64Encoder()],\n    ['custodian', getAddressEncoder()],\n  ]);\n}\n\nexport function getLockupDecoder(): Decoder<Lockup> {\n  return getStructDecoder([\n    ['unixTimestamp', getI64Decoder()],\n    ['epoch', getU64Decoder()],\n    ['custodian', getAddressDecoder()],\n  ]);\n}\n\nexport function getLockupCodec(): Codec<LockupArgs, Lockup> {\n  return combineCodec(getLockupEncoder(), getLockupDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU64Decoder,\n  getU64Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\nimport {\n  getAuthorizedDecoder,\n  getAuthorizedEncoder,\n  getLockupDecoder,\n  getLockupEncoder,\n  type Authorized,\n  type AuthorizedArgs,\n  type Lockup,\n  type LockupArgs,\n} from '.';\n\nexport type Meta = {\n  rentExemptReserve: bigint;\n  authorized: Authorized;\n  lockup: Lockup;\n};\n\nexport type MetaArgs = {\n  rentExemptReserve: number | bigint;\n  authorized: AuthorizedArgs;\n  lockup: LockupArgs;\n};\n\nexport function getMetaEncoder(): Encoder<MetaArgs> {\n  return getStructEncoder([\n    ['rentExemptReserve', getU64Encoder()],\n    ['authorized', getAuthorizedEncoder()],\n    ['lockup', getLockupEncoder()],\n  ]);\n}\n\nexport function getMetaDecoder(): Decoder<Meta> {\n  return getStructDecoder([\n    ['rentExemptReserve', getU64Decoder()],\n    ['authorized', getAuthorizedDecoder()],\n    ['lockup', getLockupDecoder()],\n  ]);\n}\n\nexport function getMetaCodec(): Codec<MetaArgs, Meta> {\n  return combineCodec(getMetaEncoder(), getMetaDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU64Decoder,\n  getU64Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\nimport {\n  getDelegationDecoder,\n  getDelegationEncoder,\n  type Delegation,\n  type DelegationArgs,\n} from '.';\n\nexport type Stake = { delegation: Delegation; creditsObserved: bigint };\n\nexport type StakeArgs = {\n  delegation: DelegationArgs;\n  creditsObserved: number | bigint;\n};\n\nexport function getStakeEncoder(): Encoder<StakeArgs> {\n  return getStructEncoder([\n    ['delegation', getDelegationEncoder()],\n    ['creditsObserved', getU64Encoder()],\n  ]);\n}\n\nexport function getStakeDecoder(): Decoder<Stake> {\n  return getStructDecoder([\n    ['delegation', getDelegationDecoder()],\n    ['creditsObserved', getU64Decoder()],\n  ]);\n}\n\nexport function getStakeCodec(): Codec<StakeArgs, Stake> {\n  return combineCodec(getStakeEncoder(), getStakeDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getEnumDecoder,\n  getEnumEncoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\n\nexport enum StakeAuthorize {\n  Staker,\n  Withdrawer,\n}\n\nexport type StakeAuthorizeArgs = StakeAuthorize;\n\nexport function getStakeAuthorizeEncoder(): Encoder<StakeAuthorizeArgs> {\n  return getEnumEncoder(StakeAuthorize);\n}\n\nexport function getStakeAuthorizeDecoder(): Decoder<StakeAuthorize> {\n  return getEnumDecoder(StakeAuthorize);\n}\n\nexport function getStakeAuthorizeCodec(): Codec<\n  StakeAuthorizeArgs,\n  StakeAuthorize\n> {\n  return combineCodec(getStakeAuthorizeEncoder(), getStakeAuthorizeDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/kit';\n\nexport type StakeFlags = { bits: number };\n\nexport type StakeFlagsArgs = StakeFlags;\n\nexport function getStakeFlagsEncoder(): Encoder<StakeFlagsArgs> {\n  return getStructEncoder([['bits', getU8Encoder()]]);\n}\n\nexport function getStakeFlagsDecoder(): Decoder<StakeFlags> {\n  return getStructDecoder([['bits', getU8Decoder()]]);\n}\n\nexport function getStakeFlagsCodec(): Codec<StakeFlagsArgs, StakeFlags> {\n  return combineCodec(getStakeFlagsEncoder(), getStakeFlagsDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getDiscriminatedUnionDecoder,\n  getDiscriminatedUnionEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUnitDecoder,\n  getUnitEncoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type GetDiscriminatedUnionVariant,\n  type GetDiscriminatedUnionVariantContent,\n} from '@solana/kit';\nimport {\n  getMetaDecoder,\n  getMetaEncoder,\n  getStakeDecoder,\n  getStakeEncoder,\n  type Meta,\n  type MetaArgs,\n  type Stake,\n  type StakeArgs,\n} from '.';\n\nexport type StakeState =\n  | { __kind: 'Uninitialized' }\n  | { __kind: 'Initialized'; fields: readonly [Meta] }\n  | { __kind: 'Stake'; fields: readonly [Meta, Stake] }\n  | { __kind: 'RewardsPool' };\n\nexport type StakeStateArgs =\n  | { __kind: 'Uninitialized' }\n  | { __kind: 'Initialized'; fields: readonly [MetaArgs] }\n  | { __kind: 'Stake'; fields: readonly [MetaArgs, StakeArgs] }\n  | { __kind: 'RewardsPool' };\n\nexport function getStakeStateEncoder(): Encoder<StakeStateArgs> {\n  return getDiscriminatedUnionEncoder(\n    [\n      ['Uninitialized', getUnitEncoder()],\n      [\n        'Initialized',\n        getStructEncoder([['fields', getTupleEncoder([getMetaEncoder()])]]),\n      ],\n      [\n        'Stake',\n        getStructEncoder([\n          ['fields', getTupleEncoder([getMetaEncoder(), getStakeEncoder()])],\n        ]),\n      ],\n      ['RewardsPool', getUnitEncoder()],\n    ],\n    { size: getU32Encoder() }\n  );\n}\n\nexport function getStakeStateDecoder(): Decoder<StakeState> {\n  return getDiscriminatedUnionDecoder(\n    [\n      ['Uninitialized', getUnitDecoder()],\n      [\n        'Initialized',\n        getStructDecoder([['fields', getTupleDecoder([getMetaDecoder()])]]),\n      ],\n      [\n        'Stake',\n        getStructDecoder([\n          ['fields', getTupleDecoder([getMetaDecoder(), getStakeDecoder()])],\n        ]),\n      ],\n      ['RewardsPool', getUnitDecoder()],\n    ],\n    { size: getU32Decoder() }\n  );\n}\n\nexport function getStakeStateCodec(): Codec<StakeStateArgs, StakeState> {\n  return combineCodec(getStakeStateEncoder(), getStakeStateDecoder());\n}\n\n// Data Enum Helpers.\nexport function stakeState(\n  kind: 'Uninitialized'\n): GetDiscriminatedUnionVariant<StakeStateArgs, '__kind', 'Uninitialized'>;\nexport function stakeState(\n  kind: 'Initialized',\n  data: GetDiscriminatedUnionVariantContent<\n    StakeStateArgs,\n    '__kind',\n    'Initialized'\n  >['fields']\n): GetDiscriminatedUnionVariant<StakeStateArgs, '__kind', 'Initialized'>;\nexport function stakeState(\n  kind: 'Stake',\n  data: GetDiscriminatedUnionVariantContent<\n    StakeStateArgs,\n    '__kind',\n    'Stake'\n  >['fields']\n): GetDiscriminatedUnionVariant<StakeStateArgs, '__kind', 'Stake'>;\nexport function stakeState(\n  kind: 'RewardsPool'\n): GetDiscriminatedUnionVariant<StakeStateArgs, '__kind', 'RewardsPool'>;\nexport function stakeState<K extends StakeStateArgs['__kind'], Data>(\n  kind: K,\n  data?: Data\n) {\n  return Array.isArray(data)\n    ? { __kind: kind, fields: data }\n    : { __kind: kind, ...(data ?? {}) };\n}\n\nexport function isStakeState<K extends StakeState['__kind']>(\n  kind: K,\n  value: StakeState\n): value is StakeState & { __kind: K } {\n  return value.__kind === kind;\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getDiscriminatedUnionDecoder,\n  getDiscriminatedUnionEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUnitDecoder,\n  getUnitEncoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type GetDiscriminatedUnionVariant,\n  type GetDiscriminatedUnionVariantContent,\n} from '@solana/kit';\nimport {\n  getMetaDecoder,\n  getMetaEncoder,\n  getStakeDecoder,\n  getStakeEncoder,\n  getStakeFlagsDecoder,\n  getStakeFlagsEncoder,\n  type Meta,\n  type MetaArgs,\n  type Stake,\n  type StakeArgs,\n  type StakeFlags,\n  type StakeFlagsArgs,\n} from '.';\n\nexport type StakeStateV2 =\n  | { __kind: 'Uninitialized' }\n  | { __kind: 'Initialized'; fields: readonly [Meta] }\n  | { __kind: 'Stake'; fields: readonly [Meta, Stake, StakeFlags] }\n  | { __kind: 'RewardsPool' };\n\nexport type StakeStateV2Args =\n  | { __kind: 'Uninitialized' }\n  | { __kind: 'Initialized'; fields: readonly [MetaArgs] }\n  | { __kind: 'Stake'; fields: readonly [MetaArgs, StakeArgs, StakeFlagsArgs] }\n  | { __kind: 'RewardsPool' };\n\nexport function getStakeStateV2Encoder(): Encoder<StakeStateV2Args> {\n  return getDiscriminatedUnionEncoder(\n    [\n      ['Uninitialized', getUnitEncoder()],\n      [\n        'Initialized',\n        getStructEncoder([['fields', getTupleEncoder([getMetaEncoder()])]]),\n      ],\n      [\n        'Stake',\n        getStructEncoder([\n          [\n            'fields',\n            getTupleEncoder([\n              getMetaEncoder(),\n              getStakeEncoder(),\n              getStakeFlagsEncoder(),\n            ]),\n          ],\n        ]),\n      ],\n      ['RewardsPool', getUnitEncoder()],\n    ],\n    { size: getU32Encoder() }\n  );\n}\n\nexport function getStakeStateV2Decoder(): Decoder<StakeStateV2> {\n  return getDiscriminatedUnionDecoder(\n    [\n      ['Uninitialized', getUnitDecoder()],\n      [\n        'Initialized',\n        getStructDecoder([['fields', getTupleDecoder([getMetaDecoder()])]]),\n      ],\n      [\n        'Stake',\n        getStructDecoder([\n          [\n            'fields',\n            getTupleDecoder([\n              getMetaDecoder(),\n              getStakeDecoder(),\n              getStakeFlagsDecoder(),\n            ]),\n          ],\n        ]),\n      ],\n      ['RewardsPool', getUnitDecoder()],\n    ],\n    { size: getU32Decoder() }\n  );\n}\n\nexport function getStakeStateV2Codec(): Codec<StakeStateV2Args, StakeStateV2> {\n  return combineCodec(getStakeStateV2Encoder(), getStakeStateV2Decoder());\n}\n\n// Data Enum Helpers.\nexport function stakeStateV2(\n  kind: 'Uninitialized'\n): GetDiscriminatedUnionVariant<StakeStateV2Args, '__kind', 'Uninitialized'>;\nexport function stakeStateV2(\n  kind: 'Initialized',\n  data: GetDiscriminatedUnionVariantContent<\n    StakeStateV2Args,\n    '__kind',\n    'Initialized'\n  >['fields']\n): GetDiscriminatedUnionVariant<StakeStateV2Args, '__kind', 'Initialized'>;\nexport function stakeStateV2(\n  kind: 'Stake',\n  data: GetDiscriminatedUnionVariantContent<\n    StakeStateV2Args,\n    '__kind',\n    'Stake'\n  >['fields']\n): GetDiscriminatedUnionVariant<StakeStateV2Args, '__kind', 'Stake'>;\nexport function stakeStateV2(\n  kind: 'RewardsPool'\n): GetDiscriminatedUnionVariant<StakeStateV2Args, '__kind', 'RewardsPool'>;\nexport function stakeStateV2<K extends StakeStateV2Args['__kind'], Data>(\n  kind: K,\n  data?: Data\n) {\n  return Array.isArray(data)\n    ? { __kind: kind, fields: data }\n    : { __kind: kind, ...(data ?? {}) };\n}\n\nexport function isStakeStateV2<K extends StakeStateV2['__kind']>(\n  kind: K,\n  value: StakeStateV2\n): value is StakeStateV2 & { __kind: K } {\n  return value.__kind === kind;\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  assertAccountExists,\n  assertAccountsExist,\n  combineCodec,\n  decodeAccount,\n  fetchEncodedAccount,\n  fetchEncodedAccounts,\n  getStructDecoder,\n  getStructEncoder,\n  type Account,\n  type Address,\n  type Codec,\n  type Decoder,\n  type EncodedAccount,\n  type Encoder,\n  type FetchAccountConfig,\n  type FetchAccountsConfig,\n  type MaybeAccount,\n  type MaybeEncodedAccount,\n} from '@solana/kit';\nimport {\n  getStakeStateV2Decoder,\n  getStakeStateV2Encoder,\n  type StakeStateV2,\n  type StakeStateV2Args,\n} from '../types';\n\nexport type StakeStateAccount = { state: StakeStateV2 };\n\nexport type StakeStateAccountArgs = { state: StakeStateV2Args };\n\nexport function getStakeStateAccountEncoder(): Encoder<StakeStateAccountArgs> {\n  return getStructEncoder([['state', getStakeStateV2Encoder()]]);\n}\n\nexport function getStakeStateAccountDecoder(): Decoder<StakeStateAccount> {\n  return getStructDecoder([['state', getStakeStateV2Decoder()]]);\n}\n\nexport function getStakeStateAccountCodec(): Codec<\n  StakeStateAccountArgs,\n  StakeStateAccount\n> {\n  return combineCodec(\n    getStakeStateAccountEncoder(),\n    getStakeStateAccountDecoder()\n  );\n}\n\nexport function decodeStakeStateAccount<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress>\n): Account<StakeStateAccount, TAddress>;\nexport function decodeStakeStateAccount<TAddress extends string = string>(\n  encodedAccount: MaybeEncodedAccount<TAddress>\n): MaybeAccount<StakeStateAccount, TAddress>;\nexport function decodeStakeStateAccount<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>\n):\n  | Account<StakeStateAccount, TAddress>\n  | MaybeAccount<StakeStateAccount, TAddress> {\n  return decodeAccount(\n    encodedAccount as MaybeEncodedAccount<TAddress>,\n    getStakeStateAccountDecoder()\n  );\n}\n\nexport async function fetchStakeStateAccount<TAddress extends string = string>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<Account<StakeStateAccount, TAddress>> {\n  const maybeAccount = await fetchMaybeStakeStateAccount(rpc, address, config);\n  assertAccountExists(maybeAccount);\n  return maybeAccount;\n}\n\nexport async function fetchMaybeStakeStateAccount<\n  TAddress extends string = string,\n>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<MaybeAccount<StakeStateAccount, TAddress>> {\n  const maybeAccount = await fetchEncodedAccount(rpc, address, config);\n  return decodeStakeStateAccount(maybeAccount);\n}\n\nexport async function fetchAllStakeStateAccount(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<Account<StakeStateAccount>[]> {\n  const maybeAccounts = await fetchAllMaybeStakeStateAccount(\n    rpc,\n    addresses,\n    config\n  );\n  assertAccountsExist(maybeAccounts);\n  return maybeAccounts;\n}\n\nexport async function fetchAllMaybeStakeStateAccount(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<MaybeAccount<StakeStateAccount>[]> {\n  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);\n  return maybeAccounts.map((maybeAccount) =>\n    decodeStakeStateAccount(maybeAccount)\n  );\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  containsBytes,\n  getU32Encoder,\n  type Address,\n  type ReadonlyUint8Array,\n} from '@solana/kit';\nimport {\n  type ParsedAuthorizeCheckedInstruction,\n  type ParsedAuthorizeCheckedWithSeedInstruction,\n  type ParsedAuthorizeInstruction,\n  type ParsedAuthorizeWithSeedInstruction,\n  type ParsedDeactivateDelinquentInstruction,\n  type ParsedDeactivateInstruction,\n  type ParsedDelegateStakeInstruction,\n  type ParsedGetMinimumDelegationInstruction,\n  type ParsedInitializeCheckedInstruction,\n  type ParsedInitializeInstruction,\n  type ParsedMergeInstruction,\n  type ParsedMoveLamportsInstruction,\n  type ParsedMoveStakeInstruction,\n  type ParsedSetLockupCheckedInstruction,\n  type ParsedSetLockupInstruction,\n  type ParsedSplitInstruction,\n  type ParsedWithdrawInstruction,\n} from '../instructions';\n\nexport const STAKE_PROGRAM_ADDRESS =\n  'Stake11111111111111111111111111111111111111' as Address<'Stake11111111111111111111111111111111111111'>;\n\nexport enum StakeAccount {\n  StakeStateAccount,\n}\n\nexport enum StakeInstruction {\n  Initialize,\n  Authorize,\n  DelegateStake,\n  Split,\n  Withdraw,\n  Deactivate,\n  SetLockup,\n  Merge,\n  AuthorizeWithSeed,\n  InitializeChecked,\n  AuthorizeChecked,\n  AuthorizeCheckedWithSeed,\n  SetLockupChecked,\n  GetMinimumDelegation,\n  DeactivateDelinquent,\n  MoveStake,\n  MoveLamports,\n}\n\nexport function identifyStakeInstruction(\n  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array\n): StakeInstruction {\n  const data = 'data' in instruction ? instruction.data : instruction;\n  if (containsBytes(data, getU32Encoder().encode(0), 0)) {\n    return StakeInstruction.Initialize;\n  }\n  if (containsBytes(data, getU32Encoder().encode(1), 0)) {\n    return StakeInstruction.Authorize;\n  }\n  if (containsBytes(data, getU32Encoder().encode(2), 0)) {\n    return StakeInstruction.DelegateStake;\n  }\n  if (containsBytes(data, getU32Encoder().encode(3), 0)) {\n    return StakeInstruction.Split;\n  }\n  if (containsBytes(data, getU32Encoder().encode(4), 0)) {\n    return StakeInstruction.Withdraw;\n  }\n  if (containsBytes(data, getU32Encoder().encode(5), 0)) {\n    return StakeInstruction.Deactivate;\n  }\n  if (containsBytes(data, getU32Encoder().encode(6), 0)) {\n    return StakeInstruction.SetLockup;\n  }\n  if (containsBytes(data, getU32Encoder().encode(7), 0)) {\n    return StakeInstruction.Merge;\n  }\n  if (containsBytes(data, getU32Encoder().encode(8), 0)) {\n    return StakeInstruction.AuthorizeWithSeed;\n  }\n  if (containsBytes(data, getU32Encoder().encode(9), 0)) {\n    return StakeInstruction.InitializeChecked;\n  }\n  if (containsBytes(data, getU32Encoder().encode(10), 0)) {\n    return StakeInstruction.AuthorizeChecked;\n  }\n  if (containsBytes(data, getU32Encoder().encode(11), 0)) {\n    return StakeInstruction.AuthorizeCheckedWithSeed;\n  }\n  if (containsBytes(data, getU32Encoder().encode(12), 0)) {\n    return StakeInstruction.SetLockupChecked;\n  }\n  if (containsBytes(data, getU32Encoder().encode(13), 0)) {\n    return StakeInstruction.GetMinimumDelegation;\n  }\n  if (containsBytes(data, getU32Encoder().encode(14), 0)) {\n    return StakeInstruction.DeactivateDelinquent;\n  }\n  if (containsBytes(data, getU32Encoder().encode(16), 0)) {\n    return StakeInstruction.MoveStake;\n  }\n  if (containsBytes(data, getU32Encoder().encode(17), 0)) {\n    return StakeInstruction.MoveLamports;\n  }\n  throw new Error(\n    'The provided instruction could not be identified as a stake instruction.'\n  );\n}\n\nexport type ParsedStakeInstruction<\n  TProgram extends string = 'Stake11111111111111111111111111111111111111',\n> =\n  | ({\n      instructionType: StakeInstruction.Initialize;\n    } & ParsedInitializeInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.Authorize;\n    } & ParsedAuthorizeInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.DelegateStake;\n    } & ParsedDelegateStakeInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.Split;\n    } & ParsedSplitInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.Withdraw;\n    } & ParsedWithdrawInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.Deactivate;\n    } & ParsedDeactivateInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.SetLockup;\n    } & ParsedSetLockupInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.Merge;\n    } & ParsedMergeInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.AuthorizeWithSeed;\n    } & ParsedAuthorizeWithSeedInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.InitializeChecked;\n    } & ParsedInitializeCheckedInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.AuthorizeChecked;\n    } & ParsedAuthorizeCheckedInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.AuthorizeCheckedWithSeed;\n    } & ParsedAuthorizeCheckedWithSeedInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.SetLockupChecked;\n    } & ParsedSetLockupCheckedInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.GetMinimumDelegation;\n    } & ParsedGetMinimumDelegationInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.DeactivateDelinquent;\n    } & ParsedDeactivateDelinquentInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.MoveStake;\n    } & ParsedMoveStakeInstruction<TProgram>)\n  | ({\n      instructionType: StakeInstruction.MoveLamports;\n    } & ParsedMoveLamportsInstruction<TProgram>);\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  isProgramError,\n  type Address,\n  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,\n  type SolanaError,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\n\nexport const STAKE_ERROR__NO_CREDITS_TO_REDEEM = 0x0; // 0\n\nexport const STAKE_ERROR__LOCKUP_IN_FORCE = 0x1; // 1\n\nexport const STAKE_ERROR__ALREADY_DEACTIVATED = 0x2; // 2\n\nexport const STAKE_ERROR__TOO_SOON_TO_REDELEGATE = 0x3; // 3\n\nexport const STAKE_ERROR__INSUFFICIENT_STAKE = 0x4; // 4\n\nexport const STAKE_ERROR__MERGE_TRANSIENT_STAKE = 0x5; // 5\n\nexport const STAKE_ERROR__MERGE_MISMATCH = 0x6; // 6\n\nexport const STAKE_ERROR__CUSTODIAN_MISSING = 0x7; // 7\n\nexport const STAKE_ERROR__CUSTODIAN_SIGNATURE_MISSING = 0x8; // 8\n\nexport const STAKE_ERROR__INSUFFICIENT_REFERENCE_VOTES = 0x9; // 9\n\nexport const STAKE_ERROR__VOTE_ADDRESS_MISMATCH = 0xa; // 10\n\nexport const STAKE_ERROR__MINIMUM_DELINQUENT_EPOCHS_FOR_DEACTIVATION_NOT_MET = 0xb; // 11\n\nexport const STAKE_ERROR__INSUFFICIENT_DELEGATION = 0xc; // 12\n\nexport const STAKE_ERROR__REDELEGATE_TRANSIENT_OR_INACTIVE_STAKE = 0xd; // 13\n\nexport const STAKE_ERROR__REDELEGATE_TO_SAME_VOTE_ACCOUNT = 0xe; // 14\n\nexport const STAKE_ERROR__REDELEGATED_STAKE_MUST_FULLY_ACTIVATE_BEFORE_DEACTIVATION_IS_PERMITTED = 0xf; // 15\n\nexport const STAKE_ERROR__EPOCH_REWARDS_ACTIVE = 0x10; // 16\n\nexport type StakeError =\n  | typeof STAKE_ERROR__ALREADY_DEACTIVATED\n  | typeof STAKE_ERROR__CUSTODIAN_MISSING\n  | typeof STAKE_ERROR__CUSTODIAN_SIGNATURE_MISSING\n  | typeof STAKE_ERROR__EPOCH_REWARDS_ACTIVE\n  | typeof STAKE_ERROR__INSUFFICIENT_DELEGATION\n  | typeof STAKE_ERROR__INSUFFICIENT_REFERENCE_VOTES\n  | typeof STAKE_ERROR__INSUFFICIENT_STAKE\n  | typeof STAKE_ERROR__LOCKUP_IN_FORCE\n  | typeof STAKE_ERROR__MERGE_MISMATCH\n  | typeof STAKE_ERROR__MERGE_TRANSIENT_STAKE\n  | typeof STAKE_ERROR__MINIMUM_DELINQUENT_EPOCHS_FOR_DEACTIVATION_NOT_MET\n  | typeof STAKE_ERROR__NO_CREDITS_TO_REDEEM\n  | typeof STAKE_ERROR__REDELEGATED_STAKE_MUST_FULLY_ACTIVATE_BEFORE_DEACTIVATION_IS_PERMITTED\n  | typeof STAKE_ERROR__REDELEGATE_TO_SAME_VOTE_ACCOUNT\n  | typeof STAKE_ERROR__REDELEGATE_TRANSIENT_OR_INACTIVE_STAKE\n  | typeof STAKE_ERROR__TOO_SOON_TO_REDELEGATE\n  | typeof STAKE_ERROR__VOTE_ADDRESS_MISMATCH;\n\nlet stakeErrorMessages: Record<StakeError, string> | undefined;\nif (process.env.NODE_ENV !== 'production') {\n  stakeErrorMessages = {\n    [STAKE_ERROR__ALREADY_DEACTIVATED]: `Stake already deactivated`,\n    [STAKE_ERROR__CUSTODIAN_MISSING]: `Custodian address not present`,\n    [STAKE_ERROR__CUSTODIAN_SIGNATURE_MISSING]: `Custodian signature not present`,\n    [STAKE_ERROR__EPOCH_REWARDS_ACTIVE]: `Stake action is not permitted while the epoch rewards period is active`,\n    [STAKE_ERROR__INSUFFICIENT_DELEGATION]: `Delegation amount is less than the minimum`,\n    [STAKE_ERROR__INSUFFICIENT_REFERENCE_VOTES]: `Insufficient voting activity in the reference vote account`,\n    [STAKE_ERROR__INSUFFICIENT_STAKE]: `Split amount is more than is staked`,\n    [STAKE_ERROR__LOCKUP_IN_FORCE]: `Lockup has not yet expired`,\n    [STAKE_ERROR__MERGE_MISMATCH]: `Stake account merge failed due to different authority, lockups or state`,\n    [STAKE_ERROR__MERGE_TRANSIENT_STAKE]: `Stake account with transient stake cannot be merged`,\n    [STAKE_ERROR__MINIMUM_DELINQUENT_EPOCHS_FOR_DEACTIVATION_NOT_MET]: `Stake account has not been delinquent for the minimum epochs required for deactivation`,\n    [STAKE_ERROR__NO_CREDITS_TO_REDEEM]: `Not enough credits to redeem`,\n    [STAKE_ERROR__REDELEGATED_STAKE_MUST_FULLY_ACTIVATE_BEFORE_DEACTIVATION_IS_PERMITTED]: `Redelegated stake must be fully activated before deactivation`,\n    [STAKE_ERROR__REDELEGATE_TO_SAME_VOTE_ACCOUNT]: `Stake redelegation to the same vote account is not permitted`,\n    [STAKE_ERROR__REDELEGATE_TRANSIENT_OR_INACTIVE_STAKE]: `Stake account with transient or inactive stake cannot be redelegated`,\n    [STAKE_ERROR__TOO_SOON_TO_REDELEGATE]: `One re-delegation permitted per epoch`,\n    [STAKE_ERROR__VOTE_ADDRESS_MISMATCH]: `Stake account is not delegated to the provided vote account`,\n  };\n}\n\nexport function getStakeErrorMessage(code: StakeError): string {\n  if (process.env.NODE_ENV !== 'production') {\n    return (stakeErrorMessages as Record<StakeError, string>)[code];\n  }\n\n  return 'Error message not available in production bundles.';\n}\n\nexport function isStakeError<TProgramErrorCode extends StakeError>(\n  error: unknown,\n  transactionMessage: {\n    instructions: Record<number, { programAddress: Address }>;\n  },\n  code?: TProgramErrorCode\n): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &\n  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {\n  return isProgramError<TProgramErrorCode>(\n    error,\n    transactionMessage,\n    STAKE_PROGRAM_ADDRESS,\n    code\n  );\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  AccountRole,\n  isProgramDerivedAddress,\n  isTransactionSigner as kitIsTransactionSigner,\n  type Address,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type ProgramDerivedAddress,\n  type TransactionSigner,\n  upgradeRoleToSigner,\n} from '@solana/kit';\n\n/**\n * Asserts that the given value is not null or undefined.\n * @internal\n */\nexport function expectSome<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('Expected a value but received null or undefined.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a PublicKey.\n * @internal\n */\nexport function expectAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): Address<T> {\n  if (!value) {\n    throw new Error('Expected a Address.');\n  }\n  if (typeof value === 'object' && 'address' in value) {\n    return value.address;\n  }\n  if (Array.isArray(value)) {\n    return value[0];\n  }\n  return value as Address<T>;\n}\n\n/**\n * Asserts that the given value is a PDA.\n * @internal\n */\nexport function expectProgramDerivedAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): ProgramDerivedAddress<T> {\n  if (!value || !Array.isArray(value) || !isProgramDerivedAddress(value)) {\n    throw new Error('Expected a ProgramDerivedAddress.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a TransactionSigner.\n * @internal\n */\nexport function expectTransactionSigner<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): TransactionSigner<T> {\n  if (!value || !isTransactionSigner(value)) {\n    throw new Error('Expected a TransactionSigner.');\n  }\n  return value;\n}\n\n/**\n * Defines an instruction account to resolve.\n * @internal\n */\nexport type ResolvedAccount<\n  T extends string = string,\n  U extends\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null =\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null,\n> = {\n  isWritable: boolean;\n  value: U;\n};\n\n/**\n * Defines an instruction that stores additional bytes on-chain.\n * @internal\n */\nexport type IInstructionWithByteDelta = {\n  byteDelta: number;\n};\n\n/**\n * Get account metas and signers from resolved accounts.\n * @internal\n */\nexport function getAccountMetaFactory(\n  programAddress: Address,\n  optionalAccountStrategy: 'omitted' | 'programId'\n) {\n  return (\n    account: ResolvedAccount\n  ): IAccountMeta | IAccountSignerMeta | undefined => {\n    if (!account.value) {\n      if (optionalAccountStrategy === 'omitted') return;\n      return Object.freeze({\n        address: programAddress,\n        role: AccountRole.READONLY,\n      });\n    }\n\n    const writableRole = account.isWritable\n      ? AccountRole.WRITABLE\n      : AccountRole.READONLY;\n    return Object.freeze({\n      address: expectAddress(account.value),\n      role: isTransactionSigner(account.value)\n        ? upgradeRoleToSigner(writableRole)\n        : writableRole,\n      ...(isTransactionSigner(account.value) ? { signer: account.value } : {}),\n    });\n  };\n}\n\nexport function isTransactionSigner<TAddress extends string = string>(\n  value:\n    | Address<TAddress>\n    | ProgramDerivedAddress<TAddress>\n    | TransactionSigner<TAddress>\n): value is TransactionSigner<TAddress> {\n  return (\n    !!value &&\n    typeof value === 'object' &&\n    'address' in value &&\n    kitIsTransactionSigner(value)\n  );\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getStakeAuthorizeDecoder,\n  getStakeAuthorizeEncoder,\n  type StakeAuthorize,\n  type StakeAuthorizeArgs,\n} from '../types';\n\nexport const AUTHORIZE_DISCRIMINATOR = 1;\n\nexport function getAuthorizeDiscriminatorBytes() {\n  return getU32Encoder().encode(AUTHORIZE_DISCRIMINATOR);\n}\n\nexport type AuthorizeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountAuthority extends string | IAccountMeta<string> = string,\n  TAccountLockupAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountAuthority extends string\n        ? ReadonlySignerAccount<TAccountAuthority> &\n            IAccountSignerMeta<TAccountAuthority>\n        : TAccountAuthority,\n      TAccountLockupAuthority extends string\n        ? ReadonlySignerAccount<TAccountLockupAuthority> &\n            IAccountSignerMeta<TAccountLockupAuthority>\n        : TAccountLockupAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type AuthorizeInstructionData = {\n  discriminator: number;\n  arg0: Address;\n  arg1: StakeAuthorize;\n};\n\nexport type AuthorizeInstructionDataArgs = {\n  arg0: Address;\n  arg1: StakeAuthorizeArgs;\n};\n\nexport function getAuthorizeInstructionDataEncoder(): Encoder<AuthorizeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['arg0', getAddressEncoder()],\n      ['arg1', getStakeAuthorizeEncoder()],\n    ]),\n    (value) => ({ ...value, discriminator: AUTHORIZE_DISCRIMINATOR })\n  );\n}\n\nexport function getAuthorizeInstructionDataDecoder(): Decoder<AuthorizeInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['arg0', getAddressDecoder()],\n    ['arg1', getStakeAuthorizeDecoder()],\n  ]);\n}\n\nexport function getAuthorizeInstructionDataCodec(): Codec<\n  AuthorizeInstructionDataArgs,\n  AuthorizeInstructionData\n> {\n  return combineCodec(\n    getAuthorizeInstructionDataEncoder(),\n    getAuthorizeInstructionDataDecoder()\n  );\n}\n\nexport type AuthorizeInput<\n  TAccountStake extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountAuthority extends string = string,\n  TAccountLockupAuthority extends string = string,\n> = {\n  /** Stake account to be updated */\n  stake: Address<TAccountStake>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Stake or withdraw authority */\n  authority: TransactionSigner<TAccountAuthority>;\n  /** Lockup authority */\n  lockupAuthority?: TransactionSigner<TAccountLockupAuthority>;\n  arg0: AuthorizeInstructionDataArgs['arg0'];\n  arg1: AuthorizeInstructionDataArgs['arg1'];\n};\n\nexport function getAuthorizeInstruction<\n  TAccountStake extends string,\n  TAccountClockSysvar extends string,\n  TAccountAuthority extends string,\n  TAccountLockupAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: AuthorizeInput<\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountAuthority,\n    TAccountLockupAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): AuthorizeInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountClockSysvar,\n  TAccountAuthority,\n  TAccountLockupAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    authority: { value: input.authority ?? null, isWritable: false },\n    lockupAuthority: {\n      value: input.lockupAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.authority),\n      getAccountMeta(accounts.lockupAuthority),\n    ],\n    programAddress,\n    data: getAuthorizeInstructionDataEncoder().encode(\n      args as AuthorizeInstructionDataArgs\n    ),\n  } as AuthorizeInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountAuthority,\n    TAccountLockupAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedAuthorizeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account to be updated */\n    stake: TAccountMetas[0];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[1];\n    /** Stake or withdraw authority */\n    authority: TAccountMetas[2];\n    /** Lockup authority */\n    lockupAuthority?: TAccountMetas[3] | undefined;\n  };\n  data: AuthorizeInstructionData;\n};\n\nexport function parseAuthorizeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedAuthorizeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 4) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      authority: getNextAccount(),\n      lockupAuthority: getNextOptionalAccount(),\n    },\n    data: getAuthorizeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getStakeAuthorizeDecoder,\n  getStakeAuthorizeEncoder,\n  type StakeAuthorize,\n  type StakeAuthorizeArgs,\n} from '../types';\n\nexport const AUTHORIZE_CHECKED_DISCRIMINATOR = 10;\n\nexport function getAuthorizeCheckedDiscriminatorBytes() {\n  return getU32Encoder().encode(AUTHORIZE_CHECKED_DISCRIMINATOR);\n}\n\nexport type AuthorizeCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountAuthority extends string | IAccountMeta<string> = string,\n  TAccountNewAuthority extends string | IAccountMeta<string> = string,\n  TAccountLockupAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountAuthority extends string\n        ? ReadonlySignerAccount<TAccountAuthority> &\n            IAccountSignerMeta<TAccountAuthority>\n        : TAccountAuthority,\n      TAccountNewAuthority extends string\n        ? ReadonlySignerAccount<TAccountNewAuthority> &\n            IAccountSignerMeta<TAccountNewAuthority>\n        : TAccountNewAuthority,\n      TAccountLockupAuthority extends string\n        ? ReadonlySignerAccount<TAccountLockupAuthority> &\n            IAccountSignerMeta<TAccountLockupAuthority>\n        : TAccountLockupAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type AuthorizeCheckedInstructionData = {\n  discriminator: number;\n  stakeAuthorize: StakeAuthorize;\n};\n\nexport type AuthorizeCheckedInstructionDataArgs = {\n  stakeAuthorize: StakeAuthorizeArgs;\n};\n\nexport function getAuthorizeCheckedInstructionDataEncoder(): Encoder<AuthorizeCheckedInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['stakeAuthorize', getStakeAuthorizeEncoder()],\n    ]),\n    (value) => ({ ...value, discriminator: AUTHORIZE_CHECKED_DISCRIMINATOR })\n  );\n}\n\nexport function getAuthorizeCheckedInstructionDataDecoder(): Decoder<AuthorizeCheckedInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['stakeAuthorize', getStakeAuthorizeDecoder()],\n  ]);\n}\n\nexport function getAuthorizeCheckedInstructionDataCodec(): Codec<\n  AuthorizeCheckedInstructionDataArgs,\n  AuthorizeCheckedInstructionData\n> {\n  return combineCodec(\n    getAuthorizeCheckedInstructionDataEncoder(),\n    getAuthorizeCheckedInstructionDataDecoder()\n  );\n}\n\nexport type AuthorizeCheckedInput<\n  TAccountStake extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountAuthority extends string = string,\n  TAccountNewAuthority extends string = string,\n  TAccountLockupAuthority extends string = string,\n> = {\n  /** Stake account to be updated */\n  stake: Address<TAccountStake>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** The stake or withdraw authority */\n  authority: TransactionSigner<TAccountAuthority>;\n  /** The new stake or withdraw authority */\n  newAuthority: TransactionSigner<TAccountNewAuthority>;\n  /** Lockup authority */\n  lockupAuthority?: TransactionSigner<TAccountLockupAuthority>;\n  stakeAuthorize: AuthorizeCheckedInstructionDataArgs['stakeAuthorize'];\n};\n\nexport function getAuthorizeCheckedInstruction<\n  TAccountStake extends string,\n  TAccountClockSysvar extends string,\n  TAccountAuthority extends string,\n  TAccountNewAuthority extends string,\n  TAccountLockupAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: AuthorizeCheckedInput<\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountAuthority,\n    TAccountNewAuthority,\n    TAccountLockupAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): AuthorizeCheckedInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountClockSysvar,\n  TAccountAuthority,\n  TAccountNewAuthority,\n  TAccountLockupAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    authority: { value: input.authority ?? null, isWritable: false },\n    newAuthority: { value: input.newAuthority ?? null, isWritable: false },\n    lockupAuthority: {\n      value: input.lockupAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.authority),\n      getAccountMeta(accounts.newAuthority),\n      getAccountMeta(accounts.lockupAuthority),\n    ],\n    programAddress,\n    data: getAuthorizeCheckedInstructionDataEncoder().encode(\n      args as AuthorizeCheckedInstructionDataArgs\n    ),\n  } as AuthorizeCheckedInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountAuthority,\n    TAccountNewAuthority,\n    TAccountLockupAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedAuthorizeCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account to be updated */\n    stake: TAccountMetas[0];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[1];\n    /** The stake or withdraw authority */\n    authority: TAccountMetas[2];\n    /** The new stake or withdraw authority */\n    newAuthority: TAccountMetas[3];\n    /** Lockup authority */\n    lockupAuthority?: TAccountMetas[4] | undefined;\n  };\n  data: AuthorizeCheckedInstructionData;\n};\n\nexport function parseAuthorizeCheckedInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedAuthorizeCheckedInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 5) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      authority: getNextAccount(),\n      newAuthority: getNextAccount(),\n      lockupAuthority: getNextOptionalAccount(),\n    },\n    data: getAuthorizeCheckedInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getStakeAuthorizeDecoder,\n  getStakeAuthorizeEncoder,\n  type StakeAuthorize,\n  type StakeAuthorizeArgs,\n} from '../types';\n\nexport const AUTHORIZE_CHECKED_WITH_SEED_DISCRIMINATOR = 11;\n\nexport function getAuthorizeCheckedWithSeedDiscriminatorBytes() {\n  return getU32Encoder().encode(AUTHORIZE_CHECKED_WITH_SEED_DISCRIMINATOR);\n}\n\nexport type AuthorizeCheckedWithSeedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountBase extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountNewAuthority extends string | IAccountMeta<string> = string,\n  TAccountLockupAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountBase extends string\n        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>\n        : TAccountBase,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountNewAuthority extends string\n        ? ReadonlySignerAccount<TAccountNewAuthority> &\n            IAccountSignerMeta<TAccountNewAuthority>\n        : TAccountNewAuthority,\n      TAccountLockupAuthority extends string\n        ? ReadonlySignerAccount<TAccountLockupAuthority> &\n            IAccountSignerMeta<TAccountLockupAuthority>\n        : TAccountLockupAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type AuthorizeCheckedWithSeedInstructionData = {\n  discriminator: number;\n  stakeAuthorize: StakeAuthorize;\n  authoritySeed: string;\n  authorityOwner: Address;\n};\n\nexport type AuthorizeCheckedWithSeedInstructionDataArgs = {\n  stakeAuthorize: StakeAuthorizeArgs;\n  authoritySeed: string;\n  authorityOwner: Address;\n};\n\nexport function getAuthorizeCheckedWithSeedInstructionDataEncoder(): Encoder<AuthorizeCheckedWithSeedInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['stakeAuthorize', getStakeAuthorizeEncoder()],\n      [\n        'authoritySeed',\n        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n      ],\n      ['authorityOwner', getAddressEncoder()],\n    ]),\n    (value) => ({\n      ...value,\n      discriminator: AUTHORIZE_CHECKED_WITH_SEED_DISCRIMINATOR,\n    })\n  );\n}\n\nexport function getAuthorizeCheckedWithSeedInstructionDataDecoder(): Decoder<AuthorizeCheckedWithSeedInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['stakeAuthorize', getStakeAuthorizeDecoder()],\n    ['authoritySeed', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['authorityOwner', getAddressDecoder()],\n  ]);\n}\n\nexport function getAuthorizeCheckedWithSeedInstructionDataCodec(): Codec<\n  AuthorizeCheckedWithSeedInstructionDataArgs,\n  AuthorizeCheckedWithSeedInstructionData\n> {\n  return combineCodec(\n    getAuthorizeCheckedWithSeedInstructionDataEncoder(),\n    getAuthorizeCheckedWithSeedInstructionDataDecoder()\n  );\n}\n\nexport type AuthorizeCheckedWithSeedInput<\n  TAccountStake extends string = string,\n  TAccountBase extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountNewAuthority extends string = string,\n  TAccountLockupAuthority extends string = string,\n> = {\n  /** Stake account to be updated */\n  stake: Address<TAccountStake>;\n  /** Base key of stake or withdraw authority */\n  base: TransactionSigner<TAccountBase>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** The new stake or withdraw authority */\n  newAuthority: TransactionSigner<TAccountNewAuthority>;\n  /** Lockup authority */\n  lockupAuthority?: TransactionSigner<TAccountLockupAuthority>;\n  stakeAuthorize: AuthorizeCheckedWithSeedInstructionDataArgs['stakeAuthorize'];\n  authoritySeed: AuthorizeCheckedWithSeedInstructionDataArgs['authoritySeed'];\n  authorityOwner: AuthorizeCheckedWithSeedInstructionDataArgs['authorityOwner'];\n};\n\nexport function getAuthorizeCheckedWithSeedInstruction<\n  TAccountStake extends string,\n  TAccountBase extends string,\n  TAccountClockSysvar extends string,\n  TAccountNewAuthority extends string,\n  TAccountLockupAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: AuthorizeCheckedWithSeedInput<\n    TAccountStake,\n    TAccountBase,\n    TAccountClockSysvar,\n    TAccountNewAuthority,\n    TAccountLockupAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): AuthorizeCheckedWithSeedInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountBase,\n  TAccountClockSysvar,\n  TAccountNewAuthority,\n  TAccountLockupAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    base: { value: input.base ?? null, isWritable: false },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    newAuthority: { value: input.newAuthority ?? null, isWritable: false },\n    lockupAuthority: {\n      value: input.lockupAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.base),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.newAuthority),\n      getAccountMeta(accounts.lockupAuthority),\n    ],\n    programAddress,\n    data: getAuthorizeCheckedWithSeedInstructionDataEncoder().encode(\n      args as AuthorizeCheckedWithSeedInstructionDataArgs\n    ),\n  } as AuthorizeCheckedWithSeedInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountBase,\n    TAccountClockSysvar,\n    TAccountNewAuthority,\n    TAccountLockupAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedAuthorizeCheckedWithSeedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account to be updated */\n    stake: TAccountMetas[0];\n    /** Base key of stake or withdraw authority */\n    base: TAccountMetas[1];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[2];\n    /** The new stake or withdraw authority */\n    newAuthority: TAccountMetas[3];\n    /** Lockup authority */\n    lockupAuthority?: TAccountMetas[4] | undefined;\n  };\n  data: AuthorizeCheckedWithSeedInstructionData;\n};\n\nexport function parseAuthorizeCheckedWithSeedInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedAuthorizeCheckedWithSeedInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 5) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      base: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      newAuthority: getNextAccount(),\n      lockupAuthority: getNextOptionalAccount(),\n    },\n    data: getAuthorizeCheckedWithSeedInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getStakeAuthorizeDecoder,\n  getStakeAuthorizeEncoder,\n  type StakeAuthorize,\n  type StakeAuthorizeArgs,\n} from '../types';\n\nexport const AUTHORIZE_WITH_SEED_DISCRIMINATOR = 8;\n\nexport function getAuthorizeWithSeedDiscriminatorBytes() {\n  return getU32Encoder().encode(AUTHORIZE_WITH_SEED_DISCRIMINATOR);\n}\n\nexport type AuthorizeWithSeedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountBase extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountLockupAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountBase extends string\n        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>\n        : TAccountBase,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountLockupAuthority extends string\n        ? ReadonlySignerAccount<TAccountLockupAuthority> &\n            IAccountSignerMeta<TAccountLockupAuthority>\n        : TAccountLockupAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type AuthorizeWithSeedInstructionData = {\n  discriminator: number;\n  newAuthorizedPubkey: Address;\n  stakeAuthorize: StakeAuthorize;\n  authoritySeed: string;\n  authorityOwner: Address;\n};\n\nexport type AuthorizeWithSeedInstructionDataArgs = {\n  newAuthorizedPubkey: Address;\n  stakeAuthorize: StakeAuthorizeArgs;\n  authoritySeed: string;\n  authorityOwner: Address;\n};\n\nexport function getAuthorizeWithSeedInstructionDataEncoder(): Encoder<AuthorizeWithSeedInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['newAuthorizedPubkey', getAddressEncoder()],\n      ['stakeAuthorize', getStakeAuthorizeEncoder()],\n      [\n        'authoritySeed',\n        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n      ],\n      ['authorityOwner', getAddressEncoder()],\n    ]),\n    (value) => ({ ...value, discriminator: AUTHORIZE_WITH_SEED_DISCRIMINATOR })\n  );\n}\n\nexport function getAuthorizeWithSeedInstructionDataDecoder(): Decoder<AuthorizeWithSeedInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['newAuthorizedPubkey', getAddressDecoder()],\n    ['stakeAuthorize', getStakeAuthorizeDecoder()],\n    ['authoritySeed', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['authorityOwner', getAddressDecoder()],\n  ]);\n}\n\nexport function getAuthorizeWithSeedInstructionDataCodec(): Codec<\n  AuthorizeWithSeedInstructionDataArgs,\n  AuthorizeWithSeedInstructionData\n> {\n  return combineCodec(\n    getAuthorizeWithSeedInstructionDataEncoder(),\n    getAuthorizeWithSeedInstructionDataDecoder()\n  );\n}\n\nexport type AuthorizeWithSeedInput<\n  TAccountStake extends string = string,\n  TAccountBase extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountLockupAuthority extends string = string,\n> = {\n  /** Stake account to be updated */\n  stake: Address<TAccountStake>;\n  /** Base key of stake or withdraw authority */\n  base: TransactionSigner<TAccountBase>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Lockup authority */\n  lockupAuthority?: TransactionSigner<TAccountLockupAuthority>;\n  newAuthorizedPubkey: AuthorizeWithSeedInstructionDataArgs['newAuthorizedPubkey'];\n  stakeAuthorize: AuthorizeWithSeedInstructionDataArgs['stakeAuthorize'];\n  authoritySeed: AuthorizeWithSeedInstructionDataArgs['authoritySeed'];\n  authorityOwner: AuthorizeWithSeedInstructionDataArgs['authorityOwner'];\n};\n\nexport function getAuthorizeWithSeedInstruction<\n  TAccountStake extends string,\n  TAccountBase extends string,\n  TAccountClockSysvar extends string,\n  TAccountLockupAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: AuthorizeWithSeedInput<\n    TAccountStake,\n    TAccountBase,\n    TAccountClockSysvar,\n    TAccountLockupAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): AuthorizeWithSeedInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountBase,\n  TAccountClockSysvar,\n  TAccountLockupAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    base: { value: input.base ?? null, isWritable: false },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    lockupAuthority: {\n      value: input.lockupAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.base),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.lockupAuthority),\n    ],\n    programAddress,\n    data: getAuthorizeWithSeedInstructionDataEncoder().encode(\n      args as AuthorizeWithSeedInstructionDataArgs\n    ),\n  } as AuthorizeWithSeedInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountBase,\n    TAccountClockSysvar,\n    TAccountLockupAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedAuthorizeWithSeedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account to be updated */\n    stake: TAccountMetas[0];\n    /** Base key of stake or withdraw authority */\n    base: TAccountMetas[1];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[2];\n    /** Lockup authority */\n    lockupAuthority?: TAccountMetas[3] | undefined;\n  };\n  data: AuthorizeWithSeedInstructionData;\n};\n\nexport function parseAuthorizeWithSeedInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedAuthorizeWithSeedInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 4) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      base: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      lockupAuthority: getNextOptionalAccount(),\n    },\n    data: getAuthorizeWithSeedInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const DEACTIVATE_DISCRIMINATOR = 5;\n\nexport function getDeactivateDiscriminatorBytes() {\n  return getU32Encoder().encode(DEACTIVATE_DISCRIMINATOR);\n}\n\nexport type DeactivateInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type DeactivateInstructionData = { discriminator: number };\n\nexport type DeactivateInstructionDataArgs = {};\n\nexport function getDeactivateInstructionDataEncoder(): Encoder<DeactivateInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({ ...value, discriminator: DEACTIVATE_DISCRIMINATOR })\n  );\n}\n\nexport function getDeactivateInstructionDataDecoder(): Decoder<DeactivateInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getDeactivateInstructionDataCodec(): Codec<\n  DeactivateInstructionDataArgs,\n  DeactivateInstructionData\n> {\n  return combineCodec(\n    getDeactivateInstructionDataEncoder(),\n    getDeactivateInstructionDataDecoder()\n  );\n}\n\nexport type DeactivateInput<\n  TAccountStake extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Delegated stake account */\n  stake: Address<TAccountStake>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n};\n\nexport function getDeactivateInstruction<\n  TAccountStake extends string,\n  TAccountClockSysvar extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: DeactivateInput<\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountStakeAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): DeactivateInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountClockSysvar,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getDeactivateInstructionDataEncoder().encode({}),\n  } as DeactivateInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountClockSysvar,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedDeactivateInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Delegated stake account */\n    stake: TAccountMetas[0];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[1];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[2];\n  };\n  data: DeactivateInstructionData;\n};\n\nexport function parseDeactivateInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedDeactivateInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getDeactivateInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const DEACTIVATE_DELINQUENT_DISCRIMINATOR = 14;\n\nexport function getDeactivateDelinquentDiscriminatorBytes() {\n  return getU32Encoder().encode(DEACTIVATE_DELINQUENT_DISCRIMINATOR);\n}\n\nexport type DeactivateDelinquentInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountDelinquentVote extends string | IAccountMeta<string> = string,\n  TAccountReferenceVote extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountDelinquentVote extends string\n        ? ReadonlyAccount<TAccountDelinquentVote>\n        : TAccountDelinquentVote,\n      TAccountReferenceVote extends string\n        ? ReadonlyAccount<TAccountReferenceVote>\n        : TAccountReferenceVote,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type DeactivateDelinquentInstructionData = { discriminator: number };\n\nexport type DeactivateDelinquentInstructionDataArgs = {};\n\nexport function getDeactivateDelinquentInstructionDataEncoder(): Encoder<DeactivateDelinquentInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({\n      ...value,\n      discriminator: DEACTIVATE_DELINQUENT_DISCRIMINATOR,\n    })\n  );\n}\n\nexport function getDeactivateDelinquentInstructionDataDecoder(): Decoder<DeactivateDelinquentInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getDeactivateDelinquentInstructionDataCodec(): Codec<\n  DeactivateDelinquentInstructionDataArgs,\n  DeactivateDelinquentInstructionData\n> {\n  return combineCodec(\n    getDeactivateDelinquentInstructionDataEncoder(),\n    getDeactivateDelinquentInstructionDataDecoder()\n  );\n}\n\nexport type DeactivateDelinquentInput<\n  TAccountStake extends string = string,\n  TAccountDelinquentVote extends string = string,\n  TAccountReferenceVote extends string = string,\n> = {\n  /** Delegated stake account */\n  stake: Address<TAccountStake>;\n  /** Delinquent vote account */\n  delinquentVote: Address<TAccountDelinquentVote>;\n  /** Reference vote account */\n  referenceVote: Address<TAccountReferenceVote>;\n};\n\nexport function getDeactivateDelinquentInstruction<\n  TAccountStake extends string,\n  TAccountDelinquentVote extends string,\n  TAccountReferenceVote extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: DeactivateDelinquentInput<\n    TAccountStake,\n    TAccountDelinquentVote,\n    TAccountReferenceVote\n  >,\n  config?: { programAddress?: TProgramAddress }\n): DeactivateDelinquentInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountDelinquentVote,\n  TAccountReferenceVote\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    delinquentVote: { value: input.delinquentVote ?? null, isWritable: false },\n    referenceVote: { value: input.referenceVote ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.delinquentVote),\n      getAccountMeta(accounts.referenceVote),\n    ],\n    programAddress,\n    data: getDeactivateDelinquentInstructionDataEncoder().encode({}),\n  } as DeactivateDelinquentInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountDelinquentVote,\n    TAccountReferenceVote\n  >;\n\n  return instruction;\n}\n\nexport type ParsedDeactivateDelinquentInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Delegated stake account */\n    stake: TAccountMetas[0];\n    /** Delinquent vote account */\n    delinquentVote: TAccountMetas[1];\n    /** Reference vote account */\n    referenceVote: TAccountMetas[2];\n  };\n  data: DeactivateDelinquentInstructionData;\n};\n\nexport function parseDeactivateDelinquentInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedDeactivateDelinquentInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      delinquentVote: getNextAccount(),\n      referenceVote: getNextAccount(),\n    },\n    data: getDeactivateDelinquentInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const DELEGATE_STAKE_DISCRIMINATOR = 2;\n\nexport function getDelegateStakeDiscriminatorBytes() {\n  return getU32Encoder().encode(DELEGATE_STAKE_DISCRIMINATOR);\n}\n\nexport type DelegateStakeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountVote extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountStakeHistory extends string | IAccountMeta<string> = string,\n  TAccountUnused extends string | IAccountMeta<string> = string,\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountVote extends string\n        ? ReadonlyAccount<TAccountVote>\n        : TAccountVote,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountStakeHistory extends string\n        ? ReadonlyAccount<TAccountStakeHistory>\n        : TAccountStakeHistory,\n      TAccountUnused extends string\n        ? ReadonlyAccount<TAccountUnused>\n        : TAccountUnused,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type DelegateStakeInstructionData = { discriminator: number };\n\nexport type DelegateStakeInstructionDataArgs = {};\n\nexport function getDelegateStakeInstructionDataEncoder(): Encoder<DelegateStakeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({ ...value, discriminator: DELEGATE_STAKE_DISCRIMINATOR })\n  );\n}\n\nexport function getDelegateStakeInstructionDataDecoder(): Decoder<DelegateStakeInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getDelegateStakeInstructionDataCodec(): Codec<\n  DelegateStakeInstructionDataArgs,\n  DelegateStakeInstructionData\n> {\n  return combineCodec(\n    getDelegateStakeInstructionDataEncoder(),\n    getDelegateStakeInstructionDataDecoder()\n  );\n}\n\nexport type DelegateStakeInput<\n  TAccountStake extends string = string,\n  TAccountVote extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountStakeHistory extends string = string,\n  TAccountUnused extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Initialized stake account to be delegated */\n  stake: Address<TAccountStake>;\n  /** Vote account to which this stake will be delegated */\n  vote: Address<TAccountVote>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Stake history sysvar */\n  stakeHistory: Address<TAccountStakeHistory>;\n  /** Unused account, formerly the stake config */\n  unused: Address<TAccountUnused>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n};\n\nexport function getDelegateStakeInstruction<\n  TAccountStake extends string,\n  TAccountVote extends string,\n  TAccountClockSysvar extends string,\n  TAccountStakeHistory extends string,\n  TAccountUnused extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: DelegateStakeInput<\n    TAccountStake,\n    TAccountVote,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountUnused,\n    TAccountStakeAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): DelegateStakeInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountVote,\n  TAccountClockSysvar,\n  TAccountStakeHistory,\n  TAccountUnused,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    vote: { value: input.vote ?? null, isWritable: false },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },\n    unused: { value: input.unused ?? null, isWritable: false },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.vote),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.stakeHistory),\n      getAccountMeta(accounts.unused),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getDelegateStakeInstructionDataEncoder().encode({}),\n  } as DelegateStakeInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountVote,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountUnused,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedDelegateStakeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Initialized stake account to be delegated */\n    stake: TAccountMetas[0];\n    /** Vote account to which this stake will be delegated */\n    vote: TAccountMetas[1];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[2];\n    /** Stake history sysvar */\n    stakeHistory: TAccountMetas[3];\n    /** Unused account, formerly the stake config */\n    unused: TAccountMetas[4];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[5];\n  };\n  data: DelegateStakeInstructionData;\n};\n\nexport function parseDelegateStakeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedDelegateStakeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 6) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      vote: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      stakeHistory: getNextAccount(),\n      unused: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getDelegateStakeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\n\nexport const GET_MINIMUM_DELEGATION_DISCRIMINATOR = 13;\n\nexport function getGetMinimumDelegationDiscriminatorBytes() {\n  return getU32Encoder().encode(GET_MINIMUM_DELEGATION_DISCRIMINATOR);\n}\n\nexport type GetMinimumDelegationInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<TRemainingAccounts>;\n\nexport type GetMinimumDelegationInstructionData = { discriminator: number };\n\nexport type GetMinimumDelegationInstructionDataArgs = {};\n\nexport function getGetMinimumDelegationInstructionDataEncoder(): Encoder<GetMinimumDelegationInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({\n      ...value,\n      discriminator: GET_MINIMUM_DELEGATION_DISCRIMINATOR,\n    })\n  );\n}\n\nexport function getGetMinimumDelegationInstructionDataDecoder(): Decoder<GetMinimumDelegationInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getGetMinimumDelegationInstructionDataCodec(): Codec<\n  GetMinimumDelegationInstructionDataArgs,\n  GetMinimumDelegationInstructionData\n> {\n  return combineCodec(\n    getGetMinimumDelegationInstructionDataEncoder(),\n    getGetMinimumDelegationInstructionDataDecoder()\n  );\n}\n\nexport type GetMinimumDelegationInput = {};\n\nexport function getGetMinimumDelegationInstruction<\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(config?: {\n  programAddress?: TProgramAddress;\n}): GetMinimumDelegationInstruction<TProgramAddress> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  const instruction = {\n    programAddress,\n    data: getGetMinimumDelegationInstructionDataEncoder().encode({}),\n  } as GetMinimumDelegationInstruction<TProgramAddress>;\n\n  return instruction;\n}\n\nexport type ParsedGetMinimumDelegationInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n> = {\n  programAddress: Address<TProgram>;\n  data: GetMinimumDelegationInstructionData;\n};\n\nexport function parseGetMinimumDelegationInstruction<TProgram extends string>(\n  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>\n): ParsedGetMinimumDelegationInstruction<TProgram> {\n  return {\n    programAddress: instruction.programAddress,\n    data: getGetMinimumDelegationInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getAuthorizedDecoder,\n  getAuthorizedEncoder,\n  getLockupDecoder,\n  getLockupEncoder,\n  type Authorized,\n  type AuthorizedArgs,\n  type Lockup,\n  type LockupArgs,\n} from '../types';\n\nexport const INITIALIZE_DISCRIMINATOR = 0;\n\nexport function getInitializeDiscriminatorBytes() {\n  return getU32Encoder().encode(INITIALIZE_DISCRIMINATOR);\n}\n\nexport type InitializeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountRentSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountRentSysvar extends string\n        ? ReadonlyAccount<TAccountRentSysvar>\n        : TAccountRentSysvar,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type InitializeInstructionData = {\n  discriminator: number;\n  arg0: Authorized;\n  arg1: Lockup;\n};\n\nexport type InitializeInstructionDataArgs = {\n  arg0: AuthorizedArgs;\n  arg1: LockupArgs;\n};\n\nexport function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['arg0', getAuthorizedEncoder()],\n      ['arg1', getLockupEncoder()],\n    ]),\n    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })\n  );\n}\n\nexport function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['arg0', getAuthorizedDecoder()],\n    ['arg1', getLockupDecoder()],\n  ]);\n}\n\nexport function getInitializeInstructionDataCodec(): Codec<\n  InitializeInstructionDataArgs,\n  InitializeInstructionData\n> {\n  return combineCodec(\n    getInitializeInstructionDataEncoder(),\n    getInitializeInstructionDataDecoder()\n  );\n}\n\nexport type InitializeInput<\n  TAccountStake extends string = string,\n  TAccountRentSysvar extends string = string,\n> = {\n  /** Uninitialized stake account */\n  stake: Address<TAccountStake>;\n  /** Rent sysvar */\n  rentSysvar?: Address<TAccountRentSysvar>;\n  arg0: InitializeInstructionDataArgs['arg0'];\n  arg1: InitializeInstructionDataArgs['arg1'];\n};\n\nexport function getInitializeInstruction<\n  TAccountStake extends string,\n  TAccountRentSysvar extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: InitializeInput<TAccountStake, TAccountRentSysvar>,\n  config?: { programAddress?: TProgramAddress }\n): InitializeInstruction<TProgramAddress, TAccountStake, TAccountRentSysvar> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.rentSysvar.value) {\n    accounts.rentSysvar.value =\n      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.rentSysvar),\n    ],\n    programAddress,\n    data: getInitializeInstructionDataEncoder().encode(\n      args as InitializeInstructionDataArgs\n    ),\n  } as InitializeInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountRentSysvar\n  >;\n\n  return instruction;\n}\n\nexport type ParsedInitializeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Uninitialized stake account */\n    stake: TAccountMetas[0];\n    /** Rent sysvar */\n    rentSysvar: TAccountMetas[1];\n  };\n  data: InitializeInstructionData;\n};\n\nexport function parseInitializeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedInitializeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 2) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      rentSysvar: getNextAccount(),\n    },\n    data: getInitializeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const INITIALIZE_CHECKED_DISCRIMINATOR = 9;\n\nexport function getInitializeCheckedDiscriminatorBytes() {\n  return getU32Encoder().encode(INITIALIZE_CHECKED_DISCRIMINATOR);\n}\n\nexport type InitializeCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountRentSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountRentSysvar extends string\n        ? ReadonlyAccount<TAccountRentSysvar>\n        : TAccountRentSysvar,\n      TAccountStakeAuthority extends string\n        ? ReadonlyAccount<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      TAccountWithdrawAuthority extends string\n        ? ReadonlySignerAccount<TAccountWithdrawAuthority> &\n            IAccountSignerMeta<TAccountWithdrawAuthority>\n        : TAccountWithdrawAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type InitializeCheckedInstructionData = { discriminator: number };\n\nexport type InitializeCheckedInstructionDataArgs = {};\n\nexport function getInitializeCheckedInstructionDataEncoder(): Encoder<InitializeCheckedInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({ ...value, discriminator: INITIALIZE_CHECKED_DISCRIMINATOR })\n  );\n}\n\nexport function getInitializeCheckedInstructionDataDecoder(): Decoder<InitializeCheckedInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getInitializeCheckedInstructionDataCodec(): Codec<\n  InitializeCheckedInstructionDataArgs,\n  InitializeCheckedInstructionData\n> {\n  return combineCodec(\n    getInitializeCheckedInstructionDataEncoder(),\n    getInitializeCheckedInstructionDataDecoder()\n  );\n}\n\nexport type InitializeCheckedInput<\n  TAccountStake extends string = string,\n  TAccountRentSysvar extends string = string,\n  TAccountStakeAuthority extends string = string,\n  TAccountWithdrawAuthority extends string = string,\n> = {\n  /** Uninitialized stake account */\n  stake: Address<TAccountStake>;\n  /** Rent sysvar */\n  rentSysvar?: Address<TAccountRentSysvar>;\n  /** The stake authority */\n  stakeAuthority: Address<TAccountStakeAuthority>;\n  /** The withdraw authority */\n  withdrawAuthority: TransactionSigner<TAccountWithdrawAuthority>;\n};\n\nexport function getInitializeCheckedInstruction<\n  TAccountStake extends string,\n  TAccountRentSysvar extends string,\n  TAccountStakeAuthority extends string,\n  TAccountWithdrawAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: InitializeCheckedInput<\n    TAccountStake,\n    TAccountRentSysvar,\n    TAccountStakeAuthority,\n    TAccountWithdrawAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): InitializeCheckedInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountRentSysvar,\n  TAccountStakeAuthority,\n  TAccountWithdrawAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    rentSysvar: { value: input.rentSysvar ?? null, isWritable: false },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n    withdrawAuthority: {\n      value: input.withdrawAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Resolve default values.\n  if (!accounts.rentSysvar.value) {\n    accounts.rentSysvar.value =\n      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.rentSysvar),\n      getAccountMeta(accounts.stakeAuthority),\n      getAccountMeta(accounts.withdrawAuthority),\n    ],\n    programAddress,\n    data: getInitializeCheckedInstructionDataEncoder().encode({}),\n  } as InitializeCheckedInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountRentSysvar,\n    TAccountStakeAuthority,\n    TAccountWithdrawAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedInitializeCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Uninitialized stake account */\n    stake: TAccountMetas[0];\n    /** Rent sysvar */\n    rentSysvar: TAccountMetas[1];\n    /** The stake authority */\n    stakeAuthority: TAccountMetas[2];\n    /** The withdraw authority */\n    withdrawAuthority: TAccountMetas[3];\n  };\n  data: InitializeCheckedInstructionData;\n};\n\nexport function parseInitializeCheckedInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedInitializeCheckedInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 4) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      rentSysvar: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n      withdrawAuthority: getNextAccount(),\n    },\n    data: getInitializeCheckedInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const MERGE_DISCRIMINATOR = 7;\n\nexport function getMergeDiscriminatorBytes() {\n  return getU32Encoder().encode(MERGE_DISCRIMINATOR);\n}\n\nexport type MergeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountDestinationStake extends string | IAccountMeta<string> = string,\n  TAccountSourceStake extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountStakeHistory extends string | IAccountMeta<string> = string,\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountDestinationStake extends string\n        ? WritableAccount<TAccountDestinationStake>\n        : TAccountDestinationStake,\n      TAccountSourceStake extends string\n        ? WritableAccount<TAccountSourceStake>\n        : TAccountSourceStake,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountStakeHistory extends string\n        ? ReadonlyAccount<TAccountStakeHistory>\n        : TAccountStakeHistory,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type MergeInstructionData = { discriminator: number };\n\nexport type MergeInstructionDataArgs = {};\n\nexport function getMergeInstructionDataEncoder(): Encoder<MergeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([['discriminator', getU32Encoder()]]),\n    (value) => ({ ...value, discriminator: MERGE_DISCRIMINATOR })\n  );\n}\n\nexport function getMergeInstructionDataDecoder(): Decoder<MergeInstructionData> {\n  return getStructDecoder([['discriminator', getU32Decoder()]]);\n}\n\nexport function getMergeInstructionDataCodec(): Codec<\n  MergeInstructionDataArgs,\n  MergeInstructionData\n> {\n  return combineCodec(\n    getMergeInstructionDataEncoder(),\n    getMergeInstructionDataDecoder()\n  );\n}\n\nexport type MergeInput<\n  TAccountDestinationStake extends string = string,\n  TAccountSourceStake extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountStakeHistory extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Destination stake account */\n  destinationStake: Address<TAccountDestinationStake>;\n  /** Source stake account */\n  sourceStake: Address<TAccountSourceStake>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Stake history sysvar */\n  stakeHistory: Address<TAccountStakeHistory>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n};\n\nexport function getMergeInstruction<\n  TAccountDestinationStake extends string,\n  TAccountSourceStake extends string,\n  TAccountClockSysvar extends string,\n  TAccountStakeHistory extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: MergeInput<\n    TAccountDestinationStake,\n    TAccountSourceStake,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountStakeAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): MergeInstruction<\n  TProgramAddress,\n  TAccountDestinationStake,\n  TAccountSourceStake,\n  TAccountClockSysvar,\n  TAccountStakeHistory,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    destinationStake: {\n      value: input.destinationStake ?? null,\n      isWritable: true,\n    },\n    sourceStake: { value: input.sourceStake ?? null, isWritable: true },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.destinationStake),\n      getAccountMeta(accounts.sourceStake),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.stakeHistory),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getMergeInstructionDataEncoder().encode({}),\n  } as MergeInstruction<\n    TProgramAddress,\n    TAccountDestinationStake,\n    TAccountSourceStake,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedMergeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Destination stake account */\n    destinationStake: TAccountMetas[0];\n    /** Source stake account */\n    sourceStake: TAccountMetas[1];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[2];\n    /** Stake history sysvar */\n    stakeHistory: TAccountMetas[3];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[4];\n  };\n  data: MergeInstructionData;\n};\n\nexport function parseMergeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedMergeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 5) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      destinationStake: getNextAccount(),\n      sourceStake: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      stakeHistory: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getMergeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const MOVE_LAMPORTS_DISCRIMINATOR = 17;\n\nexport function getMoveLamportsDiscriminatorBytes() {\n  return getU32Encoder().encode(MOVE_LAMPORTS_DISCRIMINATOR);\n}\n\nexport type MoveLamportsInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountSourceStake extends string | IAccountMeta<string> = string,\n  TAccountDestinationStake extends string | IAccountMeta<string> = string,\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSourceStake extends string\n        ? WritableAccount<TAccountSourceStake>\n        : TAccountSourceStake,\n      TAccountDestinationStake extends string\n        ? WritableAccount<TAccountDestinationStake>\n        : TAccountDestinationStake,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type MoveLamportsInstructionData = {\n  discriminator: number;\n  args: bigint;\n};\n\nexport type MoveLamportsInstructionDataArgs = { args: number | bigint };\n\nexport function getMoveLamportsInstructionDataEncoder(): Encoder<MoveLamportsInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['args', getU64Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: MOVE_LAMPORTS_DISCRIMINATOR })\n  );\n}\n\nexport function getMoveLamportsInstructionDataDecoder(): Decoder<MoveLamportsInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['args', getU64Decoder()],\n  ]);\n}\n\nexport function getMoveLamportsInstructionDataCodec(): Codec<\n  MoveLamportsInstructionDataArgs,\n  MoveLamportsInstructionData\n> {\n  return combineCodec(\n    getMoveLamportsInstructionDataEncoder(),\n    getMoveLamportsInstructionDataDecoder()\n  );\n}\n\nexport type MoveLamportsInput<\n  TAccountSourceStake extends string = string,\n  TAccountDestinationStake extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Active or inactive source stake account */\n  sourceStake: Address<TAccountSourceStake>;\n  /** Mergeable destination stake account */\n  destinationStake: Address<TAccountDestinationStake>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n  args: MoveLamportsInstructionDataArgs['args'];\n};\n\nexport function getMoveLamportsInstruction<\n  TAccountSourceStake extends string,\n  TAccountDestinationStake extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: MoveLamportsInput<\n    TAccountSourceStake,\n    TAccountDestinationStake,\n    TAccountStakeAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): MoveLamportsInstruction<\n  TProgramAddress,\n  TAccountSourceStake,\n  TAccountDestinationStake,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    sourceStake: { value: input.sourceStake ?? null, isWritable: true },\n    destinationStake: {\n      value: input.destinationStake ?? null,\n      isWritable: true,\n    },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.sourceStake),\n      getAccountMeta(accounts.destinationStake),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getMoveLamportsInstructionDataEncoder().encode(\n      args as MoveLamportsInstructionDataArgs\n    ),\n  } as MoveLamportsInstruction<\n    TProgramAddress,\n    TAccountSourceStake,\n    TAccountDestinationStake,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedMoveLamportsInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Active or inactive source stake account */\n    sourceStake: TAccountMetas[0];\n    /** Mergeable destination stake account */\n    destinationStake: TAccountMetas[1];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[2];\n  };\n  data: MoveLamportsInstructionData;\n};\n\nexport function parseMoveLamportsInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedMoveLamportsInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      sourceStake: getNextAccount(),\n      destinationStake: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getMoveLamportsInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const MOVE_STAKE_DISCRIMINATOR = 16;\n\nexport function getMoveStakeDiscriminatorBytes() {\n  return getU32Encoder().encode(MOVE_STAKE_DISCRIMINATOR);\n}\n\nexport type MoveStakeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountSourceStake extends string | IAccountMeta<string> = string,\n  TAccountDestinationStake extends string | IAccountMeta<string> = string,\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSourceStake extends string\n        ? WritableAccount<TAccountSourceStake>\n        : TAccountSourceStake,\n      TAccountDestinationStake extends string\n        ? WritableAccount<TAccountDestinationStake>\n        : TAccountDestinationStake,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type MoveStakeInstructionData = { discriminator: number; args: bigint };\n\nexport type MoveStakeInstructionDataArgs = { args: number | bigint };\n\nexport function getMoveStakeInstructionDataEncoder(): Encoder<MoveStakeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['args', getU64Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: MOVE_STAKE_DISCRIMINATOR })\n  );\n}\n\nexport function getMoveStakeInstructionDataDecoder(): Decoder<MoveStakeInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['args', getU64Decoder()],\n  ]);\n}\n\nexport function getMoveStakeInstructionDataCodec(): Codec<\n  MoveStakeInstructionDataArgs,\n  MoveStakeInstructionData\n> {\n  return combineCodec(\n    getMoveStakeInstructionDataEncoder(),\n    getMoveStakeInstructionDataDecoder()\n  );\n}\n\nexport type MoveStakeInput<\n  TAccountSourceStake extends string = string,\n  TAccountDestinationStake extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Active source stake account */\n  sourceStake: Address<TAccountSourceStake>;\n  /** Active or inactive destination stake account */\n  destinationStake: Address<TAccountDestinationStake>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n  args: MoveStakeInstructionDataArgs['args'];\n};\n\nexport function getMoveStakeInstruction<\n  TAccountSourceStake extends string,\n  TAccountDestinationStake extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: MoveStakeInput<\n    TAccountSourceStake,\n    TAccountDestinationStake,\n    TAccountStakeAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): MoveStakeInstruction<\n  TProgramAddress,\n  TAccountSourceStake,\n  TAccountDestinationStake,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    sourceStake: { value: input.sourceStake ?? null, isWritable: true },\n    destinationStake: {\n      value: input.destinationStake ?? null,\n      isWritable: true,\n    },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.sourceStake),\n      getAccountMeta(accounts.destinationStake),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getMoveStakeInstructionDataEncoder().encode(\n      args as MoveStakeInstructionDataArgs\n    ),\n  } as MoveStakeInstruction<\n    TProgramAddress,\n    TAccountSourceStake,\n    TAccountDestinationStake,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedMoveStakeInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Active source stake account */\n    sourceStake: TAccountMetas[0];\n    /** Active or inactive destination stake account */\n    destinationStake: TAccountMetas[1];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[2];\n  };\n  data: MoveStakeInstructionData;\n};\n\nexport function parseMoveStakeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedMoveStakeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      sourceStake: getNextAccount(),\n      destinationStake: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getMoveStakeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getAddressDecoder,\n  getAddressEncoder,\n  getI64Decoder,\n  getI64Encoder,\n  getOptionDecoder,\n  getOptionEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type Option,\n  type OptionOrNullable,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const SET_LOCKUP_DISCRIMINATOR = 6;\n\nexport function getSetLockupDiscriminatorBytes() {\n  return getU32Encoder().encode(SET_LOCKUP_DISCRIMINATOR);\n}\n\nexport type SetLockupInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountAuthority extends string\n        ? ReadonlySignerAccount<TAccountAuthority> &\n            IAccountSignerMeta<TAccountAuthority>\n        : TAccountAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type SetLockupInstructionData = {\n  discriminator: number;\n  unixTimestamp: Option<bigint>;\n  epoch: Option<bigint>;\n  custodian: Option<Address>;\n};\n\nexport type SetLockupInstructionDataArgs = {\n  unixTimestamp: OptionOrNullable<number | bigint>;\n  epoch: OptionOrNullable<number | bigint>;\n  custodian: OptionOrNullable<Address>;\n};\n\nexport function getSetLockupInstructionDataEncoder(): Encoder<SetLockupInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['unixTimestamp', getOptionEncoder(getI64Encoder())],\n      ['epoch', getOptionEncoder(getU64Encoder())],\n      ['custodian', getOptionEncoder(getAddressEncoder())],\n    ]),\n    (value) => ({ ...value, discriminator: SET_LOCKUP_DISCRIMINATOR })\n  );\n}\n\nexport function getSetLockupInstructionDataDecoder(): Decoder<SetLockupInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['unixTimestamp', getOptionDecoder(getI64Decoder())],\n    ['epoch', getOptionDecoder(getU64Decoder())],\n    ['custodian', getOptionDecoder(getAddressDecoder())],\n  ]);\n}\n\nexport function getSetLockupInstructionDataCodec(): Codec<\n  SetLockupInstructionDataArgs,\n  SetLockupInstructionData\n> {\n  return combineCodec(\n    getSetLockupInstructionDataEncoder(),\n    getSetLockupInstructionDataDecoder()\n  );\n}\n\nexport type SetLockupInput<\n  TAccountStake extends string = string,\n  TAccountAuthority extends string = string,\n> = {\n  /** Initialized stake account */\n  stake: Address<TAccountStake>;\n  /** Lockup authority or withdraw authority */\n  authority: TransactionSigner<TAccountAuthority>;\n  unixTimestamp: SetLockupInstructionDataArgs['unixTimestamp'];\n  epoch: SetLockupInstructionDataArgs['epoch'];\n  custodian: SetLockupInstructionDataArgs['custodian'];\n};\n\nexport function getSetLockupInstruction<\n  TAccountStake extends string,\n  TAccountAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: SetLockupInput<TAccountStake, TAccountAuthority>,\n  config?: { programAddress?: TProgramAddress }\n): SetLockupInstruction<TProgramAddress, TAccountStake, TAccountAuthority> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    authority: { value: input.authority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.authority),\n    ],\n    programAddress,\n    data: getSetLockupInstructionDataEncoder().encode(\n      args as SetLockupInstructionDataArgs\n    ),\n  } as SetLockupInstruction<TProgramAddress, TAccountStake, TAccountAuthority>;\n\n  return instruction;\n}\n\nexport type ParsedSetLockupInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Initialized stake account */\n    stake: TAccountMetas[0];\n    /** Lockup authority or withdraw authority */\n    authority: TAccountMetas[1];\n  };\n  data: SetLockupInstructionData;\n};\n\nexport function parseSetLockupInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedSetLockupInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 2) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      authority: getNextAccount(),\n    },\n    data: getSetLockupInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getI64Decoder,\n  getI64Encoder,\n  getOptionDecoder,\n  getOptionEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type Option,\n  type OptionOrNullable,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const SET_LOCKUP_CHECKED_DISCRIMINATOR = 12;\n\nexport function getSetLockupCheckedDiscriminatorBytes() {\n  return getU32Encoder().encode(SET_LOCKUP_CHECKED_DISCRIMINATOR);\n}\n\nexport type SetLockupCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountAuthority extends string | IAccountMeta<string> = string,\n  TAccountNewAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountAuthority extends string\n        ? ReadonlySignerAccount<TAccountAuthority> &\n            IAccountSignerMeta<TAccountAuthority>\n        : TAccountAuthority,\n      TAccountNewAuthority extends string\n        ? ReadonlySignerAccount<TAccountNewAuthority> &\n            IAccountSignerMeta<TAccountNewAuthority>\n        : TAccountNewAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type SetLockupCheckedInstructionData = {\n  discriminator: number;\n  unixTimestamp: Option<bigint>;\n  epoch: Option<bigint>;\n};\n\nexport type SetLockupCheckedInstructionDataArgs = {\n  unixTimestamp: OptionOrNullable<number | bigint>;\n  epoch: OptionOrNullable<number | bigint>;\n};\n\nexport function getSetLockupCheckedInstructionDataEncoder(): Encoder<SetLockupCheckedInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['unixTimestamp', getOptionEncoder(getI64Encoder())],\n      ['epoch', getOptionEncoder(getU64Encoder())],\n    ]),\n    (value) => ({ ...value, discriminator: SET_LOCKUP_CHECKED_DISCRIMINATOR })\n  );\n}\n\nexport function getSetLockupCheckedInstructionDataDecoder(): Decoder<SetLockupCheckedInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['unixTimestamp', getOptionDecoder(getI64Decoder())],\n    ['epoch', getOptionDecoder(getU64Decoder())],\n  ]);\n}\n\nexport function getSetLockupCheckedInstructionDataCodec(): Codec<\n  SetLockupCheckedInstructionDataArgs,\n  SetLockupCheckedInstructionData\n> {\n  return combineCodec(\n    getSetLockupCheckedInstructionDataEncoder(),\n    getSetLockupCheckedInstructionDataDecoder()\n  );\n}\n\nexport type SetLockupCheckedInput<\n  TAccountStake extends string = string,\n  TAccountAuthority extends string = string,\n  TAccountNewAuthority extends string = string,\n> = {\n  /** Initialized stake account */\n  stake: Address<TAccountStake>;\n  /** Lockup authority or withdraw authority */\n  authority: TransactionSigner<TAccountAuthority>;\n  /** New lockup authority */\n  newAuthority?: TransactionSigner<TAccountNewAuthority>;\n  unixTimestamp: SetLockupCheckedInstructionDataArgs['unixTimestamp'];\n  epoch: SetLockupCheckedInstructionDataArgs['epoch'];\n};\n\nexport function getSetLockupCheckedInstruction<\n  TAccountStake extends string,\n  TAccountAuthority extends string,\n  TAccountNewAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: SetLockupCheckedInput<\n    TAccountStake,\n    TAccountAuthority,\n    TAccountNewAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): SetLockupCheckedInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountAuthority,\n  TAccountNewAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    authority: { value: input.authority ?? null, isWritable: false },\n    newAuthority: { value: input.newAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.authority),\n      getAccountMeta(accounts.newAuthority),\n    ],\n    programAddress,\n    data: getSetLockupCheckedInstructionDataEncoder().encode(\n      args as SetLockupCheckedInstructionDataArgs\n    ),\n  } as SetLockupCheckedInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountAuthority,\n    TAccountNewAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedSetLockupCheckedInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Initialized stake account */\n    stake: TAccountMetas[0];\n    /** Lockup authority or withdraw authority */\n    authority: TAccountMetas[1];\n    /** New lockup authority */\n    newAuthority?: TAccountMetas[2] | undefined;\n  };\n  data: SetLockupCheckedInstructionData;\n};\n\nexport function parseSetLockupCheckedInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedSetLockupCheckedInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      authority: getNextAccount(),\n      newAuthority: getNextOptionalAccount(),\n    },\n    data: getSetLockupCheckedInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const SPLIT_DISCRIMINATOR = 3;\n\nexport function getSplitDiscriminatorBytes() {\n  return getU32Encoder().encode(SPLIT_DISCRIMINATOR);\n}\n\nexport type SplitInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountSplitStake extends string | IAccountMeta<string> = string,\n  TAccountStakeAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountSplitStake extends string\n        ? WritableAccount<TAccountSplitStake>\n        : TAccountSplitStake,\n      TAccountStakeAuthority extends string\n        ? ReadonlySignerAccount<TAccountStakeAuthority> &\n            IAccountSignerMeta<TAccountStakeAuthority>\n        : TAccountStakeAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type SplitInstructionData = { discriminator: number; args: bigint };\n\nexport type SplitInstructionDataArgs = { args: number | bigint };\n\nexport function getSplitInstructionDataEncoder(): Encoder<SplitInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['args', getU64Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: SPLIT_DISCRIMINATOR })\n  );\n}\n\nexport function getSplitInstructionDataDecoder(): Decoder<SplitInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['args', getU64Decoder()],\n  ]);\n}\n\nexport function getSplitInstructionDataCodec(): Codec<\n  SplitInstructionDataArgs,\n  SplitInstructionData\n> {\n  return combineCodec(\n    getSplitInstructionDataEncoder(),\n    getSplitInstructionDataDecoder()\n  );\n}\n\nexport type SplitInput<\n  TAccountStake extends string = string,\n  TAccountSplitStake extends string = string,\n  TAccountStakeAuthority extends string = string,\n> = {\n  /** Stake account to be split */\n  stake: Address<TAccountStake>;\n  /** Uninitialized stake account */\n  splitStake: Address<TAccountSplitStake>;\n  /** Stake authority */\n  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;\n  args: SplitInstructionDataArgs['args'];\n};\n\nexport function getSplitInstruction<\n  TAccountStake extends string,\n  TAccountSplitStake extends string,\n  TAccountStakeAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: SplitInput<TAccountStake, TAccountSplitStake, TAccountStakeAuthority>,\n  config?: { programAddress?: TProgramAddress }\n): SplitInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountSplitStake,\n  TAccountStakeAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    splitStake: { value: input.splitStake ?? null, isWritable: true },\n    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.splitStake),\n      getAccountMeta(accounts.stakeAuthority),\n    ],\n    programAddress,\n    data: getSplitInstructionDataEncoder().encode(\n      args as SplitInstructionDataArgs\n    ),\n  } as SplitInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountSplitStake,\n    TAccountStakeAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedSplitInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account to be split */\n    stake: TAccountMetas[0];\n    /** Uninitialized stake account */\n    splitStake: TAccountMetas[1];\n    /** Stake authority */\n    stakeAuthority: TAccountMetas[2];\n  };\n  data: SplitInstructionData;\n};\n\nexport function parseSplitInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedSplitInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      splitStake: getNextAccount(),\n      stakeAuthority: getNextAccount(),\n    },\n    data: getSplitInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU64Decoder,\n  getU64Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n} from '@solana/kit';\nimport { STAKE_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const WITHDRAW_DISCRIMINATOR = 4;\n\nexport function getWithdrawDiscriminatorBytes() {\n  return getU32Encoder().encode(WITHDRAW_DISCRIMINATOR);\n}\n\nexport type WithdrawInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountStake extends string | IAccountMeta<string> = string,\n  TAccountRecipient extends string | IAccountMeta<string> = string,\n  TAccountClockSysvar extends\n    | string\n    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',\n  TAccountStakeHistory extends string | IAccountMeta<string> = string,\n  TAccountWithdrawAuthority extends string | IAccountMeta<string> = string,\n  TAccountLockupAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountStake extends string\n        ? WritableAccount<TAccountStake>\n        : TAccountStake,\n      TAccountRecipient extends string\n        ? WritableAccount<TAccountRecipient>\n        : TAccountRecipient,\n      TAccountClockSysvar extends string\n        ? ReadonlyAccount<TAccountClockSysvar>\n        : TAccountClockSysvar,\n      TAccountStakeHistory extends string\n        ? ReadonlyAccount<TAccountStakeHistory>\n        : TAccountStakeHistory,\n      TAccountWithdrawAuthority extends string\n        ? ReadonlySignerAccount<TAccountWithdrawAuthority> &\n            IAccountSignerMeta<TAccountWithdrawAuthority>\n        : TAccountWithdrawAuthority,\n      TAccountLockupAuthority extends string\n        ? ReadonlySignerAccount<TAccountLockupAuthority> &\n            IAccountSignerMeta<TAccountLockupAuthority>\n        : TAccountLockupAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type WithdrawInstructionData = { discriminator: number; args: bigint };\n\nexport type WithdrawInstructionDataArgs = { args: number | bigint };\n\nexport function getWithdrawInstructionDataEncoder(): Encoder<WithdrawInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU32Encoder()],\n      ['args', getU64Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })\n  );\n}\n\nexport function getWithdrawInstructionDataDecoder(): Decoder<WithdrawInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU32Decoder()],\n    ['args', getU64Decoder()],\n  ]);\n}\n\nexport function getWithdrawInstructionDataCodec(): Codec<\n  WithdrawInstructionDataArgs,\n  WithdrawInstructionData\n> {\n  return combineCodec(\n    getWithdrawInstructionDataEncoder(),\n    getWithdrawInstructionDataDecoder()\n  );\n}\n\nexport type WithdrawInput<\n  TAccountStake extends string = string,\n  TAccountRecipient extends string = string,\n  TAccountClockSysvar extends string = string,\n  TAccountStakeHistory extends string = string,\n  TAccountWithdrawAuthority extends string = string,\n  TAccountLockupAuthority extends string = string,\n> = {\n  /** Stake account from which to withdraw */\n  stake: Address<TAccountStake>;\n  /** Recipient account */\n  recipient: Address<TAccountRecipient>;\n  /** Clock sysvar */\n  clockSysvar?: Address<TAccountClockSysvar>;\n  /** Stake history sysvar */\n  stakeHistory: Address<TAccountStakeHistory>;\n  /** Withdraw authority */\n  withdrawAuthority: TransactionSigner<TAccountWithdrawAuthority>;\n  /** Lockup authority */\n  lockupAuthority?: TransactionSigner<TAccountLockupAuthority>;\n  args: WithdrawInstructionDataArgs['args'];\n};\n\nexport function getWithdrawInstruction<\n  TAccountStake extends string,\n  TAccountRecipient extends string,\n  TAccountClockSysvar extends string,\n  TAccountStakeHistory extends string,\n  TAccountWithdrawAuthority extends string,\n  TAccountLockupAuthority extends string,\n  TProgramAddress extends Address = typeof STAKE_PROGRAM_ADDRESS,\n>(\n  input: WithdrawInput<\n    TAccountStake,\n    TAccountRecipient,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountWithdrawAuthority,\n    TAccountLockupAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): WithdrawInstruction<\n  TProgramAddress,\n  TAccountStake,\n  TAccountRecipient,\n  TAccountClockSysvar,\n  TAccountStakeHistory,\n  TAccountWithdrawAuthority,\n  TAccountLockupAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? STAKE_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    stake: { value: input.stake ?? null, isWritable: true },\n    recipient: { value: input.recipient ?? null, isWritable: true },\n    clockSysvar: { value: input.clockSysvar ?? null, isWritable: false },\n    stakeHistory: { value: input.stakeHistory ?? null, isWritable: false },\n    withdrawAuthority: {\n      value: input.withdrawAuthority ?? null,\n      isWritable: false,\n    },\n    lockupAuthority: {\n      value: input.lockupAuthority ?? null,\n      isWritable: false,\n    },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.clockSysvar.value) {\n    accounts.clockSysvar.value =\n      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.stake),\n      getAccountMeta(accounts.recipient),\n      getAccountMeta(accounts.clockSysvar),\n      getAccountMeta(accounts.stakeHistory),\n      getAccountMeta(accounts.withdrawAuthority),\n      getAccountMeta(accounts.lockupAuthority),\n    ],\n    programAddress,\n    data: getWithdrawInstructionDataEncoder().encode(\n      args as WithdrawInstructionDataArgs\n    ),\n  } as WithdrawInstruction<\n    TProgramAddress,\n    TAccountStake,\n    TAccountRecipient,\n    TAccountClockSysvar,\n    TAccountStakeHistory,\n    TAccountWithdrawAuthority,\n    TAccountLockupAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedWithdrawInstruction<\n  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** Stake account from which to withdraw */\n    stake: TAccountMetas[0];\n    /** Recipient account */\n    recipient: TAccountMetas[1];\n    /** Clock sysvar */\n    clockSysvar: TAccountMetas[2];\n    /** Stake history sysvar */\n    stakeHistory: TAccountMetas[3];\n    /** Withdraw authority */\n    withdrawAuthority: TAccountMetas[4];\n    /** Lockup authority */\n    lockupAuthority?: TAccountMetas[5] | undefined;\n  };\n  data: WithdrawInstructionData;\n};\n\nexport function parseWithdrawInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedWithdrawInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 6) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  const getNextOptionalAccount = () => {\n    const accountMeta = getNextAccount();\n    return accountMeta.address === STAKE_PROGRAM_ADDRESS\n      ? undefined\n      : accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      stake: getNextAccount(),\n      recipient: getNextAccount(),\n      clockSysvar: getNextAccount(),\n      stakeHistory: getNextAccount(),\n      withdrawAuthority: getNextAccount(),\n      lockupAuthority: getNextOptionalAccount(),\n    },\n    data: getWithdrawInstructionDataDecoder().decode(instruction.data),\n  };\n}\n"]}