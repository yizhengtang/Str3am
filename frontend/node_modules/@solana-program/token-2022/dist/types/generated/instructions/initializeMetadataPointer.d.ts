/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_METADATA_POINTER_DISCRIMINATOR = 39;
export declare function getInitializeMetadataPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const INITIALIZE_METADATA_POINTER_METADATA_POINTER_DISCRIMINATOR = 0;
export declare function getInitializeMetadataPointerMetadataPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeMetadataPointerInstructionData = {
    discriminator: number;
    metadataPointerDiscriminator: number;
    /** The public key for the account that can update the metadata address. */
    authority: Option<Address>;
    /** The account address that holds the metadata. */
    metadataAddress: Option<Address>;
};
export type InitializeMetadataPointerInstructionDataArgs = {
    /** The public key for the account that can update the metadata address. */
    authority: OptionOrNullable<Address>;
    /** The account address that holds the metadata. */
    metadataAddress: OptionOrNullable<Address>;
};
export declare function getInitializeMetadataPointerInstructionDataEncoder(): Encoder<InitializeMetadataPointerInstructionDataArgs>;
export declare function getInitializeMetadataPointerInstructionDataDecoder(): Decoder<InitializeMetadataPointerInstructionData>;
export declare function getInitializeMetadataPointerInstructionDataCodec(): Codec<InitializeMetadataPointerInstructionDataArgs, InitializeMetadataPointerInstructionData>;
export type InitializeMetadataPointerInput<TAccountMint extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    authority: InitializeMetadataPointerInstructionDataArgs['authority'];
    metadataAddress: InitializeMetadataPointerInstructionDataArgs['metadataAddress'];
};
export declare function getInitializeMetadataPointerInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeMetadataPointerInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeMetadataPointerInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeMetadataPointerInstructionData;
};
export declare function parseInitializeMetadataPointerInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeMetadataPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeMetadataPointer.d.ts.map