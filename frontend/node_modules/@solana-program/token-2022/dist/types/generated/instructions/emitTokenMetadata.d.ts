/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlyUint8Array } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const EMIT_TOKEN_METADATA_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getEmitTokenMetadataDiscriminatorBytes(): ReadonlyUint8Array;
export type EmitTokenMetadataInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetadata extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMetadata extends string ? ReadonlyAccount<TAccountMetadata> : TAccountMetadata,
    ...TRemainingAccounts
]>;
export type EmitTokenMetadataInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Start of range of data to emit */
    start: Option<bigint>;
    /** End of range of data to emit */
    end: Option<bigint>;
};
export type EmitTokenMetadataInstructionDataArgs = {
    /** Start of range of data to emit */
    start?: OptionOrNullable<number | bigint>;
    /** End of range of data to emit */
    end?: OptionOrNullable<number | bigint>;
};
export declare function getEmitTokenMetadataInstructionDataEncoder(): Encoder<EmitTokenMetadataInstructionDataArgs>;
export declare function getEmitTokenMetadataInstructionDataDecoder(): Decoder<EmitTokenMetadataInstructionData>;
export declare function getEmitTokenMetadataInstructionDataCodec(): Codec<EmitTokenMetadataInstructionDataArgs, EmitTokenMetadataInstructionData>;
export type EmitTokenMetadataInput<TAccountMetadata extends string = string> = {
    metadata: Address<TAccountMetadata>;
    start?: EmitTokenMetadataInstructionDataArgs['start'];
    end?: EmitTokenMetadataInstructionDataArgs['end'];
};
export declare function getEmitTokenMetadataInstruction<TAccountMetadata extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: EmitTokenMetadataInput<TAccountMetadata>, config?: {
    programAddress?: TProgramAddress;
}): EmitTokenMetadataInstruction<TProgramAddress, TAccountMetadata>;
export type ParsedEmitTokenMetadataInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        metadata: TAccountMetas[0];
    };
    data: EmitTokenMetadataInstructionData;
};
export declare function parseEmitTokenMetadataInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedEmitTokenMetadataInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=emitTokenMetadata.d.ts.map