/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_GROUP_MEMBER_POINTER_DISCRIMINATOR = 41;
export declare function getInitializeGroupMemberPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const INITIALIZE_GROUP_MEMBER_POINTER_GROUP_MEMBER_POINTER_DISCRIMINATOR = 0;
export declare function getInitializeGroupMemberPointerGroupMemberPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeGroupMemberPointerInstructionData = {
    discriminator: number;
    groupMemberPointerDiscriminator: number;
    /** The public key for the account that can update the group member address. */
    authority: Option<Address>;
    /** The account address that holds the member. */
    memberAddress: Option<Address>;
};
export type InitializeGroupMemberPointerInstructionDataArgs = {
    /** The public key for the account that can update the group member address. */
    authority: OptionOrNullable<Address>;
    /** The account address that holds the member. */
    memberAddress: OptionOrNullable<Address>;
};
export declare function getInitializeGroupMemberPointerInstructionDataEncoder(): Encoder<InitializeGroupMemberPointerInstructionDataArgs>;
export declare function getInitializeGroupMemberPointerInstructionDataDecoder(): Decoder<InitializeGroupMemberPointerInstructionData>;
export declare function getInitializeGroupMemberPointerInstructionDataCodec(): Codec<InitializeGroupMemberPointerInstructionDataArgs, InitializeGroupMemberPointerInstructionData>;
export type InitializeGroupMemberPointerInput<TAccountMint extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    authority: InitializeGroupMemberPointerInstructionDataArgs['authority'];
    memberAddress: InitializeGroupMemberPointerInstructionDataArgs['memberAddress'];
};
export declare function getInitializeGroupMemberPointerInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeGroupMemberPointerInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeGroupMemberPointerInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeGroupMemberPointerInstructionData;
};
export declare function parseInitializeGroupMemberPointerInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeGroupMemberPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeGroupMemberPointer.d.ts.map