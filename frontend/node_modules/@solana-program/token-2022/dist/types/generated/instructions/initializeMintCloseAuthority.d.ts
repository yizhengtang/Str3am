/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_MINT_CLOSE_AUTHORITY_DISCRIMINATOR = 25;
export declare function getInitializeMintCloseAuthorityDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeMintCloseAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeMintCloseAuthorityInstructionData = {
    discriminator: number;
    /** Authority that must sign the `CloseAccount` instruction on a mint. */
    closeAuthority: Option<Address>;
};
export type InitializeMintCloseAuthorityInstructionDataArgs = {
    /** Authority that must sign the `CloseAccount` instruction on a mint. */
    closeAuthority: OptionOrNullable<Address>;
};
export declare function getInitializeMintCloseAuthorityInstructionDataEncoder(): Encoder<InitializeMintCloseAuthorityInstructionDataArgs>;
export declare function getInitializeMintCloseAuthorityInstructionDataDecoder(): Decoder<InitializeMintCloseAuthorityInstructionData>;
export declare function getInitializeMintCloseAuthorityInstructionDataCodec(): Codec<InitializeMintCloseAuthorityInstructionDataArgs, InitializeMintCloseAuthorityInstructionData>;
export type InitializeMintCloseAuthorityInput<TAccountMint extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    closeAuthority: InitializeMintCloseAuthorityInstructionDataArgs['closeAuthority'];
};
export declare function getInitializeMintCloseAuthorityInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeMintCloseAuthorityInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeMintCloseAuthorityInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeMintCloseAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeMintCloseAuthorityInstructionData;
};
export declare function parseInitializeMintCloseAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeMintCloseAuthorityInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeMintCloseAuthority.d.ts.map