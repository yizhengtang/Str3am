/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_TOKEN_GROUP_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getInitializeTokenGroupDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeTokenGroupInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountGroup extends string | IAccountMeta<string> = string, TAccountMint extends string | IAccountMeta<string> = string, TAccountMintAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountGroup extends string ? WritableAccount<TAccountGroup> : TAccountGroup,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountMintAuthority extends string ? ReadonlySignerAccount<TAccountMintAuthority> & IAccountSignerMeta<TAccountMintAuthority> : TAccountMintAuthority,
    ...TRemainingAccounts
]>;
export type InitializeTokenGroupInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Update authority for the group */
    updateAuthority: Option<Address>;
    /** The maximum number of group members */
    maxSize: bigint;
};
export type InitializeTokenGroupInstructionDataArgs = {
    /** Update authority for the group */
    updateAuthority: OptionOrNullable<Address>;
    /** The maximum number of group members */
    maxSize: number | bigint;
};
export declare function getInitializeTokenGroupInstructionDataEncoder(): Encoder<InitializeTokenGroupInstructionDataArgs>;
export declare function getInitializeTokenGroupInstructionDataDecoder(): Decoder<InitializeTokenGroupInstructionData>;
export declare function getInitializeTokenGroupInstructionDataCodec(): Codec<InitializeTokenGroupInstructionDataArgs, InitializeTokenGroupInstructionData>;
export type InitializeTokenGroupInput<TAccountGroup extends string = string, TAccountMint extends string = string, TAccountMintAuthority extends string = string> = {
    group: Address<TAccountGroup>;
    mint: Address<TAccountMint>;
    mintAuthority: TransactionSigner<TAccountMintAuthority>;
    updateAuthority: InitializeTokenGroupInstructionDataArgs['updateAuthority'];
    maxSize: InitializeTokenGroupInstructionDataArgs['maxSize'];
};
export declare function getInitializeTokenGroupInstruction<TAccountGroup extends string, TAccountMint extends string, TAccountMintAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeTokenGroupInput<TAccountGroup, TAccountMint, TAccountMintAuthority>, config?: {
    programAddress?: TProgramAddress;
}): InitializeTokenGroupInstruction<TProgramAddress, TAccountGroup, TAccountMint, TAccountMintAuthority>;
export type ParsedInitializeTokenGroupInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        group: TAccountMetas[0];
        mint: TAccountMetas[1];
        mintAuthority: TAccountMetas[2];
    };
    data: InitializeTokenGroupInstructionData;
};
export declare function parseInitializeTokenGroupInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeTokenGroupInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeTokenGroup.d.ts.map