/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_METADATA_POINTER_DISCRIMINATOR = 39;
export declare function getUpdateMetadataPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const UPDATE_METADATA_POINTER_METADATA_POINTER_DISCRIMINATOR = 1;
export declare function getUpdateMetadataPointerMetadataPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type UpdateMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TAccountMetadataPointerAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountMetadataPointerAuthority extends string ? ReadonlyAccount<TAccountMetadataPointerAuthority> : TAccountMetadataPointerAuthority,
    ...TRemainingAccounts
]>;
export type UpdateMetadataPointerInstructionData = {
    discriminator: number;
    metadataPointerDiscriminator: number;
    /** The new account address that holds the metadata. */
    metadataAddress: Option<Address>;
};
export type UpdateMetadataPointerInstructionDataArgs = {
    /** The new account address that holds the metadata. */
    metadataAddress: OptionOrNullable<Address>;
};
export declare function getUpdateMetadataPointerInstructionDataEncoder(): Encoder<UpdateMetadataPointerInstructionDataArgs>;
export declare function getUpdateMetadataPointerInstructionDataDecoder(): Decoder<UpdateMetadataPointerInstructionData>;
export declare function getUpdateMetadataPointerInstructionDataCodec(): Codec<UpdateMetadataPointerInstructionDataArgs, UpdateMetadataPointerInstructionData>;
export type UpdateMetadataPointerInput<TAccountMint extends string = string, TAccountMetadataPointerAuthority extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    /** The metadata pointer authority or its multisignature account. */
    metadataPointerAuthority: Address<TAccountMetadataPointerAuthority> | TransactionSigner<TAccountMetadataPointerAuthority>;
    metadataAddress: UpdateMetadataPointerInstructionDataArgs['metadataAddress'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateMetadataPointerInstruction<TAccountMint extends string, TAccountMetadataPointerAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateMetadataPointerInput<TAccountMint, TAccountMetadataPointerAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateMetadataPointerInstruction<TProgramAddress, TAccountMint, (typeof input)['metadataPointerAuthority'] extends TransactionSigner<TAccountMetadataPointerAuthority> ? ReadonlySignerAccount<TAccountMetadataPointerAuthority> & IAccountSignerMeta<TAccountMetadataPointerAuthority> : TAccountMetadataPointerAuthority>;
export type ParsedUpdateMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
        /** The metadata pointer authority or its multisignature account. */
        metadataPointerAuthority: TAccountMetas[1];
    };
    data: UpdateMetadataPointerInstructionData;
};
export declare function parseUpdateMetadataPointerInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedUpdateMetadataPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateMetadataPointer.d.ts.map