/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_NATIVE_MINT_DISCRIMINATOR = 31;
export declare function getCreateNativeMintDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type CreateNativeMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountPayer extends string | IAccountMeta<string> = string, TAccountNativeMint extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountNativeMint extends string ? WritableAccount<TAccountNativeMint> : TAccountNativeMint,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CreateNativeMintInstructionData = {
    discriminator: number;
};
export type CreateNativeMintInstructionDataArgs = {};
export declare function getCreateNativeMintInstructionDataEncoder(): Encoder<CreateNativeMintInstructionDataArgs>;
export declare function getCreateNativeMintInstructionDataDecoder(): Decoder<CreateNativeMintInstructionData>;
export declare function getCreateNativeMintInstructionDataCodec(): Codec<CreateNativeMintInstructionDataArgs, CreateNativeMintInstructionData>;
export type CreateNativeMintInput<TAccountPayer extends string = string, TAccountNativeMint extends string = string, TAccountSystemProgram extends string = string> = {
    /** Funding account (must be a system account) */
    payer: TransactionSigner<TAccountPayer>;
    /** The native mint address */
    nativeMint: Address<TAccountNativeMint>;
    /** System program for mint account funding */
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getCreateNativeMintInstruction<TAccountPayer extends string, TAccountNativeMint extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: CreateNativeMintInput<TAccountPayer, TAccountNativeMint, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateNativeMintInstruction<TProgramAddress, TAccountPayer, TAccountNativeMint, TAccountSystemProgram>;
export type ParsedCreateNativeMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Funding account (must be a system account) */
        payer: TAccountMetas[0];
        /** The native mint address */
        nativeMint: TAccountMetas[1];
        /** System program for mint account funding */
        systemProgram: TAccountMetas[2];
    };
    data: CreateNativeMintInstructionData;
};
export declare function parseCreateNativeMintInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCreateNativeMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=createNativeMint.d.ts.map