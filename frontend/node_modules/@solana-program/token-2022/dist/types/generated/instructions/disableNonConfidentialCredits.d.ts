/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const DISABLE_NON_CONFIDENTIAL_CREDITS_DISCRIMINATOR = 27;
export declare function getDisableNonConfidentialCreditsDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const DISABLE_NON_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR = 12;
export declare function getDisableNonConfidentialCreditsConfidentialTransferDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type DisableNonConfidentialCreditsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | IAccountMeta<string> = string, TAccountAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type DisableNonConfidentialCreditsInstructionData = {
    discriminator: number;
    confidentialTransferDiscriminator: number;
};
export type DisableNonConfidentialCreditsInstructionDataArgs = {};
export declare function getDisableNonConfidentialCreditsInstructionDataEncoder(): Encoder<DisableNonConfidentialCreditsInstructionDataArgs>;
export declare function getDisableNonConfidentialCreditsInstructionDataDecoder(): Decoder<DisableNonConfidentialCreditsInstructionData>;
export declare function getDisableNonConfidentialCreditsInstructionDataCodec(): Codec<DisableNonConfidentialCreditsInstructionDataArgs, DisableNonConfidentialCreditsInstructionData>;
export type DisableNonConfidentialCreditsInput<TAccountToken extends string = string, TAccountAuthority extends string = string> = {
    /** The SPL Token account. */
    token: Address<TAccountToken>;
    /** The source account's owner/delegate or its multisignature account. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getDisableNonConfidentialCreditsInstruction<TAccountToken extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: DisableNonConfidentialCreditsInput<TAccountToken, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): DisableNonConfidentialCreditsInstruction<TProgramAddress, TAccountToken, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedDisableNonConfidentialCreditsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The SPL Token account. */
        token: TAccountMetas[0];
        /** The source account's owner/delegate or its multisignature account. */
        authority: TAccountMetas[1];
    };
    data: DisableNonConfidentialCreditsInstructionData;
};
export declare function parseDisableNonConfidentialCreditsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDisableNonConfidentialCreditsInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=disableNonConfidentialCredits.d.ts.map