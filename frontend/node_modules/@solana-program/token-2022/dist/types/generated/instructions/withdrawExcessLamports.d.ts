/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const WITHDRAW_EXCESS_LAMPORTS_DISCRIMINATOR = 38;
export declare function getWithdrawExcessLamportsDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type WithdrawExcessLamportsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountSourceAccount extends string | IAccountMeta<string> = string, TAccountDestinationAccount extends string | IAccountMeta<string> = string, TAccountAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSourceAccount extends string ? WritableAccount<TAccountSourceAccount> : TAccountSourceAccount,
    TAccountDestinationAccount extends string ? WritableAccount<TAccountDestinationAccount> : TAccountDestinationAccount,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type WithdrawExcessLamportsInstructionData = {
    discriminator: number;
};
export type WithdrawExcessLamportsInstructionDataArgs = {};
export declare function getWithdrawExcessLamportsInstructionDataEncoder(): Encoder<WithdrawExcessLamportsInstructionDataArgs>;
export declare function getWithdrawExcessLamportsInstructionDataDecoder(): Decoder<WithdrawExcessLamportsInstructionData>;
export declare function getWithdrawExcessLamportsInstructionDataCodec(): Codec<WithdrawExcessLamportsInstructionDataArgs, WithdrawExcessLamportsInstructionData>;
export type WithdrawExcessLamportsInput<TAccountSourceAccount extends string = string, TAccountDestinationAccount extends string = string, TAccountAuthority extends string = string> = {
    /** Account holding excess lamports. */
    sourceAccount: Address<TAccountSourceAccount>;
    /** Destination account for withdrawn lamports. */
    destinationAccount: Address<TAccountDestinationAccount>;
    /** The source account's owner/delegate or its multisignature account. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getWithdrawExcessLamportsInstruction<TAccountSourceAccount extends string, TAccountDestinationAccount extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: WithdrawExcessLamportsInput<TAccountSourceAccount, TAccountDestinationAccount, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): WithdrawExcessLamportsInstruction<TProgramAddress, TAccountSourceAccount, TAccountDestinationAccount, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedWithdrawExcessLamportsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Account holding excess lamports. */
        sourceAccount: TAccountMetas[0];
        /** Destination account for withdrawn lamports. */
        destinationAccount: TAccountMetas[1];
        /** The source account's owner/delegate or its multisignature account. */
        authority: TAccountMetas[2];
    };
    data: WithdrawExcessLamportsInstructionData;
};
export declare function parseWithdrawExcessLamportsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedWithdrawExcessLamportsInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=withdrawExcessLamports.d.ts.map