/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_INTEREST_BEARING_MINT_DISCRIMINATOR = 33;
export declare function getInitializeInterestBearingMintDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const INITIALIZE_INTEREST_BEARING_MINT_INTEREST_BEARING_MINT_DISCRIMINATOR = 0;
export declare function getInitializeInterestBearingMintInterestBearingMintDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializeInterestBearingMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeInterestBearingMintInstructionData = {
    discriminator: number;
    interestBearingMintDiscriminator: number;
    /** The public key for the account that can update the rate */
    rateAuthority: Option<Address>;
    /** The initial interest rate */
    rate: number;
};
export type InitializeInterestBearingMintInstructionDataArgs = {
    /** The public key for the account that can update the rate */
    rateAuthority: OptionOrNullable<Address>;
    /** The initial interest rate */
    rate: number;
};
export declare function getInitializeInterestBearingMintInstructionDataEncoder(): Encoder<InitializeInterestBearingMintInstructionDataArgs>;
export declare function getInitializeInterestBearingMintInstructionDataDecoder(): Decoder<InitializeInterestBearingMintInstructionData>;
export declare function getInitializeInterestBearingMintInstructionDataCodec(): Codec<InitializeInterestBearingMintInstructionDataArgs, InitializeInterestBearingMintInstructionData>;
export type InitializeInterestBearingMintInput<TAccountMint extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    rateAuthority: InitializeInterestBearingMintInstructionDataArgs['rateAuthority'];
    rate: InitializeInterestBearingMintInstructionDataArgs['rate'];
};
export declare function getInitializeInterestBearingMintInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeInterestBearingMintInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeInterestBearingMintInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeInterestBearingMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeInterestBearingMintInstructionData;
};
export declare function parseInitializeInterestBearingMintInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeInterestBearingMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeInterestBearingMint.d.ts.map