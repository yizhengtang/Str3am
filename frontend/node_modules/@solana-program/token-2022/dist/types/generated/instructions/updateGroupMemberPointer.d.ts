/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_GROUP_MEMBER_POINTER_DISCRIMINATOR = 41;
export declare function getUpdateGroupMemberPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const UPDATE_GROUP_MEMBER_POINTER_GROUP_MEMBER_POINTER_DISCRIMINATOR = 1;
export declare function getUpdateGroupMemberPointerGroupMemberPointerDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type UpdateGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TAccountGroupMemberPointerAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountGroupMemberPointerAuthority extends string ? ReadonlyAccount<TAccountGroupMemberPointerAuthority> : TAccountGroupMemberPointerAuthority,
    ...TRemainingAccounts
]>;
export type UpdateGroupMemberPointerInstructionData = {
    discriminator: number;
    groupMemberPointerDiscriminator: number;
    /** The new account address that holds the member. */
    memberAddress: Option<Address>;
};
export type UpdateGroupMemberPointerInstructionDataArgs = {
    /** The new account address that holds the member. */
    memberAddress: OptionOrNullable<Address>;
};
export declare function getUpdateGroupMemberPointerInstructionDataEncoder(): Encoder<UpdateGroupMemberPointerInstructionDataArgs>;
export declare function getUpdateGroupMemberPointerInstructionDataDecoder(): Decoder<UpdateGroupMemberPointerInstructionData>;
export declare function getUpdateGroupMemberPointerInstructionDataCodec(): Codec<UpdateGroupMemberPointerInstructionDataArgs, UpdateGroupMemberPointerInstructionData>;
export type UpdateGroupMemberPointerInput<TAccountMint extends string = string, TAccountGroupMemberPointerAuthority extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    /** The group member pointer authority or its multisignature account. */
    groupMemberPointerAuthority: Address<TAccountGroupMemberPointerAuthority> | TransactionSigner<TAccountGroupMemberPointerAuthority>;
    memberAddress: UpdateGroupMemberPointerInstructionDataArgs['memberAddress'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateGroupMemberPointerInstruction<TAccountMint extends string, TAccountGroupMemberPointerAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateGroupMemberPointerInput<TAccountMint, TAccountGroupMemberPointerAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateGroupMemberPointerInstruction<TProgramAddress, TAccountMint, (typeof input)['groupMemberPointerAuthority'] extends TransactionSigner<TAccountGroupMemberPointerAuthority> ? ReadonlySignerAccount<TAccountGroupMemberPointerAuthority> & IAccountSignerMeta<TAccountGroupMemberPointerAuthority> : TAccountGroupMemberPointerAuthority>;
export type ParsedUpdateGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
        /** The group member pointer authority or its multisignature account. */
        groupMemberPointerAuthority: TAccountMetas[1];
    };
    data: UpdateGroupMemberPointerInstructionData;
};
export declare function parseUpdateGroupMemberPointerInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedUpdateGroupMemberPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateGroupMemberPointer.d.ts.map