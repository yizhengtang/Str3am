/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_TOKEN_GROUP_MEMBER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getInitializeTokenGroupMemberDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeTokenGroupMemberInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMember extends string | IAccountMeta<string> = string, TAccountMemberMint extends string | IAccountMeta<string> = string, TAccountMemberMintAuthority extends string | IAccountMeta<string> = string, TAccountGroup extends string | IAccountMeta<string> = string, TAccountGroupUpdateAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMember extends string ? WritableAccount<TAccountMember> : TAccountMember,
    TAccountMemberMint extends string ? ReadonlyAccount<TAccountMemberMint> : TAccountMemberMint,
    TAccountMemberMintAuthority extends string ? ReadonlySignerAccount<TAccountMemberMintAuthority> & IAccountSignerMeta<TAccountMemberMintAuthority> : TAccountMemberMintAuthority,
    TAccountGroup extends string ? WritableAccount<TAccountGroup> : TAccountGroup,
    TAccountGroupUpdateAuthority extends string ? ReadonlySignerAccount<TAccountGroupUpdateAuthority> & IAccountSignerMeta<TAccountGroupUpdateAuthority> : TAccountGroupUpdateAuthority,
    ...TRemainingAccounts
]>;
export type InitializeTokenGroupMemberInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type InitializeTokenGroupMemberInstructionDataArgs = {};
export declare function getInitializeTokenGroupMemberInstructionDataEncoder(): Encoder<InitializeTokenGroupMemberInstructionDataArgs>;
export declare function getInitializeTokenGroupMemberInstructionDataDecoder(): Decoder<InitializeTokenGroupMemberInstructionData>;
export declare function getInitializeTokenGroupMemberInstructionDataCodec(): Codec<InitializeTokenGroupMemberInstructionDataArgs, InitializeTokenGroupMemberInstructionData>;
export type InitializeTokenGroupMemberInput<TAccountMember extends string = string, TAccountMemberMint extends string = string, TAccountMemberMintAuthority extends string = string, TAccountGroup extends string = string, TAccountGroupUpdateAuthority extends string = string> = {
    member: Address<TAccountMember>;
    memberMint: Address<TAccountMemberMint>;
    memberMintAuthority: TransactionSigner<TAccountMemberMintAuthority>;
    group: Address<TAccountGroup>;
    groupUpdateAuthority: TransactionSigner<TAccountGroupUpdateAuthority>;
};
export declare function getInitializeTokenGroupMemberInstruction<TAccountMember extends string, TAccountMemberMint extends string, TAccountMemberMintAuthority extends string, TAccountGroup extends string, TAccountGroupUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeTokenGroupMemberInput<TAccountMember, TAccountMemberMint, TAccountMemberMintAuthority, TAccountGroup, TAccountGroupUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): InitializeTokenGroupMemberInstruction<TProgramAddress, TAccountMember, TAccountMemberMint, TAccountMemberMintAuthority, TAccountGroup, TAccountGroupUpdateAuthority>;
export type ParsedInitializeTokenGroupMemberInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        member: TAccountMetas[0];
        memberMint: TAccountMetas[1];
        memberMintAuthority: TAccountMetas[2];
        group: TAccountMetas[3];
        groupUpdateAuthority: TAccountMetas[4];
    };
    data: InitializeTokenGroupMemberInstructionData;
};
export declare function parseInitializeTokenGroupMemberInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeTokenGroupMemberInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeTokenGroupMember.d.ts.map