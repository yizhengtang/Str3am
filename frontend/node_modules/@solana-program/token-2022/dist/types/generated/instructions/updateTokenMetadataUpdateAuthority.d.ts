/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_TOKEN_METADATA_UPDATE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getUpdateTokenMetadataUpdateAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateTokenMetadataUpdateAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetadata extends string | IAccountMeta<string> = string, TAccountUpdateAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMetadata extends string ? WritableAccount<TAccountMetadata> : TAccountMetadata,
    TAccountUpdateAuthority extends string ? ReadonlySignerAccount<TAccountUpdateAuthority> & IAccountSignerMeta<TAccountUpdateAuthority> : TAccountUpdateAuthority,
    ...TRemainingAccounts
]>;
export type UpdateTokenMetadataUpdateAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** New authority for the token metadata, or unset if `None` */
    newUpdateAuthority: Option<Address>;
};
export type UpdateTokenMetadataUpdateAuthorityInstructionDataArgs = {
    /** New authority for the token metadata, or unset if `None` */
    newUpdateAuthority: OptionOrNullable<Address>;
};
export declare function getUpdateTokenMetadataUpdateAuthorityInstructionDataEncoder(): Encoder<UpdateTokenMetadataUpdateAuthorityInstructionDataArgs>;
export declare function getUpdateTokenMetadataUpdateAuthorityInstructionDataDecoder(): Decoder<UpdateTokenMetadataUpdateAuthorityInstructionData>;
export declare function getUpdateTokenMetadataUpdateAuthorityInstructionDataCodec(): Codec<UpdateTokenMetadataUpdateAuthorityInstructionDataArgs, UpdateTokenMetadataUpdateAuthorityInstructionData>;
export type UpdateTokenMetadataUpdateAuthorityInput<TAccountMetadata extends string = string, TAccountUpdateAuthority extends string = string> = {
    metadata: Address<TAccountMetadata>;
    updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
    newUpdateAuthority: UpdateTokenMetadataUpdateAuthorityInstructionDataArgs['newUpdateAuthority'];
};
export declare function getUpdateTokenMetadataUpdateAuthorityInstruction<TAccountMetadata extends string, TAccountUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateTokenMetadataUpdateAuthorityInput<TAccountMetadata, TAccountUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateTokenMetadataUpdateAuthorityInstruction<TProgramAddress, TAccountMetadata, TAccountUpdateAuthority>;
export type ParsedUpdateTokenMetadataUpdateAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        metadata: TAccountMetas[0];
        updateAuthority: TAccountMetas[1];
    };
    data: UpdateTokenMetadataUpdateAuthorityInstructionData;
};
export declare function parseUpdateTokenMetadataUpdateAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedUpdateTokenMetadataUpdateAuthorityInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateTokenMetadataUpdateAuthority.d.ts.map