import { proxy, ref } from 'valtio/vanilla';
import { subscribeKey as subKey } from 'valtio/vanilla/utils';
import {} from '@reown/appkit-common';
import { CoreHelperUtil } from '../utils/CoreHelperUtil.js';
import { SIWXUtil } from '../utils/SIWXUtil.js';
import { StorageUtil } from '../utils/StorageUtil.js';
import { ChainController } from './ChainController.js';
import { ConnectorController } from './ConnectorController.js';
import { EventsController } from './EventsController.js';
import { ModalController } from './ModalController.js';
import { RouterController } from './RouterController.js';
import { TransactionsController } from './TransactionsController.js';
// -- State --------------------------------------------- //
const state = proxy({
    wcError: false,
    buffering: false,
    status: 'disconnected'
});
// eslint-disable-next-line init-declarations
let wcConnectionPromise;
// -- Controller ---------------------------------------- //
export const ConnectionController = {
    state,
    subscribeKey(key, callback) {
        return subKey(state, key, callback);
    },
    _getClient() {
        return state._client;
    },
    setClient(client) {
        state._client = ref(client);
    },
    async connectWalletConnect() {
        if (CoreHelperUtil.isTelegram() || (CoreHelperUtil.isSafari() && CoreHelperUtil.isIos())) {
            if (wcConnectionPromise) {
                await wcConnectionPromise;
                wcConnectionPromise = undefined;
                return;
            }
            if (!CoreHelperUtil.isPairingExpired(state?.wcPairingExpiry)) {
                const link = state.wcUri;
                state.wcUri = link;
                return;
            }
            wcConnectionPromise = this._getClient()
                ?.connectWalletConnect?.()
                .catch(() => undefined);
            this.state.status = 'connecting';
            await wcConnectionPromise;
            wcConnectionPromise = undefined;
            state.wcPairingExpiry = undefined;
            this.state.status = 'connected';
        }
        else {
            await this._getClient()?.connectWalletConnect?.();
        }
    },
    async connectExternal(options, chain, setChain = true) {
        await this._getClient()?.connectExternal?.(options);
        if (setChain) {
            ChainController.setActiveNamespace(chain);
        }
    },
    async reconnectExternal(options) {
        await this._getClient()?.reconnectExternal?.(options);
        const namespace = options.chain || ChainController.state.activeChain;
        if (namespace) {
            ConnectorController.setConnectorId(options.id, namespace);
        }
    },
    async setPreferredAccountType(accountType) {
        ModalController.setLoading(true, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        if (!authConnector) {
            return;
        }
        await authConnector?.provider.setPreferredAccount(accountType);
        await this.reconnectExternal(authConnector);
        ModalController.setLoading(false, ChainController.state.activeChain);
        EventsController.sendEvent({
            type: 'track',
            event: 'SET_PREFERRED_ACCOUNT_TYPE',
            properties: {
                accountType,
                network: ChainController.state.activeCaipNetwork?.caipNetworkId || ''
            }
        });
    },
    async signMessage(message) {
        return this._getClient()?.signMessage(message);
    },
    parseUnits(value, decimals) {
        return this._getClient()?.parseUnits(value, decimals);
    },
    formatUnits(value, decimals) {
        return this._getClient()?.formatUnits(value, decimals);
    },
    async sendTransaction(args) {
        return this._getClient()?.sendTransaction(args);
    },
    async getCapabilities(params) {
        return this._getClient()?.getCapabilities(params);
    },
    async grantPermissions(params) {
        return this._getClient()?.grantPermissions(params);
    },
    async walletGetAssets(params) {
        return this._getClient()?.walletGetAssets(params) ?? {};
    },
    async estimateGas(args) {
        return this._getClient()?.estimateGas(args);
    },
    async writeContract(args) {
        return this._getClient()?.writeContract(args);
    },
    async getEnsAddress(value) {
        return this._getClient()?.getEnsAddress(value);
    },
    async getEnsAvatar(value) {
        return this._getClient()?.getEnsAvatar(value);
    },
    checkInstalled(ids) {
        return this._getClient()?.checkInstalled?.(ids) || false;
    },
    resetWcConnection() {
        state.wcUri = undefined;
        state.wcPairingExpiry = undefined;
        state.wcLinking = undefined;
        state.recentWallet = undefined;
        state.status = 'disconnected';
        TransactionsController.resetTransactions();
        StorageUtil.deleteWalletConnectDeepLink();
    },
    resetUri() {
        state.wcUri = undefined;
        state.wcPairingExpiry = undefined;
    },
    finalizeWcConnection() {
        const { wcLinking, recentWallet } = ConnectionController.state;
        if (wcLinking) {
            StorageUtil.setWalletConnectDeepLink(wcLinking);
        }
        if (recentWallet) {
            StorageUtil.setAppKitRecent(recentWallet);
        }
        EventsController.sendEvent({
            type: 'track',
            event: 'CONNECT_SUCCESS',
            properties: {
                method: wcLinking ? 'mobile' : 'qrcode',
                name: RouterController.state.data?.wallet?.name || 'Unknown'
            }
        });
    },
    setWcBasic(wcBasic) {
        state.wcBasic = wcBasic;
    },
    setUri(uri) {
        state.wcUri = uri;
        state.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
    },
    setWcLinking(wcLinking) {
        state.wcLinking = wcLinking;
    },
    setWcError(wcError) {
        state.wcError = wcError;
        state.buffering = false;
    },
    setRecentWallet(wallet) {
        state.recentWallet = wallet;
    },
    setBuffering(buffering) {
        state.buffering = buffering;
    },
    setStatus(status) {
        state.status = status;
    },
    async disconnect(namespace) {
        try {
            ModalController.setLoading(true, namespace);
            await SIWXUtil.clearSessions();
            await ChainController.disconnect(namespace);
            ModalController.setLoading(false, namespace);
            ConnectorController.setFilterByNamespace(undefined);
        }
        catch (error) {
            throw new Error('Failed to disconnect');
        }
    }
};
//# sourceMappingURL=ConnectionController.js.map