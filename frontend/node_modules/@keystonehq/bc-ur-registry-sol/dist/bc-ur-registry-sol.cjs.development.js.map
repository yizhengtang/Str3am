{"version":3,"file":"bc-ur-registry-sol.cjs.development.js","sources":["../src/RegistryType.ts","../src/SolSignRequest.ts","../src/SolSignature.ts","../src/SOLNFTItem.ts","../src/index.ts"],"sourcesContent":["import { RegistryType } from \"@keystonehq/bc-ur-registry\";\n\nexport const ExtendedRegistryTypes = {\n  SOL_SIGN_REQUEST: new RegistryType(\"sol-sign-request\", 1101),\n  SOL_SIGNATURE: new RegistryType(\"sol-signature\", 1102),\n  SOL_NFT_ITEM: new RegistryType(\"sol-nft-item\", 1104),\n};\n","import {\n  CryptoKeypath,\n  extend,\n  DataItem,\n  PathComponent,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nimport * as uuid from \"uuid\";\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nexport enum SignType {\n  Transaction = 1,\n  Message = 2,\n}\n\nenum Keys {\n  requestId = 1,\n  signData,\n  derivationPath,\n  address,\n  origin,\n  signType ,\n}\n\ntype signRequestProps = {\n  requestId?: Buffer;\n  signData: Buffer;\n  derivationPath: CryptoKeypath;\n  address?: Buffer;\n  origin?: string;\n  signType: SignType;\n};\n\nexport class SolSignRequest extends RegistryItem {\n  private requestId?: Buffer;\n  private signData: Buffer;\n  private derivationPath: CryptoKeypath;\n  private address?: Buffer;\n  private origin?: string;\n  private signType: SignType;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGN_REQUEST;\n\n  constructor(args: signRequestProps) {\n    super();\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n    this.signType = args.signType;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignData = () => this.signData;\n  public getDerivationPath = () => this.derivationPath.getPath();\n  public getSignRequestAddress = () => this.address;\n  public getOrigin = () => this.origin;\n  public getSignType = () => this.signType;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    if (this.address) {\n      map[Keys.address] = this.address;\n    }\n\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n\n    map[Keys.signData] = this.signData;\n    map[Keys.signType] = this.signType;\n\n    const keyPath = this.derivationPath.toDataItem();\n    keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n    map[Keys.derivationPath] = keyPath;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signData = map[Keys.signData];\n    const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n    const address = map[Keys.address] ? map[Keys.address] : undefined;\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n    const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n    const signType = map[Keys.signType];\n\n    return new SolSignRequest({\n      requestId,\n      signData,\n      derivationPath,\n      address,\n      origin,\n      signType\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignRequest.fromDataItem(dataItem);\n  };\n\n  public static constructSOLRequest(\n    signData: Buffer,\n    hdPath: string,\n    xfp: string,\n    signType: SignType,\n    uuidString?: string,\n    address?: string,\n    origin?: string\n  ) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new CryptoKeypath(\n      paths.map((path) => {\n        const index = parseInt(path.replace(\"'\", \"\"));\n        let isHardened = false;\n        if (path.endsWith(\"'\")) {\n          isHardened = true;\n        }\n        return new PathComponent({ index, hardened: isHardened });\n      }),\n      Buffer.from(xfp, \"hex\")\n    );\n\n    return new SolSignRequest({\n      requestId: uuidString\n        ? Buffer.from(uuid.parse(uuidString) as Uint8Array)\n        : undefined,\n      signData,\n      derivationPath: hdpathObject,\n      address: address\n        ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\")\n        : undefined,\n      origin: origin || undefined,\n      signType,\n    });\n  }\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n  requestId = 1,\n  signature,\n}\n\nexport class SolSignature extends RegistryItem {\n  private requestId?: Buffer;\n  private signature: Buffer;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGNATURE;\n\n  constructor(signature: Buffer, requestId?: Buffer) {\n    super();\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignature = () => this.signature;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    map[Keys.signature] = this.signature;\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signature = map[Keys.signature];\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n\n    return new SolSignature(signature, requestId);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignature.fromDataItem(dataItem);\n  };\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { decodeToDataItem } = extend;\n\nenum Keys {\n  mintAddress = 1,\n  collectionName,\n  name,\n  mediaData,\n}\n\ntype NFTProps = {\n  mintAddress: string;\n  collectionName: string;\n  name: string;\n  mediaData: string;\n};\n\nexport class SOLNFTItem extends RegistryItem {\n  private name: string;\n  private mintAddress: string;\n  private collectionName: string;\n  private mediaData: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_NFT_ITEM;\n\n  constructor(args: NFTProps) {\n    super();\n    this.name = args.name;\n    this.mintAddress = args.mintAddress;\n    this.collectionName = args.collectionName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  public getName = () => this.name;\n  public getMediaData = () => this.mediaData;\n  public getMintAddress = () => this.mintAddress;\n  public getCollectionName = () => this.collectionName;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.name] = this.name;\n    map[Keys.mintAddress] = this.mintAddress;\n    map[Keys.collectionName] = this.collectionName;\n    map[Keys.mediaData] = this.mediaData;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const name = map[Keys.name];\n    const mediaData = map[Keys.mediaData];\n    const mintAddress = map[Keys.mintAddress];\n    const collectionName = map[Keys.collectionName];\n\n    return new SOLNFTItem({\n      name,\n      mintAddress,\n      collectionName,\n      mediaData,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SOLNFTItem.fromDataItem(dataItem);\n  };\n\n  public static constructETHNFTItem(\n    mintAddress: string,\n    collectionName: string,\n    name: string,\n    mediaData: string\n  ) {\n    return new SOLNFTItem({\n      mintAddress,\n      collectionName,\n      mediaData,\n      name,\n    });\n  }\n}\n","import { patchTags } from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nexport * from \"@keystonehq/bc-ur-registry\";\n\npatchTags(\n  Object.values(ExtendedRegistryTypes)\n    .filter((rt) => !!rt.getTag())\n    .map((rt) => rt.getTag()) as number[]\n);\n\nexport { SolSignRequest, SignType } from \"./SolSignRequest\";\nexport { SolSignature } from \"./SolSignature\";\nexport { SOLNFTItem } from \"./SOLNFTItem\";\n"],"names":["ExtendedRegistryTypes","SOL_SIGN_REQUEST","RegistryType","SOL_SIGNATURE","SOL_NFT_ITEM","decodeToDataItem","RegistryTypes","extend","SignType","Keys","SolSignRequest","RegistryItem","constructor","args","requestId","signData","derivationPath","getPath","address","origin","signType","map","DataItem","UUID","getTag","keyPath","toDataItem","setTag","getRegistryType","constructSOLRequest","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","undefined","dataItem","getData","fromDataItem","_cborPayload","SolSignature","signature","SOLNFTItem","name","mediaData","mintAddress","collectionName","constructETHNFTItem","patchTags","Object","values","filter","rt"],"mappings":"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"}