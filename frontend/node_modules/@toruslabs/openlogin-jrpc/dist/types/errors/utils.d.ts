import { JRPCError, Json } from "../interfaces";
export declare const JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.";
declare type PropertyKey = string | number | symbol;
/**
 * Returns whether the given code is valid.
 * A code is valid if it is an integer.
 *
 * @param code - The error code.
 * @returns Whether the given code is valid.
 */
export declare function isValidCode(code: unknown): code is number;
export declare function isValidString(value: unknown): value is string;
/**
 * A type guard for {@link RuntimeObject}.
 *
 * @param value - The value to check.
 * @returns Whether the specified value has a runtime type of `object` and is
 * neither `null` nor an `Array`.
 */
export declare function isObject(value: unknown): value is Record<PropertyKey, unknown>;
/**
 * Check if the value is plain object.
 *
 * @param value - Value to be checked.
 * @returns True if an object is the plain JavaScript object,
 * false if the object is not plain (e.g. function).
 */
export declare function isPlainObject(value: unknown): boolean;
/**
 * Gets the message for a given code, or a fallback message if the code has
 * no corresponding message.
 *
 * @param code - The error code.
 * @param fallbackMessage - The fallback message to use if the code has no
 * corresponding message.
 * @returns The message for the given code, or the fallback message if the code
 * has no corresponding message.
 */
export declare function getMessageFromCode(code: unknown, fallbackMessage?: string): string;
/**
 * Serializes an unknown error to be used as the `cause` in a fallback error.
 *
 * @param error - The unknown error.
 * @returns A JSON-serializable object containing as much information about the original error as possible.
 */
export declare function serializeCause(error: unknown): Json;
/**
 * Serializes the given error to an Ethereum JSON RPC-compatible error object.
 * If the given error is not fully compatible, it will be preserved on the
 * returned object's data.cause property.
 *
 * @param error - The error to serialize.
 * @param options - Options bag.
 * @param options.fallbackError - The error to return if the given error is
 * not compatible. Should be a JSON serializable value.
 * @param options.shouldIncludeStack - Whether to include the error's stack
 * on the returned object.
 * @returns The serialized error.
 */
export declare function serializeError(error: unknown, { fallbackError, shouldIncludeStack }?: {
    fallbackError?: JRPCError;
    shouldIncludeStack?: boolean;
}): JRPCError;
/**
 * Returns true if supplied error data has a usable `cause` property; false otherwise.
 *
 * @param data - Optional data to validate.
 * @returns Whether cause property is present and an object.
 */
export declare function dataHasCause(data: unknown): data is {
    [key: string]: Json | unknown;
    cause: object;
};
export {};
