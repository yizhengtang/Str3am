import { BaseBlockTrackerConfig } from "../Block/IBlockTrackerController";
import { BaseState, IController } from "../interfaces";
export declare const createRandomId: () => string;
export declare const CHAIN_NAMESPACES: {
    readonly EIP155: "eip155";
    readonly SOLANA: "solana";
    readonly CASPER: "casper";
    readonly XRPL: "xrpl";
    readonly OTHER: "other";
};
export type ChainNamespaceType = (typeof CHAIN_NAMESPACES)[keyof typeof CHAIN_NAMESPACES];
export interface ProviderConfig {
    chainNamespace: ChainNamespaceType;
    /**
     * Block explorer url for the chain
     * @example https://ropsten.etherscan.io
     */
    blockExplorerUrl: string;
    /**
     * Logo url for the base token
     */
    logo: string;
    /**
     * Name for ticker
     * @example 'Binance Token', 'Ethereum', 'Matic Network Token'
     */
    tickerName: string;
    /**
     * Symbol for ticker
     * @example BNB, ETH
     */
    ticker: string;
    /**
     * RPC target Url for the chain
     * @example https://ropsten.infura.io/v3/YOUR_API_KEY
     */
    rpcTarget: string;
    /**
     * websocket target Url for the chain
     */
    wsTarget?: string;
    /**
     * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)
     * @example 0x1 for mainnet, 'loading' if not connected to anything yet or connection fails
     * @defaultValue 'loading'
     */
    chainId: string;
    /**
     * Display name for the network
     */
    displayName: string;
    /**
     * Whether the network is testnet or not
     */
    isTestnet?: boolean;
    /**
     * Number of decimals for the currency ticker (e.g: 18)
     */
    decimals?: number;
}
/**
 * Custom network properties
 * @example isEIP1559Compatible: true etc.
 */
export interface NetworkProperties {
    [key: string]: number | string | boolean;
}
/**
 *
 */
export interface NetworkState extends BaseState {
    /**
     * Chain Id for the current network
     */
    chainId: string;
    providerConfig: ProviderConfig;
    properties: NetworkProperties;
}
export interface NetworkConfig extends BaseBlockTrackerConfig {
    providerConfig: ProviderConfig;
}
export interface INetworkController<C, S> extends IController<C, S> {
    /**
     * Gets the chainId of the network
     */
    getNetworkIdentifier(): string;
    /**
     * Sets provider for the current network controller
     * @param providerConfig - Provider config object
     */
    setProviderConfig(providerConfig: ProviderConfig): void;
    /**
     * Connects to the rpcUrl for the current selected provider
     */
    lookupNetwork(): Promise<void>;
}
