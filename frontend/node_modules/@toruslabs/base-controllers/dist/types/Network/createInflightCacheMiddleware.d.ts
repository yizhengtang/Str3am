import { JRPCMiddleware, JRPCRequest, Json, PendingJRPCResponse } from "@toruslabs/openlogin-jrpc";
export type JsonRpcParams = Json[] | Record<string, Json>;
export interface JsonRpcRequestToCache<Params extends JsonRpcParams> extends JRPCRequest<Params> {
    skipCache?: boolean;
}
export type JsonRpcCacheMiddleware<Params extends JsonRpcParams, Result extends Json> = JRPCMiddleware<Params, Result> extends (req: JRPCRequest<Params>, ...args: infer X) => infer Y ? (req: JsonRpcRequestToCache<Params>, ...args: X) => Y : never;
export type RequestHandlers = (handledRes: PendingJRPCResponse<Json>) => void;
export interface InflightRequest {
    [cacheId: string]: RequestHandlers[];
}
export declare function createInflightCacheMiddleware({ cacheIdentifierForRequest, }: {
    cacheIdentifierForRequest: (request: JRPCRequest<Json>) => string | null;
}): JsonRpcCacheMiddleware<JsonRpcParams, Json>;
