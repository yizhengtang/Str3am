/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ACCOUNT_CATEGORY: () => (/* reexport */ ACCOUNT_CATEGORY),
  ACTIVITY_ACTION: () => (/* reexport */ ACTIVITY_ACTION),
  ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),
  ACTIVITY_ACTION_ALL: () => (/* reexport */ ACTIVITY_ACTION_ALL),
  ACTIVITY_ACTION_BURN: () => (/* reexport */ ACTIVITY_ACTION_BURN),
  ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),
  ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_CREATE_NFT_OFFER),
  ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* reexport */ ACTIVITY_ACTION_CREATE_TRUSTLINE),
  ACTIVITY_ACTION_RECEIVE: () => (/* reexport */ ACTIVITY_ACTION_RECEIVE),
  ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* reexport */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),
  ACTIVITY_ACTION_SEND: () => (/* reexport */ ACTIVITY_ACTION_SEND),
  ACTIVITY_ACTION_TOPUP: () => (/* reexport */ ACTIVITY_ACTION_TOPUP),
  ACTIVITY_PERIOD_ALL: () => (/* reexport */ ACTIVITY_PERIOD_ALL),
  ACTIVITY_PERIOD_MONTH_ONE: () => (/* reexport */ ACTIVITY_PERIOD_MONTH_ONE),
  ACTIVITY_PERIOD_MONTH_SIX: () => (/* reexport */ ACTIVITY_PERIOD_MONTH_SIX),
  ACTIVITY_PERIOD_WEEK_ONE: () => (/* reexport */ ACTIVITY_PERIOD_WEEK_ONE),
  ACTIVITY_STATUS_CANCELLED: () => (/* reexport */ ACTIVITY_STATUS_CANCELLED),
  ACTIVITY_STATUS_CANCELLING: () => (/* reexport */ ACTIVITY_STATUS_CANCELLING),
  ACTIVITY_STATUS_PENDING: () => (/* reexport */ ACTIVITY_STATUS_PENDING),
  ACTIVITY_STATUS_SUCCESSFUL: () => (/* reexport */ ACTIVITY_STATUS_SUCCESSFUL),
  ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* reexport */ ACTIVITY_STATUS_UNSUCCESSFUL),
  BROADCAST_CHANNELS: () => (/* reexport */ BROADCAST_CHANNELS),
  BROADCAST_CHANNELS_MSGS: () => (/* reexport */ BROADCAST_CHANNELS_MSGS),
  BUTTON_POSITION: () => (/* reexport */ BUTTON_POSITION),
  BaseBlockTracker: () => (/* reexport */ BaseBlockTracker),
  BaseController: () => (/* reexport */ src_BaseController),
  BaseCurrencyController: () => (/* reexport */ BaseCurrencyController),
  BaseEmbedController: () => (/* reexport */ BaseEmbedController),
  BaseKeyringController: () => (/* reexport */ BaseKeyringController),
  BasePreferencesController: () => (/* reexport */ BasePreferencesController),
  BaseTransactionStateManager: () => (/* reexport */ BaseTransactionStateManager),
  BroadcastChannelHandler: () => (/* reexport */ BroadcastChannelHandler),
  CHAIN_NAMESPACES: () => (/* reexport */ CHAIN_NAMESPACES),
  COMMUNICATION_JRPC_METHODS: () => (/* reexport */ COMMUNICATION_JRPC_METHODS),
  COMMUNICATION_NOTIFICATIONS: () => (/* reexport */ COMMUNICATION_NOTIFICATIONS),
  CONFIRMATION_STRATEGY: () => (/* reexport */ CONFIRMATION_STRATEGY),
  CommunicationWindowManager: () => (/* reexport */ Embed_CommunicationWindowManager),
  ControllerEvents: () => (/* reexport */ ControllerEvents),
  DEFAULT_PREFERENCES: () => (/* reexport */ DEFAULT_PREFERENCES),
  FEATURES_CONFIRM_WINDOW: () => (/* reexport */ FEATURES_CONFIRM_WINDOW),
  FEATURES_DEFAULT_POPUP_WINDOW: () => (/* reexport */ FEATURES_DEFAULT_POPUP_WINDOW),
  FEATURES_DEFAULT_WALLET_WINDOW: () => (/* reexport */ FEATURES_DEFAULT_WALLET_WINDOW),
  FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* reexport */ FEATURES_PROVIDER_CHANGE_WINDOW),
  LOGIN_PROVIDER: () => (/* reexport */ LOGIN_PROVIDER),
  PAYMENT_PROVIDER: () => (/* reexport */ PAYMENT_PROVIDER),
  POPUP_LOADED: () => (/* reexport */ POPUP_LOADED),
  POPUP_RESULT: () => (/* reexport */ POPUP_RESULT),
  PROVIDER_JRPC_METHODS: () => (/* reexport */ PROVIDER_JRPC_METHODS),
  PROVIDER_NOTIFICATIONS: () => (/* reexport */ PROVIDER_NOTIFICATIONS),
  PopupHandler: () => (/* reexport */ Popup_PopupHandler),
  PopupStoreChannel: () => (/* reexport */ PopupStoreChannel),
  PopupWithBcHandler: () => (/* reexport */ Popup_PopupWithBcHandler),
  RedirectHandler: () => (/* reexport */ RedirectHandler),
  SETUP_COMPLETE: () => (/* reexport */ SETUP_COMPLETE),
  StreamWindow: () => (/* reexport */ Popup_StreamWindow),
  TRANSACTION_TYPES: () => (/* reexport */ TRANSACTION_TYPES),
  TX_EVENTS: () => (/* reexport */ TX_EVENTS),
  TransactionStatus: () => (/* reexport */ TransactionStatus),
  UserError: () => (/* reexport */ UserError),
  WSApiClient: () => (/* reexport */ src_WSApiClient),
  addressSlicer: () => (/* reexport */ addressSlicer),
  authServer: () => (/* reexport */ authServer),
  broadcastChannelOptions: () => (/* reexport */ broadcastChannelOptions),
  cloneDeep: () => (/* reexport */ cloneDeep),
  concatSig: () => (/* reexport */ concatSig),
  createChangeProviderMiddlewareMiddleware: () => (/* reexport */ createChangeProviderMiddlewareMiddleware),
  createCommunicationMiddleware: () => (/* reexport */ createCommunicationMiddleware),
  createEventEmitterProxy: () => (/* reexport */ createEventEmitterProxy),
  createFetchConfigFromReq: () => (/* reexport */ createFetchConfigFromReq),
  createFetchMiddleware: () => (/* reexport */ createFetchMiddleware),
  createGenericJRPCMiddleware: () => (/* reexport */ createGenericJRPCMiddleware),
  createInflightCacheMiddleware: () => (/* reexport */ createInflightCacheMiddleware),
  createLoggerMiddleware: () => (/* reexport */ createLoggerMiddleware),
  createOriginMiddleware: () => (/* reexport */ createOriginMiddleware),
  createRandomId: () => (/* reexport */ createRandomId),
  createSwappableProxy: () => (/* reexport */ createSwappableProxy),
  createTopupMiddleware: () => (/* reexport */ createTopupMiddleware),
  formatDate: () => (/* reexport */ formatDate),
  formatSmallNumbers: () => (/* reexport */ formatSmallNumbers),
  formatTime: () => (/* reexport */ formatTime),
  getCustomDeviceInfo: () => (/* reexport */ getCustomDeviceInfo),
  getHeaders: () => (/* reexport */ getHeaders),
  getPopupFeatures: () => (/* reexport */ getPopupFeatures),
  getTxStatusText: () => (/* reexport */ getTxStatusText),
  handleRedirectParameters: () => (/* reexport */ handleRedirectParameters),
  hashMessage: () => (/* reexport */ hashMessage),
  intToHex: () => (/* reexport */ intToHex),
  isUnauthorizedError: () => (/* reexport */ isUnauthorizedError),
  omitBy: () => (/* reexport */ omitBy),
  padWithZeroes: () => (/* reexport */ padWithZeroes),
  pickBy: () => (/* reexport */ pickBy),
  randomId: () => (/* reexport */ randomId),
  signChallenge: () => (/* reexport */ signChallenge),
  signMessage: () => (/* reexport */ signMessage),
  significantDigits: () => (/* reexport */ significantDigits),
  sleep: () => (/* reexport */ sleep),
  timeout: () => (/* reexport */ timeout),
  transactionMatchesNetwork: () => (/* reexport */ transactionMatchesNetwork),
  verifySignedChallenge: () => (/* reexport */ verifySignedChallenge)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/objectSpread2"
const objectSpread2_namespaceObject = require("@babel/runtime/helpers/objectSpread2");
var objectSpread2_default = /*#__PURE__*/__webpack_require__.n(objectSpread2_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@toruslabs/openlogin-jrpc"
const openlogin_jrpc_namespaceObject = require("@toruslabs/openlogin-jrpc");
;// CONCATENATED MODULE: ./src/BaseController.ts



/**
 * Controller class that provides configuration, state management, and subscriptions
 */
class BaseController extends openlogin_jrpc_namespaceObject.SafeEventEmitter {
  /**
   * Creates a BaseController instance. Both initial state and initial
   * configuration options are merged with defaults upon initialization.
   *
   * @param config - Initial options used to configure this controller
   * @param state - Initial state to set on this controller
   */
  constructor({
    config = {},
    state = {}
  }) {
    super();
    // Use assign since generics can't be spread: https://git.io/vpRhY
    /**
     * Default options used to configure this controller
     */
    defineProperty_default()(this, "defaultConfig", {});
    /**
     * Default state set on this controller
     */
    defineProperty_default()(this, "defaultState", {});
    /**
     * Determines if listeners are notified of state changes
     */
    defineProperty_default()(this, "disabled", false);
    /**
     * Name of this controller used during composition
     */
    defineProperty_default()(this, "name", "BaseController");
    defineProperty_default()(this, "initialConfig", void 0);
    defineProperty_default()(this, "initialState", void 0);
    defineProperty_default()(this, "internalConfig", this.defaultConfig);
    defineProperty_default()(this, "internalState", this.defaultState);
    this.initialState = state;
    this.initialConfig = config;
  }

  /**
   * Retrieves current controller configuration options
   *
   * @returns - Current configuration
   */
  get config() {
    return this.internalConfig;
  }

  /**
   * Retrieves current controller state
   *
   * @returns - Current state
   */
  get state() {
    return this.internalState;
  }

  /**
   * Updates controller configuration
   *
   * @param config - New configuration options
   * @param overwrite - Overwrite config instead of merging
   * @param fullUpdate - Boolean that defines if the update is partial or not
   */
  configure(config, overwrite = false, fullUpdate = true) {
    if (fullUpdate) {
      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);
      for (const key in this.internalConfig) {
        if (typeof this.internalConfig[key] !== "undefined") {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = this.internalConfig[key];
        }
      }
    } else {
      for (const key in config) {
        /* istanbul ignore else */
        if (typeof this.internalConfig[key] !== "undefined") {
          this.internalConfig[key] = config[key];
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = config[key];
        }
      }
    }
  }

  /**
   * Updates controller state
   *
   * @param state - New state
   * @param overwrite - Overwrite state instead of merging
   */
  update(state, overwrite = false) {
    this.internalState = overwrite ? objectSpread2_default()({}, state) : objectSpread2_default()(objectSpread2_default()({}, this.internalState), state);
    this.emit("store", this.internalState);
  }

  /**
   * Enables the controller. This sets each config option as a member
   * variable on this instance and triggers any defined setters. This
   * also sets initial state and triggers any listeners.
   *
   * @returns - This controller instance
   */
  initialize() {
    this.internalState = this.defaultState;
    this.internalConfig = this.defaultConfig;
    this.configure(this.initialConfig);
    this.update(this.initialState);
    return this;
  }
}
/* harmony default export */ const src_BaseController = (BaseController);
;// CONCATENATED MODULE: ./src/Block/BaseBlockTracker.ts


const sec = 1000;
const calculateSum = (accumulator, currentValue) => accumulator + currentValue;
const blockTrackerEvents = ["sync", "latest"];
class BaseBlockTracker extends src_BaseController {
  constructor({
    config = {},
    state = {}
  }) {
    super({
      config,
      state
    });

    // config
    defineProperty_default()(this, "name", "BaseBlockTracker");
    defineProperty_default()(this, "_blockResetTimeout", void 0);
    this.defaultState = {
      _currentBlock: {
        idempotencyKey: ""
      },
      _isRunning: false
    };
    this.defaultConfig = {
      blockResetDuration: 20 * sec
    };
    this.initialize();

    // bind functions for internal use
    this._onNewListener = this._onNewListener.bind(this);
    this._onRemoveListener = this._onRemoveListener.bind(this);
    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);

    // listen for handler changes
    this._setupInternalEvents();
  }
  isRunning() {
    return this.state._isRunning;
  }
  getCurrentBlock() {
    return this.state._currentBlock;
  }
  async getLatestBlock() {
    // return if available
    if (this.state._currentBlock.idempotencyKey) {
      return this.state._currentBlock;
    }
    // wait for a new latest block
    const latestBlock = await new Promise(resolve => {
      this.once("latest", block => {
        if (block) {
          resolve(block);
        }
      });
    });
    // return newly set current block
    return latestBlock;
  }

  // dont allow module consumer to remove our internal event listeners
  removeAllListeners(eventName) {
    if (eventName) {
      super.removeAllListeners(eventName);
    } else {
      super.removeAllListeners();
    }
    // re-add internal events
    this._setupInternalEvents();
    // trigger stop check just in case
    this._onRemoveListener();
    return this;
  }

  /**
   * To be implemented in subclass.
   */
  _start() {
    // default behavior is noop
  }

  /**
   * To be implemented in subclass.
   */
  _end() {
    // default behavior is noop
  }
  _newPotentialLatest(newBlock) {
    const currentBlock = this.state._currentBlock;
    // only update if block number is higher
    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {
      return;
    }
    this._setCurrentBlock(newBlock);
  }
  _setupInternalEvents() {
    // first remove listeners for idempotency
    this.removeListener("newListener", this._onNewListener);
    this.removeListener("removeListener", this._onRemoveListener);
    // then add them
    this.on("removeListener", this._onRemoveListener);
    this.on("newListener", this._onNewListener);
  }
  _onNewListener() {
    this._maybeStart();
  }
  _onRemoveListener() {
    // `removeListener` is called *after* the listener is removed
    if (this._getBlockTrackerEventCount() > 0) {
      return;
    }
    this._maybeEnd();
  }
  _maybeStart() {
    if (this.state._isRunning) {
      return;
    }
    this.state._isRunning = true;
    // cancel setting latest block to stale
    this._cancelBlockResetTimeout();
    this._start();
  }
  _maybeEnd() {
    if (!this.state._isRunning) {
      return;
    }
    this.state._isRunning = false;
    this._setupBlockResetTimeout();
    this._end();
  }
  _getBlockTrackerEventCount() {
    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);
  }
  _setCurrentBlock(newBlock) {
    const oldBlock = this.state._currentBlock;
    this.update({
      _currentBlock: newBlock
    });
    this.emit("latest", newBlock);
    this.emit("sync", {
      oldBlock,
      newBlock
    });
  }
  _setupBlockResetTimeout() {
    // clear any existing timeout
    this._cancelBlockResetTimeout();
    // clear latest block when stale
    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);

    // nodejs - dont hold process open
    if (this._blockResetTimeout.unref) {
      this._blockResetTimeout.unref();
    }
  }
  _cancelBlockResetTimeout() {
    if (this._blockResetTimeout) {
      clearTimeout(this._blockResetTimeout);
    }
  }
  _resetCurrentBlock() {
    this.update({
      _currentBlock: {
        idempotencyKey: ""
      }
    });
  }
}
;// CONCATENATED MODULE: ./src/createEventEmitterProxy.ts
const filterNoop = () => true;
const internalEvents = ["newListener", "removeListener"];
const externalEventFilter = name => !internalEvents.includes(name);
function getRawListeners(eventEmitter, name) {
  // prefer native
  return typeof eventEmitter.rawListeners !== "undefined" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);
}
function createEventEmitterProxy(initialTarget, opts) {
  // parse options
  const finalOpts = opts || {};
  let eventFilter = finalOpts.eventFilter || filterNoop;
  if (typeof eventFilter === "string" && eventFilter === "skipInternal") eventFilter = externalEventFilter;
  if (typeof eventFilter !== "function") throw new Error("createEventEmitterProxy - Invalid eventFilter");
  let target = initialTarget;
  let setTarget = newTarget => {
    const oldTarget = target;
    target = newTarget;
    oldTarget.eventNames().filter(eventFilter).forEach(name => {
      getRawListeners(oldTarget, name).forEach(handler => {
        newTarget.on(name, handler);
      });
    });

    // remove old listeners
    oldTarget.removeAllListeners();
  };
  const proxy = new Proxy({}, {
    get: (_, name) => {
      // override `setTarget` access
      if (name === "setTarget") return setTarget;
      return target[name];
    },
    set: (_, name, value) => {
      // allow `setTarget` overrides
      if (name === "setTarget") {
        setTarget = value;
        return true;
      }
      target[name] = value;
      return true;
    }
  });
  return proxy;
}
;// CONCATENATED MODULE: ./src/createSwappableProxy.ts
function createSwappableProxy(initialTarget) {
  let target = initialTarget;
  let setTarget = newTarget => {
    target = newTarget;
  };
  const proxy = new Proxy({}, {
    get: (_, name) => {
      // override `setTarget` access
      if (name === "setTarget") return setTarget;
      return target[name];
    },
    set: (_, name, value) => {
      // allow `setTarget` overrides
      if (name === "setTarget") {
        setTarget = value;
        return true;
      }
      target[name] = value;
      return true;
    }
  });
  return proxy;
}
;// CONCATENATED MODULE: ./src/Currency/BaseCurrencyController.ts

// every ten minutes
const POLLING_INTERVAL = 600000;
class BaseCurrencyController extends src_BaseController {
  constructor({
    config = {},
    state
  }) {
    super({
      config,
      state
    });
    this.defaultState = {
      currentCurrency: "usd",
      conversionRate: 0,
      conversionDate: "N/A",
      nativeCurrency: "ETH"
    };
    this.defaultConfig = {
      pollInterval: POLLING_INTERVAL
    };
    this.initialize();
  }

  //
  // PUBLIC METHODS
  //

  getNativeCurrency() {
    return this.state.nativeCurrency;
  }
  setNativeCurrency(nativeCurrency) {
    this.update({
      nativeCurrency,
      ticker: nativeCurrency
    });
  }
  getCurrentCurrency() {
    return this.state.currentCurrency;
  }
  setCurrentCurrency(currentCurrency) {
    this.update({
      currentCurrency
    });
  }

  /**
   * A getter for the conversionRate property
   *
   * @returns The conversion rate from ETH to the selected currency.
   *
   */
  getConversionRate() {
    return this.state.conversionRate;
  }
  setConversionRate(conversionRate) {
    this.update({
      conversionRate
    });
  }

  /**
   * A getter for the conversionDate property
   *
   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of
   * January 1, 1970
   *
   */
  getConversionDate() {
    return this.state.conversionDate;
  }
  setConversionDate(conversionDate) {
    this.update({
      conversionDate
    });
  }
}
;// CONCATENATED MODULE: ./src/enums.ts
const FEATURES_PROVIDER_CHANGE_WINDOW = {
  height: 660,
  width: 375
};
const FEATURES_DEFAULT_WALLET_WINDOW = {
  height: 740,
  width: 1315
};
const FEATURES_DEFAULT_POPUP_WINDOW = {
  height: 700,
  width: 1200
};
const FEATURES_CONFIRM_WINDOW = {
  height: 700,
  width: 450
};
const POPUP_LOADED = "popup_loaded";
const POPUP_RESULT = "popup_result";
const SETUP_COMPLETE = "setup_complete";
const ACTIVITY_ACTION_ALL = "walletActivity.allTransactions";
const ACTIVITY_ACTION_SEND = "walletActivity.send";
const ACTIVITY_ACTION_BURN = "walletActivity.burn";
const ACTIVITY_ACTION_RECEIVE = "walletActivity.receive";
const ACTIVITY_ACTION_TOPUP = "walletActivity.topup";
const ACTIVITY_ACTION_CREATE_TRUSTLINE = "walletActivity.createTrustline";
const ACTIVITY_ACTION_REMOVE_TRUSTLINE = "walletActivity.removeTrustline";
const ACTIVITY_ACTION_CREATE_NFT_OFFER = "walletActivity.createNftOffer";
const ACTIVITY_ACTION_ACCEPT_NFT_OFFER = "walletActivity.acceptNftOffer";
const ACTIVITY_ACTION_CANCEL_NFT_OFFER = "walletActivity.cancelNftOffer";
const ACTIVITY_PERIOD_ALL = "walletActivity.all";
const ACTIVITY_PERIOD_WEEK_ONE = "walletActivity.lastOneWeek";
const ACTIVITY_PERIOD_MONTH_ONE = "walletActivity.lastOneMonth";
const ACTIVITY_PERIOD_MONTH_SIX = "walletActivity.lastSixMonts";
const ACTIVITY_STATUS_SUCCESSFUL = "walletActivity.successful";
const ACTIVITY_STATUS_UNSUCCESSFUL = "walletActivity.unsuccessful";
const ACTIVITY_STATUS_PENDING = "walletActivity.pending";
const ACTIVITY_STATUS_CANCELLED = "walletActivity.cancelled";
const ACTIVITY_STATUS_CANCELLING = "walletActivity.cancelling";
const COMMUNICATION_NOTIFICATIONS = {
  IFRAME_STATUS: "iframe_status",
  // Tell embed to close the window
  CLOSE_WINDOW: "close_window",
  USER_LOGGED_IN: "user_logged_in",
  USER_LOGGED_OUT: "user_logged_out"
};
const COMMUNICATION_JRPC_METHODS = {
  LOGOUT: "logout",
  WALLET_INSTANCE_ID: "wallet_instance_id",
  USER_INFO: "user_info",
  SET_PROVIDER: "set_provider",
  TOPUP: "topup",
  IFRAME_STATUS: "iframe_status",
  // user has closed the window from embed's side
  CLOSED_WINDOW: "closed_window",
  WINDOW_BLOCKED: "window_blocked",
  GET_PROVIDER_STATE: "get_provider_state",
  LOGIN_WITH_PRIVATE_KEY: "login_with_private_key",
  SHOW_WALLET_CONNECT: "show_wallet_connect",
  SHOW_CHECKOUT: "show_checkout",
  SHOW_WALLET_UI: "show_wallet_ui",
  LOGIN_WITH_SESSION_ID: "login_with_session_id"
};
const PROVIDER_JRPC_METHODS = {
  GET_PROVIDER_STATE: "wallet_get_provider_state"
};
const PROVIDER_NOTIFICATIONS = {
  ACCOUNTS_CHANGED: "wallet_accounts_changed",
  CHAIN_CHANGED: "wallet_chain_changed",
  UNLOCK_STATE_CHANGED: "wallet_unlock_state_changed"
};
const BROADCAST_CHANNELS = {
  REDIRECT_CHANNEL: "redirect_channel",
  PROVIDER_CHANGE_CHANNEL: "torus_provider_change_channel",
  TRANSACTION_CHANNEL: "torus_channel",
  MESSAGE_CHANNEL: "torus_message_channel",
  WALLET_LOGOUT_CHANNEL: "wallet_logout_channel",
  WALLET_SELECTED_ADDRESS_CHANNEL: "wallet_selected_address_channel",
  WALLET_NETWORK_CHANGE_CHANNEL: "wallet_network_change_channel",
  WALLET_ACCOUNT_IMPORT_CHANNEL: "wallet_account_import_channel",
  THEME_CHANGE: "theme_change_channel",
  TOP_UP_CHANNEL: "top_up_channel"
};
const BROADCAST_CHANNELS_MSGS = {
  LOGOUT: "logout",
  ACCOUNT_IMPORTED: "account_imported",
  SELECTED_ADDRESS_CHANGE: "selected_address_change",
  NETWORK_CHANGE: "network_change",
  SET_THEME: "set_theme"
};
let ControllerEvents = /*#__PURE__*/function (ControllerEvents) {
  ControllerEvents["UserUnauthorized"] = "user.unauthorized";
  return ControllerEvents;
}({});
;// CONCATENATED MODULE: ./src/Embed/CommunicationMethodMiddleware.ts


function createChangeProviderMiddlewareMiddleware({
  changeProvider
}) {
  return (0,openlogin_jrpc_namespaceObject.createAsyncMiddleware)(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();
    if (!changeProvider) throw new Error("CommunicationMiddleware - opts.changeProvider not provided");
    response.result = await changeProvider(request);
  });
}
function createTopupMiddleware({
  topup
}) {
  return (0,openlogin_jrpc_namespaceObject.createAsyncMiddleware)(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();
    if (!topup) throw new Error("CommunicationMiddleware - opts.topup not provided");
    response.result = await topup(request);
  });
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return (0,openlogin_jrpc_namespaceObject.createAsyncMiddleware)(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== targetMethod) return next();
    if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);
    const result = await handler(request);
    if (!result) {
      return next();
    }
    response.result = result;
    return undefined;
  });
}
function createCommunicationMiddleware(providerHandlers) {
  const {
    getUserInfo,
    getWalletInstanceId,
    topup,
    logout,
    changeProvider,
    setIFrameStatus,
    handleWindowRpc,
    getProviderState,
    loginWithPrivateKey,
    showWalletConnect,
    showCheckout,
    showWalletUi,
    showWindowBlockAlert,
    loginWithSessionId
  } = providerHandlers;
  return (0,openlogin_jrpc_namespaceObject.mergeMiddleware)([createChangeProviderMiddlewareMiddleware({
    changeProvider
  }), createTopupMiddleware({
    topup
  }), (0,openlogin_jrpc_namespaceObject.createScaffoldMiddleware)({
    [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,
    [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,
    [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,
    [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,
    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers
    [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,
    [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,
    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,
    [COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,
    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,
    [COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert
  }), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_SESSION_ID, loginWithSessionId)]);
}
;// CONCATENATED MODULE: ./src/Embed/BaseEmbedController.ts





class BaseEmbedController extends src_BaseController {
  constructor({
    config = {},
    state
  }) {
    super({
      config,
      state
    });
    defineProperty_default()(this, "_communicationProviderProxy", void 0);
    this.defaultState = {
      isIFrameFullScreen: true,
      oauthModalVisibility: false,
      loginInProgress: false,
      dappMetadata: {
        name: "",
        icon: ""
      },
      web3AuthClientId: "",
      web3AuthNetwork: "mainnet",
      whiteLabel: null,
      confirmationStrategy: "popup"
    };
    this.initialize();
  }

  /**
   * Called by orchestrator once while initializing the class
   * @param handlers - JRPC handlers for provider
   * @returns - provider - Returns the providerProxy
   */
  initializeProvider(handlers) {
    const engine = new openlogin_jrpc_namespaceObject.JRPCEngine();
    const communicationMiddleware = createCommunicationMiddleware(handlers);
    engine.push(communicationMiddleware);
    const communicationProvider = (0,openlogin_jrpc_namespaceObject.providerFromEngine)(engine);
    this.setCommunicationProvider(communicationProvider);
  }
  setCommunicationProvider(communicationProvider) {
    if (this._communicationProviderProxy) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      this._communicationProviderProxy.setTarget(communicationProvider);
    } else {
      this._communicationProviderProxy = createSwappableProxy(communicationProvider);
    }
  }
}
;// CONCATENATED MODULE: ./src/Embed/CommunicationWindowManager.ts



class CommunicationWindowManager extends openlogin_jrpc_namespaceObject.SafeEventEmitter {
  constructor(...args) {
    super(...args);
    defineProperty_default()(this, "handleWindowRpc", (request, response, next, end) => {
      const {
        method,
        params
      } = request;
      if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {
        const {
          windowId
        } = params;
        // I've been informed that a window has been closed
        this.emit(`${windowId}:closed`);
        response.result = true;
        end();
      } else {
        next();
      }
    });
  }
}
/* harmony default export */ const Embed_CommunicationWindowManager = (CommunicationWindowManager);
;// CONCATENATED MODULE: ./src/Embed/IEmbedController.ts
const BUTTON_POSITION = {
  BOTTOM_LEFT: "bottom-left",
  TOP_LEFT: "top-left",
  BOTTOM_RIGHT: "bottom-right",
  TOP_RIGHT: "top-right"
};
const CONFIRMATION_STRATEGY = {
  POPUP: "popup",
  MODAL: "modal",
  AUTO_APPROVE: "auto-approve",
  DEFAULT: "default"
};
;// CONCATENATED MODULE: ./src/interfaces.ts
/**
 * State change callbacks
 */

/**
 * Base controller configuration
 */

/**
 * Base state representation
 */

const LOGIN_PROVIDER = {
  GOOGLE: "google",
  FACEBOOK: "facebook",
  REDDIT: "reddit",
  DISCORD: "discord",
  TWITCH: "twitch",
  APPLE: "apple",
  LINE: "line",
  GITHUB: "github",
  KAKAO: "kakao",
  LINKEDIN: "linkedin",
  TWITTER: "twitter",
  WEIBO: "weibo",
  WECHAT: "wechat",
  EMAIL_PASSWORDLESS: "email_passwordless",
  SMS_PASSWORDLESS: "sms_passwordless"
};
/**
 * {@label loginProviderType}
 */

const PAYMENT_PROVIDER = {
  MOONPAY: "moonpay",
  WYRE: "wyre",
  RAMPNETWORK: "rampnetwork",
  XANPOOL: "xanpool",
  MERCURYO: "mercuryo",
  TRANSAK: "transak"
};
;// CONCATENATED MODULE: ./src/utils/lodashUtils.ts
function omitBy(object, predicate) {
  // Create a new object to store the results
  const result = {};

  // Iterate over all own properties of the object
  for (const [key, value] of Object.entries(object)) {
    if (!predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}
function pickBy(object, predicate) {
  // Create a new object to store the results
  const result = {};
  for (const [key, value] of Object.entries(object)) {
    if (predicate(value, key)) {
      result[key] = value;
    }
  }
  return result;
}
function cloneDeep(object) {
  try {
    return structuredClone(object);
  } catch (error) {
    return JSON.parse(JSON.stringify(object));
  }
}
;// CONCATENATED MODULE: external "@toruslabs/http-helpers"
const http_helpers_namespaceObject = require("@toruslabs/http-helpers");
;// CONCATENATED MODULE: external "loglevel"
const external_loglevel_namespaceObject = require("loglevel");
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_namespaceObject);
;// CONCATENATED MODULE: ./src/utils/signingUtils.ts



const authServer = "https://authjs.web3auth.io";
const signChallenge = async (payload, chainNamespace) => {
  const t = chainNamespace === "solana" ? "sip99" : "eip191";
  const header = {
    t
  };
  const network = chainNamespace === "solana" ? "solana" : "ethereum";
  const data = {
    payload,
    header,
    network
  };
  const res = await (0,http_helpers_namespaceObject.post)(`${authServer}/siww/get`, data);
  if (!res.success) {
    throw new Error("Failed to authenticate user, Please reach out to Web3Auth Support team");
  }
  return res.challenge;
};
const verifySignedChallenge = async (chainNamespace, signedMessage, challenge, issuer, sessionTime, clientId, web3AuthNetwork, audience, additionalMetadata) => {
  var _window$location;
  const t = chainNamespace === "solana" ? "sip99" : "eip191";
  const sigData = objectSpread2_default()({
    signature: {
      s: signedMessage,
      t
    },
    message: challenge,
    issuer,
    audience: audience || (typeof window !== "undefined" ? ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || "com://reactnative" : "com://reactnative"),
    timeout: sessionTime
  }, additionalMetadata || {});
  const idTokenRes = await (0,http_helpers_namespaceObject.post)(`${authServer}/siww/verify`, sigData, {
    headers: {
      client_id: clientId,
      wallet_provider: issuer,
      web3auth_network: web3AuthNetwork
    }
  });
  if (!idTokenRes.success) {
    external_loglevel_default().error("Failed to authenticate user, ,message verification failed", idTokenRes.error);
    throw new Error("Failed to authenticate user, ,message verification failed");
  }
  return idTokenRes.token;
};
;// CONCATENATED MODULE: ./src/utils/txUtils.ts

const getTxStatusText = txStatus => {
  switch (txStatus) {
    case "rejected":
    case "unapproved":
    case "failed":
      return ACTIVITY_STATUS_UNSUCCESSFUL;
    case "confirmed":
      return ACTIVITY_STATUS_SUCCESSFUL;
    case "submitted":
      return ACTIVITY_STATUS_PENDING;
    case "cancelled":
      return ACTIVITY_STATUS_CANCELLED;
    default:
      return "";
  }
};
;// CONCATENATED MODULE: external "@ethereumjs/util"
const util_namespaceObject = require("@ethereumjs/util");
;// CONCATENATED MODULE: external "@toruslabs/openlogin-utils"
const openlogin_utils_namespaceObject = require("@toruslabs/openlogin-utils");
;// CONCATENATED MODULE: external "bignumber.js"
const external_bignumber_js_namespaceObject = require("bignumber.js");
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_namespaceObject);
;// CONCATENATED MODULE: ./src/utils/utils.ts



/**
 * General utility functions
 */

function intToHex(i) {
  const hex = i.toString(16);
  return `0x${hex}`;
}

/**
 * Returns a random number. Don't use for cryptographic purposes.
 * @returns a random number
 */
const randomId = () => Math.random().toString(36).slice(2);

/**
 * Pads the front of the given hex string with zeroes until it reaches the
 * target length. If the input string is already longer than or equal to the
 * target length, it is returned unmodified.
 *
 * If the input string is "0x"-prefixed or not a hex string, an error will be
 * thrown.
 *
 * @param hexString - The hexadecimal string to pad with zeroes.
 * @param targetLength - The target length of the hexadecimal string.
 * @returns The input string front-padded with zeroes, or the original string
 * if it was already greater than or equal to to the target length.
 */
function padWithZeroes(hexString, targetLength) {
  if (hexString !== "" && !/^[a-f0-9]+$/iu.test(hexString)) {
    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);
  }
  if (targetLength < 0) {
    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);
  }
  return String.prototype.padStart.call(hexString, targetLength, "0");
}
/**
 * Concatenate an extended ECDSA signature into a hex string.
 *
 * @param v - The 'v' portion of the signature.
 * @param r - The 'r' portion of the signature.
 * @param s - The 's' portion of the signature.
 * @returns The concatenated ECDSA signature.
 */
function concatSig(v, r, s) {
  const rSig = (0,util_namespaceObject.fromSigned)(r);
  const sSig = (0,util_namespaceObject.fromSigned)(s);
  const vSig = (0,util_namespaceObject.bytesToBigInt)(v);
  const rStr = padWithZeroes(Buffer.from((0,util_namespaceObject.toUnsigned)(rSig)).toString("hex"), 64);
  const sStr = padWithZeroes(Buffer.from((0,util_namespaceObject.toUnsigned)(sSig)).toString("hex"), 64);
  const vStr = (0,util_namespaceObject.stripHexPrefix)((0,util_namespaceObject.bigIntToHex)(vSig));
  return (0,util_namespaceObject.addHexPrefix)(rStr.concat(sStr, vStr));
}
function timeout(duration) {
  return new Promise(resolve => {
    const timeoutRef = window.setTimeout(() => {
      resolve();
      window.clearTimeout(timeoutRef);
    }, duration);
  });
}
const getHeaders = (jwt, publicAddress) => {
  return {
    headers: {
      Authorization: `Bearer ${jwt}`,
      "Content-Type": "application/json; charset=utf-8",
      "public-address": publicAddress
    }
  };
};

/**
 * Text/number formatting utilities
 */
const formatSmallNumbers = (number, currency = "usd", noTilde = false) => {
  const finalNumber = external_bignumber_js_default().isBigNumber(number) ? number.toNumber() : number;
  if (!Number.isFinite(finalNumber)) return "";
  const value = currency.toLowerCase() === "usd" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));
  const tilde = value > 0 ? "~ " : "";
  return `${currency.toLowerCase() === "usd" || noTilde ? "" : tilde}${Number(value)} ${currency.toUpperCase()}`;
};
const addressSlicer = (address, sliceLength = 5) => {
  if (!address) return "";
  if (address.length < 11) {
    return address;
  }
  if (typeof address !== "string") return "";
  return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;
};
const significantDigits = (number, perc = false, length_ = 2) => {
  let input = !external_bignumber_js_default().isBigNumber(number) ? new (external_bignumber_js_default())(number) : number;
  if (input.isZero()) return input;
  if (perc) {
    input = input.times(new (external_bignumber_js_default())(100));
  }
  let depth;
  if (input.gte(new (external_bignumber_js_default())(1))) {
    depth = length_;
  } else {
    depth = length_ - 1 + Math.ceil(Math.log10(new (external_bignumber_js_default())("1").div(input).toNumber()));
  }
  const shift = new (external_bignumber_js_default())(10).pow(new (external_bignumber_js_default())(depth));
  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();
  return roundedNumber;
};
const formatDate = inputDate => {
  const monthList = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  const date = new Date(inputDate);
  const day = date.getDate();
  const month = monthList[date.getMonth()];
  const year = date.getFullYear();
  return `${day} ${month} ${year}`;
};
const formatTime = time => {
  return new Date(time).toTimeString().slice(0, 8);
};

/**
 * Network utilities
 */
const transactionMatchesNetwork = (transaction, chainId) => {
  if (typeof transaction.chainId !== "undefined") {
    return transaction.chainId === chainId;
  }
  return false;
};

/**
 * Signing utils
 */
const hashMessage = message => {
  const bufferedMessage = Buffer.from(message, "utf8");
  const el = (0,util_namespaceObject.hashPersonalMessage)(bufferedMessage);
  return Buffer.from(el);
};
const signMessage = async (privateKey, data) => {
  const privKey = Buffer.from(privateKey, "hex");
  const message = (0,util_namespaceObject.stripHexPrefix)(data);
  const msgSig = (0,util_namespaceObject.ecsign)(Buffer.from(message, "hex"), privKey);
  const rawMsgSig = concatSig(Buffer.from((0,util_namespaceObject.bigIntToBytes)(msgSig.v)), Buffer.from(msgSig.r), Buffer.from(msgSig.s));
  return rawMsgSig;
};

/**
 * popup handler utils
 */
function getPopupFeatures({
  width: w,
  height: h
}) {
  // Fixes dual-screen position                             Most browsers      Firefox
  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;
  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;
  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;
  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;
  const systemZoom = 1; // No reliable estimate

  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);
  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);
  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;
  return features;
}
const broadcastChannelOptions = {
  type: "server",
  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']
  webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)
};
function getCustomDeviceInfo() {
  var _navigator;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {
    return {
      browser: "Brave"
    };
  }
}
class UserError extends Error {}
const handleRedirectParameters = (hash, queryParameters) => {
  const hashParameters = {};
  const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);
  hashUrl.searchParams.forEach((value, key) => {
    hashParameters[key] = value;
  });
  let instanceParameters = {};
  let error = "";
  if (!queryParameters.windowId) {
    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {
      instanceParameters = JSON.parse((0,openlogin_utils_namespaceObject.safeatob)(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};
      error = hashParameters.error_description || hashParameters.error || error;
    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {
      instanceParameters = JSON.parse((0,openlogin_utils_namespaceObject.safeatob)(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};
      if (queryParameters.error) error = queryParameters.error;
    }
  }
  return {
    error,
    instanceParameters,
    hashParameters
  };
};
function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
const isUnauthorizedError = error => {
  return error instanceof Response && error.status === 401;
};
;// CONCATENATED MODULE: ./src/utils/index.ts




;// CONCATENATED MODULE: ./src/Keyring/BaseKeyringController.ts


class BaseKeyringController extends src_BaseController {
  constructor({
    config = {},
    state
  }) {
    var _state$wallets;
    super({
      config,
      state
    });
    this.defaultState = {
      wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []
    };
    this.initialize();
  }

  // for signing auth message
  async signAuthMessage(address, message) {
    const keyring = this.state.wallets.find(x => x.address === address);
    if (!keyring) {
      throw new Error("key does not exist");
    }
    const hashedMessage = hashMessage(message).toString("hex");
    const rawMessageSig = await signMessage(keyring.privateKey, hashedMessage);
    return rawMessageSig;
  }
}
;// CONCATENATED MODULE: ./src/Network/createFetchMiddleware.ts

const RETRIABLE_ERRORS = [
// ignore server overload errors
"Gateway timeout", "ETIMEDOUT",
// ignore server sent html error pages
// or truncated json responses
"failed to parse response body",
// ignore errors where http req failed to establish
"Failed to fetch"];
function checkForHttpErrors(fetchRes) {
  // check for errors
  switch (fetchRes.status) {
    case 405:
      throw openlogin_jrpc_namespaceObject.rpcErrors.methodNotFound();
    case 418:
      throw openlogin_jrpc_namespaceObject.rpcErrors.internal({
        message: `Request is being rate limited.`,
        data: {
          cause: fetchRes
        }
      });
    case 503:
    case 504:
      throw openlogin_jrpc_namespaceObject.rpcErrors.internal({
        message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`
      });
    default:
      break;
  }
}
function createFetchMiddleware_timeout(duration) {
  return new Promise(resolve => {
    setTimeout(resolve, duration);
  });
}
function parseResponse(fetchRes, body) {
  // check for error code
  if (fetchRes.status !== 200) {
    throw openlogin_jrpc_namespaceObject.rpcErrors.internal({
      message: `Non-200 status code: '${fetchRes.status}'`,
      data: body
    });
  }
  // check for rpc error
  if (body.error) {
    throw openlogin_jrpc_namespaceObject.rpcErrors.internal({
      data: body.error
    });
  }
  // return successful result
  return body.result;
}
function createFetchConfigFromReq({
  req,
  rpcTarget,
  originHttpHeaderKey
}) {
  const parsedUrl = new URL(rpcTarget);

  // prepare payload
  // copy only canonical json rpc properties
  const payload = {
    id: req.id,
    jsonrpc: req.jsonrpc,
    method: req.method,
    params: req.params
  };

  // extract 'origin' parameter from request
  const originDomain = req.origin;

  // serialize request body
  const serializedPayload = JSON.stringify(payload);

  // configure fetch params
  const fetchParams = {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    body: serializedPayload
  };

  // optional: add request origin as header
  if (originHttpHeaderKey && originDomain) {
    fetchParams.headers[originHttpHeaderKey] = originDomain;
  }
  return {
    fetchUrl: parsedUrl.href,
    fetchParams
  };
}
function createFetchMiddleware({
  rpcTarget,
  originHttpHeaderKey
}) {
  return (0,openlogin_jrpc_namespaceObject.createAsyncMiddleware)(async (req, res, _next) => {
    const {
      fetchUrl,
      fetchParams
    } = createFetchConfigFromReq({
      req,
      rpcTarget,
      originHttpHeaderKey
    });

    // attempt request multiple times
    const maxAttempts = 5;
    const retryInterval = 1000;
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const fetchRes = await fetch(fetchUrl, fetchParams);
        // check for http errrors
        checkForHttpErrors(fetchRes);
        // parse response body
        const fetchBody = await fetchRes.json();
        const result = parseResponse(fetchRes, fetchBody);
        // set result and exit retry loop
        res.result = result;
        return;
      } catch (err) {
        const errMsg = (err.message || err).toString();
        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase));
        // re-throw error if not retriable
        if (!isRetriable) {
          throw err;
        }
      }
      // delay before retrying
      await createFetchMiddleware_timeout(retryInterval);
    }
  });
}
;// CONCATENATED MODULE: ./src/Network/createInflightCacheMiddleware.ts



function deferredPromise() {
  let resolve;
  const promise = new Promise(_resolve => {
    resolve = _resolve;
  });
  return {
    resolve,
    promise
  };
}
function createInflightCacheMiddleware({
  cacheIdentifierForRequest
}) {
  const inflightRequests = {};
  async function createActiveRequestHandler(res, activeRequestHandlers) {
    const {
      resolve,
      promise
    } = deferredPromise();
    activeRequestHandlers.push(handledRes => {
      // append a copy of the result and error to the response
      res.result = cloneDeep(handledRes.result);
      res.error = cloneDeep(handledRes.error);
      resolve();
    });
    return promise;
  }
  function handleActiveRequest(res, activeRequestHandlers) {
    // use setTimeout so we can resolve our original request first
    setTimeout(() => {
      activeRequestHandlers.forEach(handler => {
        try {
          handler(res);
        } catch (err) {
          // catch error so all requests are handled correctly
          external_loglevel_default().error(err);
        }
      });
    });
  }
  return (0,openlogin_jrpc_namespaceObject.createAsyncMiddleware)(async (req, res, next) => {
    // allow cach to be skipped if so specified
    if (req.skipCache) {
      return next();
    }
    // get cacheId, if cacheable
    const cacheId = cacheIdentifierForRequest(req);
    // if not cacheable, skip
    if (!cacheId) {
      external_loglevel_default().info("Request is not cacheable, proceeding. req = %o", req);
      return next();
    }
    // check for matching requests
    let activeRequestHandlers = inflightRequests[cacheId];
    // if found, wait for the active request to be handled
    if (activeRequestHandlers) {
      // setup the response listener and wait for it to be called
      // it will handle copying the result and request fields
      external_loglevel_default().info("Running %i handler(s) for request %o", activeRequestHandlers.length, req);
      await createActiveRequestHandler(res, activeRequestHandlers);
      return undefined;
    }
    // setup response handler array for subsequent requests
    activeRequestHandlers = [];
    inflightRequests[cacheId] = activeRequestHandlers;
    // allow request to be handled normally
    external_loglevel_default().info("Carrying original request forward %o", req);
    await next();
    // clear inflight requests
    delete inflightRequests[cacheId];
    // schedule activeRequestHandlers to be handled
    external_loglevel_default().info("Running %i collected handler(s) for request %o", activeRequestHandlers.length, req);
    handleActiveRequest(res, activeRequestHandlers);
    // complete
    return undefined;
  });
}
;// CONCATENATED MODULE: ./src/Network/createLoggerMiddleware.ts

function createLoggerMiddleware(options) {
  return function loggerMiddleware(request, response, next) {
    next(callback => {
      if (response.error) {
        external_loglevel_default().warn("Error in RPC response:\n", response);
      }
      if (request.isTorusInternal) return;
      external_loglevel_default().info(`RPC (${options.origin}):`, request, "->", response);
      callback();
    });
  };
}
;// CONCATENATED MODULE: ./src/Network/createOriginMiddleware.ts
function createOriginMiddleware(options) {
  return function originMiddleware(request, _, next) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    request.origin = options.origin;
    next();
  };
}
;// CONCATENATED MODULE: ./src/Network/INetworkController.ts
const createRandomId = () => Math.random().toString(36).substring(2);
const CHAIN_NAMESPACES = {
  EIP155: "eip155",
  SOLANA: "solana",
  CASPER: "casper",
  XRPL: "xrpl",
  OTHER: "other"
};
// eip155 for all evm chains

/**
 * Custom network properties
 * @example isEIP1559Compatible: true etc.
 */

/**
 *
 */
;// CONCATENATED MODULE: external "@toruslabs/broadcast-channel"
const broadcast_channel_namespaceObject = require("@toruslabs/broadcast-channel");
;// CONCATENATED MODULE: ./src/Popup/BroadcastChannelHandler.ts




class BroadcastChannelHandler {
  constructor(channelPrefix, instanceId) {
    defineProperty_default()(this, "bc", void 0);
    defineProperty_default()(this, "channel", void 0);
    const queryParameters = new URLSearchParams(window.location.search);
    const windowId = queryParameters.get("windowId");
    this.channel = `${channelPrefix}_${instanceId}_${windowId}`;
    this.bc = new broadcast_channel_namespaceObject.BroadcastChannel(this.channel, broadcastChannelOptions);
  }
  getMessageFromChannel() {
    return new Promise((resolve, reject) => {
      this.bc.addEventListener("message", async ev => {
        this.bc.close();
        if (ev.error) {
          reject(ev.error);
        } else {
          resolve(ev.data);
        }
      });
      this.bc.postMessage({
        data: {
          type: POPUP_LOADED
        }
      });
    });
  }
}
;// CONCATENATED MODULE: ./src/Popup/StreamWindow.ts






class StreamWindow extends src_BaseController {
  constructor({
    config,
    state = {}
  }) {
    super({
      config,
      state
    });
    // if window has been closed by users
    defineProperty_default()(this, "closed", false);
    this.initialize();
  }
  async open() {
    return new Promise((resolve, reject) => {
      const {
        communicationEngine,
        communicationWindowManager
      } = this.config;
      let popupSuccess = false;
      communicationWindowManager.once(`${this.state.windowId}:closed`, () => {
        this.closed = true;
      });

      // Window is not open yet
      if (!this.state.windowId) {
        // since, we're opening window now, no need to tell window anything
        this.update({
          windowId: randomId()
        });
        if (typeof this.config.handleWindowBlockAlert !== "function") reject(new Error("handleWindowBlockAlert is not a function"));
        communicationWindowManager.once(`${this.state.windowId}:iframe-opened`, () => {
          // this means iframe is full screen now
          // there might be multiple block alerts at a time. so, we don't set iframe to close after handling this here
          this.config.handleWindowBlockAlert({
            windowId: this.state.windowId,
            finalUrl: this.state.url.href
          }).then(resolve).catch(reject);
        });

        // Tell the other party to maximize the iframe
        communicationEngine.emit("notification", {
          method: COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS,
          params: {
            isFullScreen: true,
            rid: this.state.windowId
          }
        });
      } else {
        // this is a pre-opened window. so, we need to tell it to redirect to correct url. it's currently waiting on /redirect and uses `RedirectHandler` code
        // Send this window with `windowId` the url to open via bc
        const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.config.instanceId}_${this.state.windowId}`;
        const bc = new broadcast_channel_namespaceObject.BroadcastChannel(channelName, broadcastChannelOptions);
        bc.addEventListener("message", async ev => {
          try {
            external_loglevel_default().info(ev, `receiving data on channel: ${bc.name}`);
            const {
              error
            } = ev;
            if (error) {
              // Popup says some error. so, we say it's not really opened
              reject(new Error(error));
              return;
            }
            const {
              message
            } = ev.data;
            if (message === POPUP_LOADED) {
              popupSuccess = true;
              await bc.postMessage({
                data: {
                  url: this.state.url.href,
                  message: "" // No need of a msg
                }
              });
              resolve(this);
              bc.close();
            }
          } catch (error) {
            reject(error);
            bc.close();
            // Something went wrong. so, we close that window
            this.close();
          }
        });

        // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something
        // we need backoff strategy
        // we need to wait for first attempt to succeed/fail until the second attempt
        // If we get 429, we need to wait for a while and then try again

        const postMsg = async () => {
          // this never throws
          const localResponse = await bc.postMessage({
            data: {
              message: SETUP_COMPLETE
            }
          });
          return localResponse;
        };
        let currentDelay = bc.type === "server" ? 1000 : 200;
        const recursiveFn = async () => {
          if (!popupSuccess && !this.closed) {
            const localResponse = await postMsg();
            if (bc.type === "server") {
              const serverResponse = localResponse;
              if (serverResponse.status >= 400) {
                // We need to wait for a while and then try again
                currentDelay = Math.round(currentDelay * 1.5);
              }
            }
            await sleep(currentDelay);
            await recursiveFn();
          }
        };
        recursiveFn();
      }
    });
  }
  close() {
    const {
      communicationEngine
    } = this.config;
    communicationEngine.emit("notification", {
      method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,
      params: {
        windowId: this.state.windowId
      }
    });
  }
}
/* harmony default export */ const Popup_StreamWindow = (StreamWindow);
;// CONCATENATED MODULE: ./src/Popup/PopupHandler.ts




/*
Scenarios:
1. Open a normal popup window and no communication with it - Use PopupHandler
2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)

3. If window is already opened, pass in windowId to the popup handler. 
   This will establish communication with the popup window and sends it a new url to redirect to


If you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),
  StreamWindow is invoked and it writes in a channel to display a message to the user

Once user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)
*/

/**
 * Handles popup window management.
 * For broadcast channel communication, use url with `instanceId` coded into state parameter.
 * This state parameter will be passed across redirects according to OAuth spec.
 */
class PopupHandler extends src_BaseController {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
    // this.id = randomId()
    // Add in dapp storage key to all popups as a hash parameter
    this.defaultConfig = {
      features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),
      target: "_blank",
      communicationEngine: null,
      communicationWindowManager: null,
      timeout: 30000,
      instanceId: "",
      handleWindowBlockAlert: null
    };
    this.defaultState = {
      windowTimer: null,
      window: null,
      iClosedWindow: false,
      windowId: "",
      url: state.url
    };
    this.initialize();
    this._setupTimer();
  }
  async open() {
    // if window is already open
    const {
      target,
      features,
      communicationEngine,
      communicationWindowManager
    } = this.config;
    const {
      windowId,
      url
    } = this.state;
    // No window has been pre-opened
    if (!windowId) {
      // try to open a window first
      let localWindow = window.open(url.href, target, features);
      let finalWindowId = "";
      if (!localWindow) {
        // if it's blocked, open StreamWindow
        const streamWindow = new Popup_StreamWindow({
          config: {
            communicationEngine,
            communicationWindowManager,
            instanceId: this.config.instanceId,
            handleWindowBlockAlert: this.config.handleWindowBlockAlert
          },
          state: {
            url
          }
        });
        streamWindow.open();
        finalWindowId = streamWindow.state.windowId;
        localWindow = streamWindow;
      }
      this.update({
        window: localWindow,
        windowId: finalWindowId || randomId()
      });
      return;
    }
    // A window has been pre-opened with a query parameter `windowId`
    const localWindow = new Popup_StreamWindow({
      config: {
        communicationEngine,
        communicationWindowManager,
        instanceId: this.config.instanceId,
        handleWindowBlockAlert: this.config.handleWindowBlockAlert
      },
      state: {
        url,
        windowId
      }
    });
    this.update({
      window: localWindow,
      windowId: localWindow.state.windowId
    });
    await localWindow.open();
  }
  close() {
    this.update({
      iClosedWindow: true
    });
    const {
      window
    } = this.state;
    if (window) window.close();
  }
  _setupTimer() {
    const timer = window.setInterval(() => {
      const {
        window,
        windowTimer,
        iClosedWindow
      } = this.state;
      if (window && window.closed) {
        if (windowTimer) clearInterval(windowTimer);
        setTimeout(() => {
          if (!iClosedWindow) {
            this.emit("close");
          }
          this.update({
            iClosedWindow: false,
            window: null
          });
        }, this.config.timeout);
      }
      if (window === null && windowTimer) clearInterval(windowTimer);
    }, 500);
    this.update({
      windowTimer: timer
    });
  }
}
/* harmony default export */ const Popup_PopupHandler = (PopupHandler);
;// CONCATENATED MODULE: ./src/Popup/PopupStoreChannel.ts





// Always listening channels. Hence, no window id
class PopupStoreChannel {
  constructor({
    instanceId,
    handleLogout,
    handleAccountImport,
    handleNetworkChange,
    handleSelectedAddressChange,
    handleThemeChange
  }) {
    defineProperty_default()(this, "handleLogout", void 0);
    defineProperty_default()(this, "handleAccountImport", void 0);
    defineProperty_default()(this, "handleNetworkChange", void 0);
    defineProperty_default()(this, "handleThemeChange", void 0);
    defineProperty_default()(this, "handleSelectedAddressChange", void 0);
    defineProperty_default()(this, "instanceId", void 0);
    this.instanceId = instanceId;
    this.handleLogout = handleLogout;
    this.handleAccountImport = handleAccountImport;
    this.handleNetworkChange = handleNetworkChange;
    this.handleSelectedAddressChange = handleSelectedAddressChange;
    this.handleThemeChange = handleThemeChange;
  }
  setupStoreChannels() {
    this.logoutChannel();
    this.importAccountChannel();
    this.networkChangeChannel();
    this.selectedAddressChangeChannel();
    this.themeChangedChannel();
  }
  logoutChannel() {
    const logoutChannel = new broadcast_channel_namespaceObject.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);
    logoutChannel.addEventListener("message", ev => {
      var _ev$data;
      external_loglevel_default().info("received logout message", ev);
      if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {
        external_loglevel_default().info("Logging Out");
        this.handleLogout();
      }
    });
  }
  importAccountChannel() {
    const walletAccountImportChannel = new broadcast_channel_namespaceObject.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);
    walletAccountImportChannel.addEventListener("message", ev => {
      var _ev$data2;
      if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {
        var _ev$data3;
        this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);
      }
    });
  }
  networkChangeChannel() {
    const walletAccountImportChannel = new broadcast_channel_namespaceObject.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);
    walletAccountImportChannel.addEventListener("message", ev => {
      var _ev$data4;
      if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {
        var _ev$data5;
        this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);
      }
    });
  }
  themeChangedChannel() {
    const walletAccountImportChannel = new broadcast_channel_namespaceObject.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);
    walletAccountImportChannel.addEventListener("message", ev => {
      var _ev$data6;
      external_loglevel_default().info({
        ev
      });
      if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {
        var _ev$data7;
        this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);
      }
    });
  }
  selectedAddressChangeChannel() {
    const walletAccountImportChannel = new broadcast_channel_namespaceObject.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);
    walletAccountImportChannel.addEventListener("message", ev => {
      var _ev$data8;
      if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {
        var _ev$data9;
        this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);
      }
    });
  }
}
;// CONCATENATED MODULE: ./src/Popup/PopupWithBcHandler.ts






/**
 * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.
 */
class PopupWithBcHandler extends Popup_PopupHandler {
  constructor({
    config,
    state,
    channelPrefix
  }) {
    super({
      config,
      state
    });
    defineProperty_default()(this, "channelPrefix", void 0);
    this.channelPrefix = channelPrefix;
  }

  /**
   * Receives the data from popup window and closes the window
   * @param successExtraFn - Extra function to be called after the data is received
   * @returns The data to be received
   */
  handle(successExtraFn) {
    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;
    const bc = new broadcast_channel_namespaceObject.BroadcastChannel(channelName, broadcastChannelOptions);
    return new Promise((resolve, reject) => {
      const closeListener = () => {
        bc.close();
        reject(new UserError("user closed popup"));
        this.removeListener("close", closeListener);
      };
      this.on("close", closeListener);
      bc.addEventListener("message", async ev => {
        external_loglevel_default().info(ev, `receiving data on channel: ${bc.name}`);
        try {
          const {
            error,
            data
          } = ev;
          if (error) {
            reject(new Error(error));
            return;
          }
          if (successExtraFn) await successExtraFn.call(this, data);
          resolve(data);
        } catch (error) {
          reject(error);
        } finally {
          bc.close();
          this.close();
        }
      });
      this.open().then(() => {
        external_loglevel_default().info(`opened window ${bc.name}`);
        // Opened window. yay.  let the bc events do their job
        return undefined;
      }).catch(err => {
        external_loglevel_default().error(err, "something went wrong while opening window");
        reject(err);
      });
    });
  }

  /**
   * Use this if we have to send large payloads which don't fit in query/hash params.
   * Waits for ack that popup window is ready to receive data.
   * Receives the data from popup window and closes the window
   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data
   * @param successExtraFn - Extra function to be called after the data is received
   * @returns The data to be received
   */
  handleWithHandshake(payload, successExtraFn) {
    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;
    const bc = new broadcast_channel_namespaceObject.BroadcastChannel(channelName, broadcastChannelOptions);
    return new Promise((resolve, reject) => {
      const closeListener = () => {
        bc.close();
        reject(new UserError("user closed popup"));
        this.removeListener("close", closeListener);
      };
      this.on("close", closeListener);
      bc.addEventListener("message", async ev => {
        try {
          external_loglevel_default().info(ev, `receiving data on channel: ${bc.name}`);
          const {
            error,
            data
          } = ev;
          if (error) {
            reject(new Error(error));
            return;
          }
          // Do handshake
          const {
            type = ""
          } = data;
          if (type === POPUP_LOADED) {
            // Hack with generic to use the same type for both send and receive
            await bc.postMessage({
              data: payload
            });
          } else if (type === POPUP_RESULT) {
            if (successExtraFn) await successExtraFn.call(this, data);
            resolve(data);
            // Must only close the bc after result is done
            bc.close();
            this.close();
          }
        } catch (error) {
          reject(error);
          bc.close();
          this.close();
        }
      });
      this.open().then(() => {
        external_loglevel_default().info(`opened window ${bc.name}`);
        // Opened window. yay.  let the bc events do their job
        return undefined;
      }).catch(err => {
        external_loglevel_default().error(err, "something went wrong while opening window");
        reject(err);
      });
    });
  }
}
/* harmony default export */ const Popup_PopupWithBcHandler = (PopupWithBcHandler);
;// CONCATENATED MODULE: ./src/Popup/RedirectHandler.ts





class RedirectHandler {
  // private hashParameters: Record<string, string>;

  constructor(instanceId) {
    // private error: string;
    // this is sessionid post login
    defineProperty_default()(this, "instanceId", void 0);
    defineProperty_default()(this, "finalQueryParams", {});
    defineProperty_default()(this, "instanceParameters", void 0);
    const {
      hash
    } = window.location;
    const queryParameters = new URLSearchParams(window.location.search);
    queryParameters.forEach((value, key) => {
      this.finalQueryParams[key] = value;
    });
    const {
      instanceParameters
    } = handleRedirectParameters(hash, this.finalQueryParams);
    // this.error = error;
    this.instanceParameters = instanceParameters;
    // this.hashParameters = hashParameters;
    this.instanceId = instanceId;
  }
  async handle() {
    return new Promise((resolve, reject) => {
      const {
        finalQueryParams,
        instanceParameters
      } = this;
      let bc;
      try {
        // used for login case. there's no windowId here
        // if (!finalQueryParams.windowId) {
        //   bc = new BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);
        //   bc.addEventListener("message", async (ev) => {
        //     if (ev.error) {
        //       reject(ev.error);
        //       window.close();
        //     } else {
        //       resolve();
        //       bc.close();
        //       log.info("posted", { finalQueryParams, hashParameters, instanceParameters });
        //     }
        //   });
        //   bc.postMessage({
        //     data: {
        //       instanceParams: instanceParameters,
        //       hashParams: hashParameters,
        //       queryParams: finalQueryParams,
        //     },
        //     error,
        //   });

        //   setTimeout(() => {
        //     resolve();
        //     window.location.href = window.location.origin + window.location.search + window.location.hash;
        //   }, 5000);
        // } else {
        const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.instanceId || instanceParameters.instanceId}_${finalQueryParams.windowId || instanceParameters.windowId}`;
        bc = new broadcast_channel_namespaceObject.BroadcastChannel(channelName, broadcastChannelOptions);
        bc.addEventListener("message", async ev => {
          const {
            url,
            message
          } = ev.data;
          if (url) {
            resolve();
            window.location.href = url;
          } else if (message === SETUP_COMPLETE) {
            await bc.postMessage({
              data: {
                windowId: finalQueryParams.windowId,
                message: POPUP_LOADED
              }
            });
          }
          if (ev.error && ev.error !== "") {
            external_loglevel_default().error(ev.error);
            resolve();
            bc.close();
          }
        });
        // }
      } catch (err) {
        external_loglevel_default().info(err, "something went wrong");
        reject(err);
        if (bc) bc.close();
        window.close();
      }
    });
  }
}
;// CONCATENATED MODULE: ./src/Popup/index.ts







;// CONCATENATED MODULE: external "bowser"
const external_bowser_namespaceObject = require("bowser");
var external_bowser_default = /*#__PURE__*/__webpack_require__.n(external_bowser_namespaceObject);
;// CONCATENATED MODULE: external "jwt-decode"
const external_jwt_decode_namespaceObject = require("jwt-decode");
;// CONCATENATED MODULE: ./src/WSApiClient.ts

/**
 * API client to communicate with wallet services backend
 */





var HTTP_METHOD = /*#__PURE__*/function (HTTP_METHOD) {
  HTTP_METHOD[HTTP_METHOD["GET"] = 0] = "GET";
  HTTP_METHOD[HTTP_METHOD["POST"] = 1] = "POST";
  HTTP_METHOD[HTTP_METHOD["PUT"] = 2] = "PUT";
  HTTP_METHOD[HTTP_METHOD["PATCH"] = 3] = "PATCH";
  HTTP_METHOD[HTTP_METHOD["DELETE"] = 4] = "DELETE";
  return HTTP_METHOD;
}(HTTP_METHOD || {});
const constructAuthHeaders = ({
  jwtToken,
  publicAddress
}) => {
  return {
    headers: {
      Authorization: `Bearer ${jwtToken}`,
      "public-address": publicAddress
    }
  };
};
const withUnauthorizedHandler = async (fn, emitter) => {
  try {
    const response = await fn();
    return response;
  } catch (e) {
    if (isUnauthorizedError(e)) {
      emitter.emit(ControllerEvents.UserUnauthorized);
    }
    throw e;
  }
};
const jwtTokenExpired = jwt => {
  const decoded = (0,external_jwt_decode_namespaceObject.jwtDecode)(jwt);
  const jwtExpiry = decoded.exp * 1000;
  const currentTime = new Date().getTime();
  return currentTime >= jwtExpiry;
};
const WSApiClient = (baseApiUrl, emitter) => {
  const authRequest = (method, url, data, authCredentials, customOptions) => {
    if (jwtTokenExpired(authCredentials.jwtToken)) {
      emitter.emit(ControllerEvents.UserUnauthorized);
      // eslint-disable-next-line @typescript-eslint/no-throw-literal
      throw new Response(null, {
        status: 401,
        statusText: "Unauthorized"
      });
    }
    const headers = objectSpread2_default()({
      "Content-Type": "application/json; charset=utf-8"
    }, constructAuthHeaders(authCredentials));
    if (method === HTTP_METHOD.GET) {
      return withUnauthorizedHandler(() => (0,http_helpers_namespaceObject.get)(url, headers, customOptions), emitter);
    }
    if (method === HTTP_METHOD.POST) {
      return withUnauthorizedHandler(() => (0,http_helpers_namespaceObject.post)(url, data, headers, customOptions), emitter);
    }
    if (method === HTTP_METHOD.PUT) {
      return withUnauthorizedHandler(() => (0,http_helpers_namespaceObject.put)(url, data, headers, customOptions), emitter);
    }
    if (method === HTTP_METHOD.PATCH) {
      return withUnauthorizedHandler(() => (0,http_helpers_namespaceObject.patch)(url, data, headers, customOptions), emitter);
    }
    if (method === HTTP_METHOD.DELETE) {
      return withUnauthorizedHandler(() => (0,http_helpers_namespaceObject.remove)(url, data, headers, customOptions), emitter);
    }
  };
  return {
    authGet: (url, authCredentials, customOptions) => authRequest(HTTP_METHOD.GET, `${baseApiUrl}/${url}`, {}, authCredentials, customOptions),
    authPost: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.POST, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),
    authPut: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.PUT, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),
    authPatch: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.PATCH, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),
    authRemove: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.DELETE, `${baseApiUrl}/${url}`, data, authCredentials, customOptions)
  };
};
/* harmony default export */ const src_WSApiClient = (WSApiClient);
;// CONCATENATED MODULE: ./src/Preferences/IPreferencesController.ts
const ACTIVITY_ACTION = {
  ACTIVITY_ACTION_ALL: "walletActivity.allTransactions",
  ACTIVITY_ACTION_SEND: "walletActivity.send",
  ACTIVITY_ACTION_RECEIVE: "walletActivity.receive",
  ACTIVITY_ACTION_TOPUP: "walletActivity.topup"
};
const ACCOUNT_CATEGORY = {
  NORMAL: "normal",
  THRESHOLD: "threshold",
  IMPORTED: "imported",
  // we have private key here
  APP_SCOPED: "app_scoped",
  ACCOUNT_ABSTRACTION: "account_abstraction",
  EXTERNAL: "external",
  // like metamask, wallet connect
  MPC: "mpc",
  SFA: "sfa"
};

/**
 * Preferences controller state
 */

/**
 * @param address - address of the user
 * @param jwtToken - if jwt token already exists, it will be used instead of fetching from backend
 * @param calledFromEmbed - if called from embed
 * @param userInfo - optional user info
 * @param rehydrate - Rehydrate the preferences from the local storage
 */
;// CONCATENATED MODULE: ./src/Preferences/BasePreferencesController.ts












// By default, poll every 3 minutes
const DEFAULT_INTERVAL = 180 * 1000;
const DEFAULT_PREFERENCES = {
  selectedCurrency: "USD",
  theme: "dark",
  locale: "en",
  accountType: ACCOUNT_CATEGORY.NORMAL,
  contacts: [],
  jwtToken: "",
  fetchedPastTx: [],
  pastTransactions: [],
  paymentTx: [],
  defaultPublicAddress: "",
  customTokens: [],
  customNfts: [],
  crashReport: true,
  userInfo: {
    aggregateVerifier: "",
    email: "",
    name: "",
    profileImage: "",
    typeOfLogin: LOGIN_PROVIDER.GOOGLE,
    verifier: "",
    verifierId: ""
  }
};

/**
 * Controller that stores shared settings and exposes convenience methods
 */
class BasePreferencesController extends src_BaseController {
  /**
   * Creates a PreferencesController instance
   *
   * @param config - Initial options used to configure this controller
   * @param state - Initial state to set on this controller
   */
  constructor({
    config,
    state,
    defaultPreferences,
    signAuthMessage,
    validateSignMessage
  }) {
    super({
      config,
      state
    });
    /**
     * Name of this controller used during composition
     */
    defineProperty_default()(this, "name", "PreferencesController");
    defineProperty_default()(this, "iframeOrigin", void 0);
    defineProperty_default()(this, "wsApiClient", void 0);
    defineProperty_default()(this, "signAuthMessage", void 0);
    defineProperty_default()(this, "validateSignMessage", void 0);
    defineProperty_default()(this, "defaultPreferences", void 0);
    if (!config.api) {
      throw new Error("PreferencesController - no api specified in config.");
    }
    this.defaultState = {
      identities: {},
      selectedAddress: "",
      lastErrorMessage: "",
      lastSuccessMessage: ""
    };
    this.defaultConfig = {
      api: config.api,
      pollInterval: DEFAULT_INTERVAL
    };
    this.initialize();
    this.defaultPreferences = objectSpread2_default()(objectSpread2_default()({}, DEFAULT_PREFERENCES), defaultPreferences);
    this.signAuthMessage = signAuthMessage;
    this.validateSignMessage = validateSignMessage;
    this.wsApiClient = src_WSApiClient(this.config.api, this);
  }
  setIframeOrigin(origin) {
    this.iframeOrigin = origin;
  }
  getAddressState(address) {
    const selectedAddress = address || this.state.selectedAddress;
    return this.state.identities[selectedAddress];
  }

  /**
   * Sets selected address
   *
   * @param selectedAddress - casper account hash
   */
  setSelectedAddress(selectedAddress) {
    this.update({
      selectedAddress
    });
  }
  async getUser(address) {
    const user = await this.wsApiClient.authGet("user?fetchTx=false", this.authCredentials(address), {
      useAPIKey: true
    });
    return user.data;
  }
  async createUser(params) {
    const {
      selectedCurrency,
      theme,
      verifier,
      verifierId,
      locale,
      address,
      idToken,
      type,
      web3AuthNetwork
    } = params;
    const userPayload = {
      default_currency: selectedCurrency,
      theme,
      verifier,
      verifier_id: verifierId,
      locale,
      idToken,
      account_type: type,
      web3auth_network: web3AuthNetwork
    };
    await this.wsApiClient.authPost("user", userPayload, this.authCredentials(address), {
      useAPIKey: true
    });
    this.updateState({
      theme,
      defaultPublicAddress: address,
      selectedCurrency,
      locale,
      accountType: type
    }, address);
  }
  async storeUserLogin(params) {
    const {
      verifierId,
      verifier,
      options,
      address,
      idToken,
      web3AuthClientId,
      web3AuthNetwork,
      sessionPubKey,
      loginMode
    } = params;
    if (!options.rehydrate) {
      const browser = external_bowser_default().getParser(window.navigator.userAgent);
      const specialBrowser = getCustomDeviceInfo();
      const recordLoginPayload = {
        os: browser.getOSName(),
        os_version: browser.getOSVersion() || "unidentified",
        browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || "unidentified",
        browser_version: browser.getBrowserVersion() || "unidentified",
        platform: browser.getPlatform().type || "desktop",
        hostname: this.iframeOrigin,
        verifier,
        verifier_id: verifierId,
        idToken,
        web3auth_client_id: web3AuthClientId,
        web3auth_network: web3AuthNetwork,
        session_pub_key: sessionPubKey,
        login_mode: loginMode
      };
      await this.wsApiClient.authPost("user/recordLogin", recordLoginPayload, this.authCredentials(address), {
        useAPIKey: true
      });
    }
  }
  async setCrashReport(isEnabled) {
    var _this$getAddressState;
    if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;
    try {
      await this.wsApiClient.authPatch("user", {
        enable_crash_reporter: isEnabled
      }, this.authCredentials(), {
        useAPIKey: true
      });
      this.updateState({
        crashReport: isEnabled
      });
      return true;
    } catch (error) {
      external_loglevel_default().error(error);
      return false;
    }
  }
  async setUserTheme(theme) {
    var _this$getAddressState2;
    if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;
    try {
      await this.wsApiClient.authPatch("user", {
        theme
      }, this.authCredentials(), {
        useAPIKey: true
      });
      this.updateState({
        theme
      });
      return true;
    } catch (error) {
      external_loglevel_default().error(error);
      return false;
    }
  }
  async setUserLocale(locale) {
    var _this$getAddressState3;
    if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;
    try {
      await this.wsApiClient.authPatch("user", {
        locale
      }, this.authCredentials(), {
        useAPIKey: true
      });
      this.updateState({
        locale
      });
      return true;
    } catch (error) {
      external_loglevel_default().error("unable to set locale", error);
      return false;
    }
  }
  async setSelectedCurrency(payload) {
    var _this$getAddressState4;
    if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;
    try {
      await this.wsApiClient.authPatch("user", {
        default_currency: payload.selectedCurrency
      }, this.authCredentials(), {
        useAPIKey: true
      });
      this.updateState({
        selectedCurrency: payload.selectedCurrency
      });
      return true;
    } catch (error) {
      external_loglevel_default().error(error);
      return false;
    }
  }
  async addContact(contact) {
    try {
      var _this$getAddressState5;
      const response = await this.wsApiClient.authPost("contact", contact, this.authCredentials(), {
        useAPIKey: true
      });
      this.updateState({
        contacts: [...(((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || []), response.data]
      });
      return true;
    } catch (error) {
      external_loglevel_default().error("unable to add contact", error);
      return false;
    }
  }
  async deleteContact(contactId) {
    try {
      var _this$getAddressState6;
      const response = await this.wsApiClient.authRemove(`contact/${contactId}`, {}, this.authCredentials(), {
        useAPIKey: true
      });
      const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter(contact => contact.id !== response.data.id);
      if (finalContacts) this.updateState({
        contacts: [...finalContacts]
      });
      return true;
    } catch (error) {
      external_loglevel_default().error("unable to delete contact", error);
      return false;
    }
  }
  async revokeDiscord(idToken) {
    try {
      const resp = await this.wsApiClient.authPost("revoke/discord", {
        token: idToken
      }, this.authCredentials(), {
        useAPIKey: true
      });
      external_loglevel_default().info(resp);
    } catch (error) {
      external_loglevel_default().error(error);
    }
  }
  async patchPastTx(body, address) {
    try {
      const response = await this.wsApiClient.authPatch("transaction", body, this.authCredentials(address), {
        useAPIKey: true
      });
      external_loglevel_default().info("successfully patched", response);
    } catch (error) {
      external_loglevel_default().error("unable to patch tx", error);
    }
  }
  async postPastTx(tx, address) {
    try {
      const response = await this.wsApiClient.authPost("transaction", tx, this.authCredentials(address), {
        useAPIKey: true
      });
      external_loglevel_default().info("successfully posted tx", response);
      return response;
    } catch (error) {
      external_loglevel_default().error(error, "unable to insert transaction");
    }
  }
  async getWalletOrders(address) {
    try {
      const response = await this.wsApiClient.authGet("transaction", this.authCredentials(address), {
        useAPIKey: true
      });
      return response.success ? response.data ? response.data : [] : [];
    } catch (error) {
      external_loglevel_default().error("unable to get wallet orders tx", error);
      return [];
    }
  }
  async getTopUpOrders(address) {
    try {
      const response = await this.wsApiClient.authGet("transaction", this.authCredentials(address), {
        useAPIKey: true
      });
      return response.data || [];
    } catch (error) {
      external_loglevel_default().error("unable to fetch past Top up orders", error);
    }
  }
  async getBillBoardData() {
    try {
      const response = await this.wsApiClient.authGet("billboard", this.authCredentials(), {
        useAPIKey: true
      });
      return response.success ? response.data : [];
    } catch (error) {
      external_loglevel_default().error("unable to get billboard data", error);
      return [];
    }
  }
  async getMessageForSigning(publicAddress, web3AuthIdToken) {
    const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/message`, {
      public_address: publicAddress,
      id_token: web3AuthIdToken
    }, {}, {
      useAPIKey: true
    });
    return response.message;
  }
  async getTwitterId(payload) {
    const res = await this.wsApiClient.authGet(`twitter?screen_name=${payload.nick}`, this.authCredentials(), {
      useAPIKey: true
    });
    return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;
  }
  async sendEmail(payload) {
    return this.wsApiClient.authPost("transaction/sendemail", payload.emailObject, this.authCredentials(), {
      useAPIKey: true
    });
  }
  async refreshJwt() {
    const address = this.state.selectedAddress;
    const messageToSign = await this.getMessageForSigning(address);
    await this.validateSignMessage(messageToSign);
    const signedMessage = await this.signAuthMessage(address, messageToSign);
    const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/verify`, {
      challenge: messageToSign,
      public_address: address,
      signed_message: signedMessage
    }, {}, {
      useAPIKey: true
    });
    this.updateState({
      jwtToken: response.token
    }, address);
  }
  async getDappList() {
    try {
      const response = await this.wsApiClient.authGet("dapps", this.authCredentials(), {
        useAPIKey: true
      });
      return response.success ? response.data : [];
    } catch (error) {
      external_loglevel_default().error("unable to get dapps list", error);
      return [];
    }
  }

  /**
   * Strategy
   * For account type: threshold, normal (web3auth login)
   * idToken from web3auth login must be present. We use it directly
   *
   * For account type: app_scoped, IMPORTED
   * idToken from web3auth login must be present. We request a message for signing using the idToken
   * and sign it using the private key of the account. We then send the signed message to the backend
   * to verify the signature and return a new jwtToken that includes the app_scoped address
   *
   * For account type: Account abstraction
   * idToken from web3auth login must be present. We use it to exchange for a new jwtToken.
   * Because backend can derive AA address from public address and issue this token easily.
   *
   * For account type: external
   * idToken from web3auth `authenticateUser` (siww) login must be present. We use it directly
   */
  async init(params) {
    const {
      address,
      userInfo,
      idToken,
      metadata = {},
      type
    } = params;
    if (this.getAddressState(address)) return;
    let jwtToken;
    switch (type) {
      case ACCOUNT_CATEGORY.IMPORTED:
        {
          if (!idToken) throw new Error("Web3Auth idToken must be present");
          const messageToSign = await this.getMessageForSigning(address, idToken);
          await this.validateSignMessage(messageToSign);
          const signedMessage = await this.signAuthMessage(address, messageToSign);
          const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/verify`, objectSpread2_default()({
            challenge: messageToSign,
            account_type: type,
            public_address: address,
            signed_message: signedMessage,
            verifier: userInfo.aggregateVerifier || userInfo.verifier,
            verifier_id: userInfo.verifierId
          }, metadata), {}, {
            useAPIKey: true
          });
          jwtToken = response.token;
          break;
        }
      case ACCOUNT_CATEGORY.EXTERNAL:
        {
          if (!idToken) throw new Error("SIWW idToken must be present");
          const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/verify`, objectSpread2_default()({
            account_type: type,
            public_address: address,
            id_token: idToken,
            verifier: userInfo.aggregateVerifier || userInfo.verifier,
            verifier_id: userInfo.verifierId
          }, metadata), {}, {
            useAPIKey: true
          });
          jwtToken = response.token;
          break;
        }
      case ACCOUNT_CATEGORY.ACCOUNT_ABSTRACTION:
        {
          if (!idToken) throw new Error("Web3Auth idToken must be present");
          const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/verify`, objectSpread2_default()({
            public_address: address,
            id_token: idToken,
            verifier: userInfo.aggregateVerifier || userInfo.verifier,
            verifier_id: userInfo.verifierId,
            account_type: type
          }, metadata), {}, {
            useAPIKey: true
          });
          jwtToken = response.token;
          break;
        }
      case ACCOUNT_CATEGORY.MPC:
      case ACCOUNT_CATEGORY.SFA:
        {
          if (!metadata.signatures) throw new Error("MPC signatures must be present");
          const response = await (0,http_helpers_namespaceObject.post)(`${this.config.api}/auth/verify`, objectSpread2_default()({
            public_address: address,
            verifier: userInfo.aggregateVerifier || userInfo.verifier,
            verifier_id: userInfo.verifierId,
            account_type: type
          }, metadata), {}, {
            useAPIKey: true
          });
          jwtToken = response.token;
          break;
        }
      case ACCOUNT_CATEGORY.NORMAL:
      case ACCOUNT_CATEGORY.THRESHOLD:
      case ACCOUNT_CATEGORY.APP_SCOPED:
      default:
        if (!idToken) throw new Error("Web3Auth idToken must be present");
        jwtToken = idToken;
        break;
    }
    this.updateState({
      jwtToken,
      userInfo,
      accountType: type !== null && type !== void 0 ? type : this.defaultPreferences.accountType
    }, address);
  }
  updateState(preferences, address) {
    const selectedAddress = address || this.state.selectedAddress;
    const currentState = this.getAddressState(selectedAddress) || cloneDeep(this.defaultPreferences);
    const mergedState = objectSpread2_default()(objectSpread2_default()({}, currentState), preferences);
    this.update({
      identities: objectSpread2_default()(objectSpread2_default()({}, this.state.identities), {}, {
        [selectedAddress]: mergedState
      })
    });
    return mergedState;
  }
  authCredentials(address) {
    var _this$getAddressState7;
    const selectedAddress = address || this.state.selectedAddress;
    const jwtToken = ((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || "";
    return {
      jwtToken,
      publicAddress: selectedAddress
    };
  }
  headers(address) {
    var _this$getAddressState8;
    const selectedAddress = address || this.state.selectedAddress;
    return getHeaders(((_this$getAddressState8 = this.getAddressState(selectedAddress)) === null || _this$getAddressState8 === void 0 ? void 0 : _this$getAddressState8.jwtToken) || "", selectedAddress);
  }
}
;// CONCATENATED MODULE: ./src/Transaction/ITransactionController.ts
/**
 * The status of the transaction. Each status represents the state of the transaction internally
 * in the wallet. Some of these correspond with the state of the transaction on the network, but
 * some are wallet-specific.
 */

let TransactionStatus = /*#__PURE__*/function (TransactionStatus) {
  TransactionStatus["approved"] = "approved";
  TransactionStatus["cancelled"] = "cancelled";
  TransactionStatus["cancelling"] = "cancelling";
  TransactionStatus["confirmed"] = "confirmed";
  TransactionStatus["failed"] = "failed";
  TransactionStatus["finalized"] = "finalized";
  TransactionStatus["processed"] = "processed";
  TransactionStatus["rejected"] = "rejected";
  TransactionStatus["signed"] = "signed";
  TransactionStatus["submitted"] = "submitted";
  TransactionStatus["unapproved"] = "unapproved";
  TransactionStatus["dropped"] = "dropped";
  TransactionStatus["expired"] = "expired";
  TransactionStatus["pending"] = "pending";
  return TransactionStatus;
}({});
const TRANSACTION_TYPES = {
  CANCEL: "cancel",
  RETRY: "retry",
  CONTRACT_INTERACTION: "contractInteraction",
  DEPLOY_CONTRACT: "contractDeployment",
  WASM_BASED_DEPLOY: "wasmBasedDeploy",
  STANDARD_TRANSACTION: "transaction",
  STANDARD_PAYMENT_TRANSACTION: "payment_transaction",
  // specific to chains like solana and casper
  SENT_ETHER: "sentEther",
  TOKEN_METHOD_TRANSFER: "transfer",
  TOKEN_METHOD_TRANSFER_FROM: "transferFrom",
  TOKEN_METHOD_APPROVE: "approve",
  COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: "safeTransferFrom",
  SET_APPROVAL_FOR_ALL: "setApprovalForAll"
};
const TX_EVENTS = {
  TX_WARNING: "tx:warning",
  TX_ERROR: "tx:error",
  TX_FAILED: "tx:failed",
  TX_CONFIRMED: "tx:confirmed",
  TX_DROPPED: "tx:dropped",
  TX_EXPIRED: "tx:expired",
  TX_STATUS_UPDATE: "tx:status_update",
  TX_UNAPPROVED: "tx:unapproved",
  TX_RETRY: "tx:retry",
  TX_BLOCK_UPDATE: "tx:block_update"
};

/**
 * Transaction controller configuration
 */

/**
 * Transaction controller state
 */

/**
 * Result
 *
 * result - Promise resolving to a new transaction hash
 * transactionMeta - Meta information about this new transaction
 */
;// CONCATENATED MODULE: ./src/Transaction/BaseTransactionStateController.ts






class BaseTransactionStateManager extends src_BaseController {
  constructor({
    config,
    state,
    getCurrentChainId
  }) {
    super({
      config,
      state
    });
    defineProperty_default()(this, "getCurrentChainId", void 0);
    this.defaultConfig = {
      txHistoryLimit: 40
    };
    this.defaultState = {
      transactions: {},
      unapprovedTxs: {},
      currentNetworkTxsList: []
    };
    this.initialize();
    this.getCurrentChainId = getCurrentChainId;
  }
  getUnapprovedTxList() {
    const chainId = this.getCurrentChainId();
    return pickBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));
  }
  getTransaction(txId) {
    const {
      transactions
    } = this.state;
    return transactions[txId];
  }
  updateTransaction(txMeta) {
    // commit txMeta to state
    const txId = txMeta.id;
    txMeta.updated_at = new Date().toISOString();
    this.update({
      transactions: objectSpread2_default()(objectSpread2_default()({}, this.state.transactions), {}, {
        [txId]: txMeta
      })
    });
  }
  setTxStatusRejected(txId) {
    this._setTransactionStatus(txId, TransactionStatus.rejected);
    this._deleteTransaction(txId);
  }

  /**
   * The implementing controller can override this functionality and add custom logic + call super.()
   */
  setTxStatusUnapproved(txId) {
    this._setTransactionStatus(txId, TransactionStatus.unapproved);
  }
  setTxStatusApproved(txId) {
    this._setTransactionStatus(txId, TransactionStatus.approved);
  }
  setTxStatusSigned(txId, isFinalStep) {
    this._setTransactionStatus(txId, TransactionStatus.signed, isFinalStep);
  }
  setTxStatusSubmitted(txId) {
    this._setTransactionStatus(txId, TransactionStatus.submitted);
  }
  setTxStatusDropped(txId) {
    this._setTransactionStatus(txId, TransactionStatus.dropped);
  }
  setTxStatusExpired(txId) {
    this._setTransactionStatus(txId, TransactionStatus.expired);
  }
  setTxStatusConfirmed(txId) {
    this._setTransactionStatus(txId, TransactionStatus.confirmed);
  }
  setTxStatusFailed(txId, error_) {
    const error = !error_ ? new Error("Internal torus failure") : error_;
    const txMeta = this.getTransaction(txId);
    txMeta.error = error;
    this.updateTransaction(txMeta);
    this._setTransactionStatus(txId, TransactionStatus.failed);
  }

  /**
   * Method to determine if the transaction is in a final state
   * @param status - Transaction status
   * @returns boolean if the transaction is in a final state
   */
  isFinalState(status) {
    return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;
  }

  /**
   * Filters out the unapproved transactions from state
   */
  clearUnapprovedTxs() {
    this.update({
      transactions: omitBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved)
    });
  }

  /**
   * will append new transactions to old txns.
   */
  _addTransactionsToState(transactions) {
    this.update({
      transactions: transactions.reduce((result, newTx) => {
        result[newTx.id] = newTx;
        return result;
      }, this.state.transactions)
    });
  }

  /**
   * will set new txns, override existing if any in state.
   */
  _setTransactionsToState(transactions) {
    this.update({
      transactions: transactions.reduce((result, newTx) => {
        result[newTx.id] = newTx;
        return result;
      }, {})
    });
  }
  _deleteTransaction(targetTransactionId) {
    const {
      transactions
    } = this.state;
    delete transactions[targetTransactionId];
    this.update({
      transactions
    });
  }
  _deleteTransactions(targetTransactionIds) {
    const {
      transactions
    } = this.state;
    targetTransactionIds.forEach(transactionId => {
      delete transactions[transactionId];
    });
    this.update({
      transactions
    });
  }
  _setTransactionStatus(txId, status, isFinalStep) {
    const txMeta = this.getTransaction(txId);
    if (!txMeta) {
      return;
    }
    txMeta.status = status;
    // only updating status so no validation required on txn.
    this.updateTransaction(txMeta);
    this.emit(TX_EVENTS.TX_STATUS_UPDATE, {
      txId,
      status
    });
    if (this.isFinalState(status) || isFinalStep) {
      this.emit(`${txMeta.id}:finished`, txMeta);
    } else {
      this.emit(`${txMeta.id}:${status}`, txId);
    }
  }
}
;// CONCATENATED MODULE: ./src/index.ts




























module.exports = __webpack_exports__;
/******/ })()
;